/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "arc200_name()byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_symbol()byte[8]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_decimals()uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_totalSupply()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_balanceOf(address)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_allowance(address,address)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transfer(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_approve(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transferFrom(address,address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "supportsInterface(byte[4])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "zeroAddress()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hasBox(address,address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createBalanceBox(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAllowanceBox(address,address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "noop(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "manager()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFees(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidity(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(txn,txn)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swapAlphaToBeta(txn,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swapBetaToAlpha(txn,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "name": {
          "type": "bytes",
          "key": "name"
        },
        "symbol": {
          "type": "bytes",
          "key": "symbol"
        },
        "decimals": {
          "type": "bytes",
          "key": "decimals"
        },
        "totalSupply": {
          "type": "bytes",
          "key": "total_supply"
        },
        "initialized": {
          "type": "bytes",
          "key": "initialized"
        },
        "warden": {
          "type": "bytes",
          "key": "warden"
        },
        "factory": {
          "type": "uint64",
          "key": "factory"
        },
        "alphaId": {
          "type": "uint64",
          "key": "alpha_id"
        },
        "betaId": {
          "type": "uint64",
          "key": "beta_id"
        },
        "alphaType": {
          "type": "bytes",
          "key": "alpha_type"
        },
        "betaType": {
          "type": "bytes",
          "key": "beta_type"
        },
        "swapFee": {
          "type": "bytes",
          "key": "swap_fee"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 9,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Pool",
    "desc": "",
    "methods": [
      {
        "name": "arc200_name",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "arc200_symbol",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "byte[8]"
        }
      },
      {
        "name": "arc200_decimals",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint8"
        }
      },
      {
        "name": "arc200_totalSupply",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc200_balanceOf",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc200_allowance",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc200_transfer",
        "args": [
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "arc200_approve",
        "args": [
          {
            "name": "spender",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "arc200_transferFrom",
        "args": [
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        },
        "events": [
          {
            "name": "arc200_Transfer",
            "args": [
              {
                "name": "from",
                "type": "address"
              },
              {
                "name": "to",
                "type": "address"
              },
              {
                "name": "value",
                "type": "uint256"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "supportsInterface",
        "readonly": true,
        "args": [
          {
            "name": "interfaceID",
            "type": "byte[4]"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "zeroAddress",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "hasBox",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "createBalanceBox",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "createAllowanceBox",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "noop",
        "args": [
          {
            "name": "_n",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "manager",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "grant",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFees",
        "args": [
          {
            "name": "fee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "registerOnline",
        "args": [
          {
            "name": "selectionPk",
            "type": "byte[]"
          },
          {
            "name": "stateProofPk",
            "type": "byte[]"
          },
          {
            "name": "votePk",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerOffline",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeLiquidity",
        "args": [
          {
            "name": "lptAmount",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        },
        "events": [
          {
            "name": "Withdraw",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "inLpt",
                "type": "uint256"
              },
              {
                "name": "outAmts",
                "type": "(uint256,uint256)"
              },
              {
                "name": "poolBals",
                "type": "(uint256,uint256)"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "addLiquidity",
        "args": [
          {
            "name": "alphaTxn",
            "type": "txn"
          },
          {
            "name": "betaTxn",
            "type": "txn"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "swapAlphaToBeta",
        "args": [
          {
            "name": "alphaTxn",
            "type": "txn"
          },
          {
            "name": "minBetaAmount",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "swapBetaToAlpha",
        "args": [
          {
            "name": "betaTxn",
            "type": "txn"
          },
          {
            "name": "minAlphaAmount",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "createApplication",
        "args": [
          {
            "name": "factory",
            "type": "uint64"
          },
          {
            "name": "manager",
            "type": "address"
          },
          {
            "name": "name",
            "type": "byte[32]"
          },
          {
            "name": "symbol",
            "type": "byte[8]"
          },
          {
            "name": "alphaId",
            "type": "uint64"
          },
          {
            "name": "alphaType",
            "type": "uint8"
          },
          {
            "name": "betaId",
            "type": "uint64"
          },
          {
            "name": "betaType",
            "type": "uint8"
          },
          {
            "name": "swapFee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "arc200_Transfer",
        "args": [
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "desc": ""
      },
      {
        "name": "arc200_Approval",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "desc": ""
      },
      {
        "name": "Swap",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "inAmts",
            "type": "(uint256,uint256)"
          },
          {
            "name": "outAmts",
            "type": "(uint256,uint256)"
          },
          {
            "name": "poolBals",
            "type": "(uint256,uint256)"
          }
        ],
        "desc": ""
      },
      {
        "name": "Deposit",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "inAmts",
            "type": "(uint256,uint256)"
          },
          {
            "name": "outLpt",
            "type": "uint256"
          },
          {
            "name": "poolBals",
            "type": "(uint256,uint256)"
          }
        ],
        "desc": ""
      },
      {
        "name": "Withdraw",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "inLpt",
            "type": "uint256"
          },
          {
            "name": "outAmts",
            "type": "(uint256,uint256)"
          },
          {
            "name": "poolBals",
            "type": "(uint256,uint256)"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Pool smart contract.
 */
export type Pool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'arc200_name()byte[32]' | 'arc200_name', {
      argsObj: {
      }
      argsTuple: []
      returns: Uint8Array
    }>
    & Record<'arc200_symbol()byte[8]' | 'arc200_symbol', {
      argsObj: {
      }
      argsTuple: []
      returns: Uint8Array
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: {
      }
      argsTuple: []
      returns: number
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: {
        owner: string
      }
      argsTuple: [owner: string]
      returns: bigint
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: {
        owner: string
        spender: string
      }
      argsTuple: [owner: string, spender: string]
      returns: bigint
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: {
        to: string
        value: bigint | number
      }
      argsTuple: [to: string, value: bigint | number]
      returns: boolean
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: {
        spender: string
        value: bigint | number
      }
      argsTuple: [spender: string, value: bigint | number]
      returns: boolean
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: {
        from: string
        to: string
        value: bigint | number
      }
      argsTuple: [from: string, to: string, value: bigint | number]
      returns: boolean
    }>
    & Record<'supportsInterface(byte[4])bool' | 'supportsInterface', {
      argsObj: {
        interfaceId: Uint8Array
      }
      argsTuple: [interfaceId: Uint8Array]
      returns: boolean
    }>
    & Record<'zeroAddress()address' | 'zeroAddress', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'hasBox(address,address)bool' | 'hasBox', {
      argsObj: {
        owner: string
        spender: string
      }
      argsTuple: [owner: string, spender: string]
      returns: boolean
    }>
    & Record<'createBalanceBox(address)bool' | 'createBalanceBox', {
      argsObj: {
        owner: string
      }
      argsTuple: [owner: string]
      returns: boolean
    }>
    & Record<'createAllowanceBox(address,address)bool' | 'createAllowanceBox', {
      argsObj: {
        owner: string
        spender: string
      }
      argsTuple: [owner: string, spender: string]
      returns: boolean
    }>
    & Record<'noop(uint64)void' | 'noop', {
      argsObj: {
        n: bigint | number
      }
      argsTuple: [n: bigint | number]
      returns: void
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'manager()address' | 'manager', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'grant(address)void' | 'grant', {
      argsObj: {
        manager: string
      }
      argsTuple: [manager: string]
      returns: void
    }>
    & Record<'setFees(uint256)bool' | 'setFees', {
      argsObj: {
        fee: bigint | number
      }
      argsTuple: [fee: bigint | number]
      returns: boolean
    }>
    & Record<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void' | 'registerOnline', {
      argsObj: {
        selectionPk: Uint8Array
        stateProofPk: Uint8Array
        votePk: Uint8Array
        voteFirst: bigint | number
        voteLast: bigint | number
        voteKeyDilution: bigint | number
      }
      argsTuple: [selectionPk: Uint8Array, stateProofPk: Uint8Array, votePk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
      returns: void
    }>
    & Record<'registerOffline()void' | 'registerOffline', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'removeLiquidity(uint256)bool' | 'removeLiquidity', {
      argsObj: {
        lptAmount: bigint | number
      }
      argsTuple: [lptAmount: bigint | number]
      returns: boolean
    }>
    & Record<'addLiquidity(txn,txn)bool' | 'addLiquidity', {
      argsObj: {
        alphaTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        betaTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [alphaTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, betaTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: boolean
    }>
    & Record<'swapAlphaToBeta(txn,uint256)uint256' | 'swapAlphaToBeta', {
      argsObj: {
        alphaTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        minBetaAmount: bigint | number
      }
      argsTuple: [alphaTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, minBetaAmount: bigint | number]
      returns: bigint
    }>
    & Record<'swapBetaToAlpha(txn,uint256)uint256' | 'swapBetaToAlpha', {
      argsObj: {
        betaTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        minAlphaAmount: bigint | number
      }
      argsTuple: [betaTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, minAlphaAmount: bigint | number]
      returns: bigint
    }>
    & Record<'createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void' | 'createApplication', {
      argsObj: {
        factory: bigint | number
        manager: string
        name: Uint8Array
        symbol: Uint8Array
        alphaId: bigint | number
        alphaType: number
        betaId: bigint | number
        betaType: number
        swapFee: bigint | number
      }
      argsTuple: [factory: bigint | number, manager: string, name: Uint8Array, symbol: Uint8Array, alphaId: bigint | number, alphaType: number, betaId: bigint | number, betaType: number, swapFee: bigint | number]
      returns: void
    }>
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      name?: BinaryState
      symbol?: BinaryState
      decimals?: BinaryState
      totalSupply?: BinaryState
      initialized?: BinaryState
      warden?: BinaryState
      factory?: IntegerState
      alphaId?: IntegerState
      betaId?: IntegerState
      alphaType?: BinaryState
      betaType?: BinaryState
      swapFee?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PoolSig = keyof Pool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Pool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PoolSig> = Pool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Pool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PoolSig> = Pool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PoolCreateCalls = (typeof PoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PoolCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type PoolUpdateCalls = (typeof PoolCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type PoolUpdateCallParams =
  | TypedCallParams<'updateApplication()void'>
/**
 * A factory for available 'delete' calls
 */
export type PoolDeleteCalls = (typeof PoolCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type PoolDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type PoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PoolCreateCalls) => PoolCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: PoolUpdateCalls) => PoolUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: PoolDeleteCalls) => PoolDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Pool smart contract using the createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.factory, args.manager, args.name, args.symbol, args.alphaId, args.alphaType, args.betaId, args.betaType, args.swapFee],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Pool smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Pool smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_name()byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_symbol()byte[8]' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_decimals()uint8' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_totalSupply()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_balanceOf(address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_allowance(address,address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_transfer(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.to, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_approve(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.spender, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.from, args.to, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the supportsInterface(byte[4])bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static supportsInterface(args: MethodArgs<'supportsInterface(byte[4])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'supportsInterface(byte[4])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.interfaceId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the zeroAddress()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static zeroAddress(args: MethodArgs<'zeroAddress()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'zeroAddress()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the hasBox(address,address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hasBox(args: MethodArgs<'hasBox(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hasBox(address,address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createBalanceBox(address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createBalanceBox(args: MethodArgs<'createBalanceBox(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createBalanceBox(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createAllowanceBox(address,address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAllowanceBox(args: MethodArgs<'createAllowanceBox(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createAllowanceBox(address,address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the noop(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static noop(args: MethodArgs<'noop(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'noop(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.n],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the manager()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static manager(args: MethodArgs<'manager()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'manager()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grant(args: MethodArgs<'grant(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.manager],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setFees(uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFees(args: MethodArgs<'setFees(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFees(uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.selectionPk, args.stateProofPk, args.votePk, args.voteFirst, args.voteLast, args.voteKeyDilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerOffline()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOffline(args: MethodArgs<'registerOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerOffline()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeLiquidity(args: MethodArgs<'removeLiquidity(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeLiquidity(uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.lptAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(txn,txn)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addLiquidity(args: MethodArgs<'addLiquidity(txn,txn)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addLiquidity(txn,txn)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.alphaTxn, args.betaTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swapAlphaToBeta(txn,uint256)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swapAlphaToBeta(args: MethodArgs<'swapAlphaToBeta(txn,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swapAlphaToBeta(txn,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.alphaTxn, args.minBetaAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swapBetaToAlpha(txn,uint256)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swapBetaToAlpha(args: MethodArgs<'swapBetaToAlpha(txn,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swapBetaToAlpha(txn,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.betaTxn, args.minAlphaAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Pool smart contract
 */
export class PoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Pool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Pool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PoolDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PoolCallFactory.create)
    const updateArgs = params.updateCall?.(PoolCallFactory.update)
    const deleteArgs = params.deleteCall?.(PoolCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Pool smart contract using the createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(PoolCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Pool smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'updateApplication()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(PoolCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Pool smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(PoolCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Pool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200Name(args, params))
  }

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200Symbol(args, params))
  }

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200Decimals(args, params))
  }

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200TotalSupply(args, params))
  }

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200BalanceOf(args, params))
  }

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200Allowance(args, params))
  }

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200Transfer(args, params))
  }

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200Approve(args, params))
  }

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.arc200TransferFrom(args, params))
  }

  /**
   * Calls the supportsInterface(byte[4])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public supportsInterface(args: MethodArgs<'supportsInterface(byte[4])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.supportsInterface(args, params))
  }

  /**
   * Calls the zeroAddress()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public zeroAddress(args: MethodArgs<'zeroAddress()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.zeroAddress(args, params))
  }

  /**
   * Calls the hasBox(address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hasBox(args: MethodArgs<'hasBox(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.hasBox(args, params))
  }

  /**
   * Calls the createBalanceBox(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createBalanceBox(args: MethodArgs<'createBalanceBox(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.createBalanceBox(args, params))
  }

  /**
   * Calls the createAllowanceBox(address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAllowanceBox(args: MethodArgs<'createAllowanceBox(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.createAllowanceBox(args, params))
  }

  /**
   * Calls the noop(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public noop(args: MethodArgs<'noop(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.noop(args, params))
  }

  /**
   * Calls the manager()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public manager(args: MethodArgs<'manager()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.manager(args, params))
  }

  /**
   * Calls the grant(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grant(args: MethodArgs<'grant(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.grant(args, params))
  }

  /**
   * Calls the setFees(uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFees(args: MethodArgs<'setFees(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.setFees(args, params))
  }

  /**
   * Calls the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.registerOnline(args, params))
  }

  /**
   * Calls the registerOffline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOffline(args: MethodArgs<'registerOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.registerOffline(args, params))
  }

  /**
   * Calls the removeLiquidity(uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeLiquidity(args: MethodArgs<'removeLiquidity(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.removeLiquidity(args, params))
  }

  /**
   * Calls the addLiquidity(txn,txn)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addLiquidity(args: MethodArgs<'addLiquidity(txn,txn)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.addLiquidity(args, params))
  }

  /**
   * Calls the swapAlphaToBeta(txn,uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public swapAlphaToBeta(args: MethodArgs<'swapAlphaToBeta(txn,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.swapAlphaToBeta(args, params))
  }

  /**
   * Calls the swapBetaToAlpha(txn,uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public swapBetaToAlpha(args: MethodArgs<'swapBetaToAlpha(txn,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.swapBetaToAlpha(args, params))
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolCallFactory.bootstrap(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Pool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get name() {
        return PoolClient.getBinaryState(state, 'name')
      },
      get symbol() {
        return PoolClient.getBinaryState(state, 'symbol')
      },
      get decimals() {
        return PoolClient.getBinaryState(state, 'decimals')
      },
      get totalSupply() {
        return PoolClient.getBinaryState(state, 'total_supply')
      },
      get initialized() {
        return PoolClient.getBinaryState(state, 'initialized')
      },
      get warden() {
        return PoolClient.getBinaryState(state, 'warden')
      },
      get factory() {
        return PoolClient.getIntegerState(state, 'factory')
      },
      get alphaId() {
        return PoolClient.getIntegerState(state, 'alpha_id')
      },
      get betaId() {
        return PoolClient.getIntegerState(state, 'beta_id')
      },
      get alphaType() {
        return PoolClient.getBinaryState(state, 'alpha_type')
      },
      get betaType() {
        return PoolClient.getBinaryState(state, 'beta_type')
      },
      get swapFee() {
        return PoolClient.getBinaryState(state, 'swap_fee')
      },
    }
  }

  public compose(): PoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Name(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Symbol(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Decimals(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200TotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200BalanceOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Allowance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200TransferFrom(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      supportsInterface(args: MethodArgs<'supportsInterface(byte[4])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.supportsInterface(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      zeroAddress(args: MethodArgs<'zeroAddress()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.zeroAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      hasBox(args: MethodArgs<'hasBox(address,address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hasBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createBalanceBox(args: MethodArgs<'createBalanceBox(address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createBalanceBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAllowanceBox(args: MethodArgs<'createAllowanceBox(address,address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAllowanceBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      noop(args: MethodArgs<'noop(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.noop(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      manager(args: MethodArgs<'manager()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.manager(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grant(args: MethodArgs<'grant(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grant(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFees(args: MethodArgs<'setFees(uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFees(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOnline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOffline(args: MethodArgs<'registerOffline()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOffline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeLiquidity(args: MethodArgs<'removeLiquidity(uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeLiquidity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addLiquidity(args: MethodArgs<'addLiquidity(txn,txn)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addLiquidity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swapAlphaToBeta(args: MethodArgs<'swapAlphaToBeta(txn,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swapAlphaToBeta(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swapBetaToAlpha(args: MethodArgs<'swapBetaToAlpha(txn,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swapBetaToAlpha(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PoolComposer
  }
}
export type PoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_name()byte[32]'>]>

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_symbol()byte[8]'>]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_decimals()uint8'>]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_totalSupply()uint256'>]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_balanceOf(address)uint256'>]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_allowance(address,address)uint256'>]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_transfer(address,uint256)bool'>]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_approve(address,uint256)bool'>]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'arc200_transferFrom(address,address,uint256)bool'>]>

  /**
   * Calls the supportsInterface(byte[4])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  supportsInterface(args: MethodArgs<'supportsInterface(byte[4])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'supportsInterface(byte[4])bool'>]>

  /**
   * Calls the zeroAddress()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  zeroAddress(args: MethodArgs<'zeroAddress()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'zeroAddress()address'>]>

  /**
   * Calls the hasBox(address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasBox(args: MethodArgs<'hasBox(address,address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'hasBox(address,address)bool'>]>

  /**
   * Calls the createBalanceBox(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBalanceBox(args: MethodArgs<'createBalanceBox(address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'createBalanceBox(address)bool'>]>

  /**
   * Calls the createAllowanceBox(address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAllowanceBox(args: MethodArgs<'createAllowanceBox(address,address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'createAllowanceBox(address,address)bool'>]>

  /**
   * Calls the noop(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noop(args: MethodArgs<'noop(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'noop(uint64)void'>]>

  /**
   * Calls the manager()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  manager(args: MethodArgs<'manager()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'manager()address'>]>

  /**
   * Calls the grant(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grant(args: MethodArgs<'grant(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'grant(address)void'>]>

  /**
   * Calls the setFees(uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFees(args: MethodArgs<'setFees(uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'setFees(uint256)bool'>]>

  /**
   * Calls the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the registerOffline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOffline(args: MethodArgs<'registerOffline()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'registerOffline()void'>]>

  /**
   * Calls the removeLiquidity(uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(args: MethodArgs<'removeLiquidity(uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'removeLiquidity(uint256)bool'>]>

  /**
   * Calls the addLiquidity(txn,txn)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(args: MethodArgs<'addLiquidity(txn,txn)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'addLiquidity(txn,txn)bool'>]>

  /**
   * Calls the swapAlphaToBeta(txn,uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapAlphaToBeta(args: MethodArgs<'swapAlphaToBeta(txn,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'swapAlphaToBeta(txn,uint256)uint256'>]>

  /**
   * Calls the swapBetaToAlpha(txn,uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapBetaToAlpha(args: MethodArgs<'swapBetaToAlpha(txn,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'swapBetaToAlpha(txn,uint256)uint256'>]>

  /**
   * Calls the bootstrap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, MethodReturn<'bootstrap()void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Pool smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): PoolComposer<[...TReturns, MethodReturn<'updateApplication()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Pool smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): PoolComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Pool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): PoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PoolComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<PoolComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PoolComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
