/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "manager()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "poolBootstrap(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFee(uint64)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPlatformFee(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPoolManager(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPoolFee(uint64,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(address,uint256,(uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "noop(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "warden": {
          "type": "bytes",
          "key": "warden"
        },
        "bootstrapFee": {
          "type": "uint64",
          "key": "bootstrap_fee"
        },
        "platformFee": {
          "type": "bytes",
          "key": "platform_fee"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "PoolFactory",
    "desc": "",
    "methods": [
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "manager",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "grant",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createPool",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "name",
            "type": "byte[32]"
          },
          {
            "name": "symbol",
            "type": "byte[8]"
          },
          {
            "name": "alphaId",
            "type": "uint64"
          },
          {
            "name": "alphaType",
            "type": "uint8"
          },
          {
            "name": "betaId",
            "type": "uint64"
          },
          {
            "name": "betaType",
            "type": "uint8"
          },
          {
            "name": "swapFee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint64"
        },
        "events": [
          {
            "name": "PoolCreated",
            "args": [
              {
                "name": "poolId",
                "type": "uint64"
              },
              {
                "name": "alphaId",
                "type": "uint64"
              },
              {
                "name": "alphaType",
                "type": "uint8"
              },
              {
                "name": "betaId",
                "type": "uint64"
              },
              {
                "name": "betaType",
                "type": "uint8"
              },
              {
                "name": "swapFee",
                "type": "uint256"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "poolBootstrap",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PoolBootstrap",
            "args": [
              {
                "name": "poolId",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "setFee",
        "args": [
          {
            "name": "fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "setPlatformFee",
        "args": [
          {
            "name": "fee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "setPoolManager",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          },
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPoolFee",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          },
          {
            "name": "fee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "amount",
            "type": "uint256"
          },
          {
            "name": "id",
            "type": "(uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Withdraw",
            "args": [
              {
                "name": "to",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "asaId",
                "type": "uint64"
              },
              {
                "name": "smartAssetId",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "noop",
        "args": [
          {
            "name": "_n",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "PoolCreated",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          },
          {
            "name": "alphaId",
            "type": "uint64"
          },
          {
            "name": "alphaType",
            "type": "uint8"
          },
          {
            "name": "betaId",
            "type": "uint64"
          },
          {
            "name": "betaType",
            "type": "uint8"
          },
          {
            "name": "swapFee",
            "type": "uint256"
          }
        ],
        "desc": ""
      },
      {
        "name": "PoolBootstrap",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "Withdraw",
        "args": [
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "amount",
            "type": "uint256"
          },
          {
            "name": "asaId",
            "type": "uint64"
          },
          {
            "name": "smartAssetId",
            "type": "uint64"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the PoolFactory smart contract.
 */
export type PoolFactory = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'manager()address' | 'manager', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'grant(address)void' | 'grant', {
      argsObj: {
        manager: string
      }
      argsTuple: [manager: string]
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64' | 'createPool', {
      argsObj: {
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        name: Uint8Array
        symbol: Uint8Array
        alphaId: bigint | number
        alphaType: number
        betaId: bigint | number
        betaType: number
        swapFee: bigint | number
      }
      argsTuple: [payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, name: Uint8Array, symbol: Uint8Array, alphaId: bigint | number, alphaType: number, betaId: bigint | number, betaType: number, swapFee: bigint | number]
      returns: bigint
    }>
    & Record<'poolBootstrap(uint64)void' | 'poolBootstrap', {
      argsObj: {
        poolId: bigint | number
      }
      argsTuple: [poolId: bigint | number]
      returns: void
    }>
    & Record<'setFee(uint64)bool' | 'setFee', {
      argsObj: {
        fee: bigint | number
      }
      argsTuple: [fee: bigint | number]
      returns: boolean
    }>
    & Record<'setPlatformFee(uint256)bool' | 'setPlatformFee', {
      argsObj: {
        fee: bigint | number
      }
      argsTuple: [fee: bigint | number]
      returns: boolean
    }>
    & Record<'setPoolManager(uint64,address)void' | 'setPoolManager', {
      argsObj: {
        poolId: bigint | number
        manager: string
      }
      argsTuple: [poolId: bigint | number, manager: string]
      returns: void
    }>
    & Record<'setPoolFee(uint64,uint256)void' | 'setPoolFee', {
      argsObj: {
        poolId: bigint | number
        fee: bigint | number
      }
      argsTuple: [poolId: bigint | number, fee: bigint | number]
      returns: void
    }>
    & Record<'withdraw(address,uint256,(uint64,uint64))void' | 'withdraw', {
      argsObj: {
        to: string
        amount: bigint | number
        id: [bigint | number, bigint | number]
      }
      argsTuple: [to: string, amount: bigint | number, id: [bigint | number, bigint | number]]
      returns: void
    }>
    & Record<'noop(uint64)void' | 'noop', {
      argsObj: {
        n: bigint | number
      }
      argsTuple: [n: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      warden?: BinaryState
      bootstrapFee?: IntegerState
      platformFee?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PoolFactorySig = keyof PoolFactory['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PoolFactorySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the PoolFactory smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PoolFactorySig> = PoolFactory['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PoolFactory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PoolFactorySig> = PoolFactory['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PoolFactoryCreateCalls = (typeof PoolFactoryCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PoolFactoryCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type PoolFactoryUpdateCalls = (typeof PoolFactoryCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type PoolFactoryUpdateCallParams =
  | TypedCallParams<'updateApplication()void'>
/**
 * A factory for available 'delete' calls
 */
export type PoolFactoryDeleteCalls = (typeof PoolFactoryCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type PoolFactoryDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type PoolFactoryDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PoolFactoryCreateCalls) => PoolFactoryCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: PoolFactoryUpdateCalls) => PoolFactoryUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: PoolFactoryDeleteCalls) => PoolFactoryDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PoolFactoryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the PoolFactory smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the PoolFactory smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the PoolFactory smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the manager()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static manager(args: MethodArgs<'manager()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'manager()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grant(args: MethodArgs<'grant(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.manager],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createPool(args: MethodArgs<'createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxn, args.name, args.symbol, args.alphaId, args.alphaType, args.betaId, args.betaType, args.swapFee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the poolBootstrap(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static poolBootstrap(args: MethodArgs<'poolBootstrap(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'poolBootstrap(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setFee(uint64)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFee(args: MethodArgs<'setFee(uint64)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFee(uint64)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setPlatformFee(uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPlatformFee(args: MethodArgs<'setPlatformFee(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setPlatformFee(uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setPoolManager(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPoolManager(args: MethodArgs<'setPoolManager(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setPoolManager(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolId, args.manager],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setPoolFee(uint64,uint256)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPoolFee(args: MethodArgs<'setPoolFee(uint64,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setPoolFee(uint64,uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolId, args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(address,uint256,(uint64,uint64))void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(address,uint256,(uint64,uint64))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(address,uint256,(uint64,uint64))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.to, args.amount, args.id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the noop(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static noop(args: MethodArgs<'noop(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'noop(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.n],
      ...params,
    }
  }
}

/**
 * A client to make calls to the PoolFactory smart contract
 */
export class PoolFactoryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PoolFactoryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof PoolFactory['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the PoolFactory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PoolFactoryDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PoolFactoryCallFactory.create)
    const updateArgs = params.updateCall?.(PoolFactoryCallFactory.update)
    const deleteArgs = params.deleteCall?.(PoolFactoryCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the PoolFactory smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(PoolFactoryCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the PoolFactory smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'updateApplication()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(PoolFactoryCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the PoolFactory smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(PoolFactoryCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the PoolFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the manager()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public manager(args: MethodArgs<'manager()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.manager(args, params))
  }

  /**
   * Calls the grant(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grant(args: MethodArgs<'grant(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.grant(args, params))
  }

  /**
   * Calls the createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createPool(args: MethodArgs<'createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.createPool(args, params))
  }

  /**
   * Calls the poolBootstrap(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public poolBootstrap(args: MethodArgs<'poolBootstrap(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.poolBootstrap(args, params))
  }

  /**
   * Calls the setFee(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFee(args: MethodArgs<'setFee(uint64)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.setFee(args, params))
  }

  /**
   * Calls the setPlatformFee(uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPlatformFee(args: MethodArgs<'setPlatformFee(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.setPlatformFee(args, params))
  }

  /**
   * Calls the setPoolManager(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPoolManager(args: MethodArgs<'setPoolManager(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.setPoolManager(args, params))
  }

  /**
   * Calls the setPoolFee(uint64,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPoolFee(args: MethodArgs<'setPoolFee(uint64,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.setPoolFee(args, params))
  }

  /**
   * Calls the withdraw(address,uint256,(uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(address,uint256,(uint64,uint64))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.withdraw(args, params))
  }

  /**
   * Calls the noop(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public noop(args: MethodArgs<'noop(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PoolFactoryCallFactory.noop(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<PoolFactory['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get warden() {
        return PoolFactoryClient.getBinaryState(state, 'warden')
      },
      get bootstrapFee() {
        return PoolFactoryClient.getIntegerState(state, 'bootstrap_fee')
      },
      get platformFee() {
        return PoolFactoryClient.getBinaryState(state, 'platform_fee')
      },
    }
  }

  public compose(): PoolFactoryComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      manager(args: MethodArgs<'manager()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.manager(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grant(args: MethodArgs<'grant(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grant(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createPool(args: MethodArgs<'createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      poolBootstrap(args: MethodArgs<'poolBootstrap(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.poolBootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFee(args: MethodArgs<'setFee(uint64)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPlatformFee(args: MethodArgs<'setPlatformFee(uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPlatformFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPoolManager(args: MethodArgs<'setPoolManager(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPoolManager(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPoolFee(args: MethodArgs<'setPoolFee(uint64,uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPoolFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(address,uint256,(uint64,uint64))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      noop(args: MethodArgs<'noop(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.noop(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PoolFactoryComposer
  }
}
export type PoolFactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the manager()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  manager(args: MethodArgs<'manager()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'manager()address'>]>

  /**
   * Calls the grant(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grant(args: MethodArgs<'grant(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'grant(address)void'>]>

  /**
   * Calls the createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(args: MethodArgs<'createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64'>]>

  /**
   * Calls the poolBootstrap(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  poolBootstrap(args: MethodArgs<'poolBootstrap(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'poolBootstrap(uint64)void'>]>

  /**
   * Calls the setFee(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFee(args: MethodArgs<'setFee(uint64)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'setFee(uint64)bool'>]>

  /**
   * Calls the setPlatformFee(uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPlatformFee(args: MethodArgs<'setPlatformFee(uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'setPlatformFee(uint256)bool'>]>

  /**
   * Calls the setPoolManager(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPoolManager(args: MethodArgs<'setPoolManager(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'setPoolManager(uint64,address)void'>]>

  /**
   * Calls the setPoolFee(uint64,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPoolFee(args: MethodArgs<'setPoolFee(uint64,uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'setPoolFee(uint64,uint256)void'>]>

  /**
   * Calls the withdraw(address,uint256,(uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(address,uint256,(uint64,uint64))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'withdraw(address,uint256,(uint64,uint64))void'>]>

  /**
   * Calls the noop(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noop(args: MethodArgs<'noop(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, MethodReturn<'noop(uint64)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the PoolFactory smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): PoolFactoryComposer<[...TReturns, MethodReturn<'updateApplication()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the PoolFactory smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): PoolFactoryComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the PoolFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): PoolFactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PoolFactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PoolFactoryComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<PoolFactoryComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PoolFactoryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PoolFactoryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
