/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,address,application,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "create_pool_token(pay,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_admin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_governer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_fees(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_mint_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_burn_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_swap_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_online(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_offline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_ratio()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(pay,uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_to_arc200(pay,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_from_arc200(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "admin": {
          "type": "bytes",
          "key": "admin"
        },
        "governer": {
          "type": "bytes",
          "key": "governer"
        },
        "ratio": {
          "type": "uint64",
          "key": "ratio"
        },
        "swap_fee": {
          "type": "uint64",
          "key": "swap_fee"
        },
        "admin_fee": {
          "type": "uint64",
          "key": "admin_fee"
        },
        "lpt_asset": {
          "type": "uint64",
          "key": "lpt_asset"
        },
        "arc200_token": {
          "type": "uint64",
          "key": "arc200_token"
        },
        "mint_enabled": {
          "type": "bytes",
          "key": "mint_enabled"
        },
        "burn_enabled": {
          "type": "bytes",
          "key": "burn_enabled"
        },
        "swap_enabled": {
          "type": "bytes",
          "key": "swap_enabled"
        },
        "initialized": {
          "type": "bytes",
          "key": "initialized"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 6,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AlgoArc200Pool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "admin",
            "type": "address",
            "desc": ""
          },
          {
            "name": "governer",
            "type": "address",
            "desc": ""
          },
          {
            "name": "arc200_token",
            "type": "application",
            "desc": ""
          },
          {
            "name": "lp_fee",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "initialize values",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "desc": "allows admin to update the application",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "create_pool_token",
        "args": [
          {
            "name": "algo_seed_txn",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "lpt_name",
            "type": "string",
            "desc": ""
          },
          {
            "name": "lpt_unit",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "set_admin",
        "args": [
          {
            "name": "admin",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_governer",
        "args": [
          {
            "name": "governer",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_fees",
        "args": [
          {
            "name": "fee",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_mint_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_burn_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_swap_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "register_online",
        "args": [
          {
            "name": "selection_pk",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "state_proof_pk",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "vote_pk",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "vote_first",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "vote_last",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "vote_key_dilution",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "register_offline",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_ratio",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "pay_txn",
            "type": "pay",
            "desc": "pay txn with algos sending to this app account"
          },
          {
            "name": "arc200_amount",
            "type": "uint64",
            "desc": "amount of arc200 approved to add to liquidity"
          },
          {
            "name": "lpt_asset",
            "type": "asset",
            "desc": "lpt asset needed to mint"
          }
        ],
        "desc": "Add liquidity and mints lpt token",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "burn",
        "args": [
          {
            "name": "lpt_xfer_txn",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "Withdraw liquidity",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "swap_to_arc200",
        "args": [
          {
            "name": "pay_txn",
            "type": "pay",
            "desc": "Txn with an amount of algos sending to this app account"
          },
          {
            "name": "min_amount",
            "type": "uint64",
            "desc": "min arc200 for this swap to be successful"
          }
        ],
        "desc": "Swap from Algos to Arc200",
        "returns": {
          "type": "uint64",
          "desc": "amount of algos returned"
        }
      },
      {
        "name": "swap_from_arc200",
        "args": [
          {
            "name": "arc200_amount",
            "type": "uint64",
            "desc": "amount of arc200 approved"
          },
          {
            "name": "min_amount",
            "type": "uint64",
            "desc": "min algo for this swap to be successful"
          }
        ],
        "desc": "Swap tokens from Arc200 to Algos",
        "returns": {
          "type": "uint64",
          "desc": "amount of algos returned"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AlgoArc200Pool smart contract.
 */
export type AlgoArc200Pool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address,application,uint64)void' | 'createApplication', {
      argsObj: {
        admin: string
        governer: string
        arc200_token: number | bigint
        lp_fee: bigint | number
      }
      argsTuple: [admin: string, governer: string, arc200_token: number | bigint, lp_fee: bigint | number]
      returns: void
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'create_pool_token(pay,string,string)uint64' | 'create_pool_token', {
      argsObj: {
        algo_seed_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        lpt_name: string
        lpt_unit: string
      }
      argsTuple: [algo_seed_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, lpt_name: string, lpt_unit: string]
      returns: bigint
    }>
    & Record<'set_admin(address)void' | 'set_admin', {
      argsObj: {
        admin: string
      }
      argsTuple: [admin: string]
      returns: void
    }>
    & Record<'set_governer(address)void' | 'set_governer', {
      argsObj: {
        governer: string
      }
      argsTuple: [governer: string]
      returns: void
    }>
    & Record<'set_fees(uint64)void' | 'set_fees', {
      argsObj: {
        fee: bigint | number
      }
      argsTuple: [fee: bigint | number]
      returns: void
    }>
    & Record<'set_mint_enabled(bool)void' | 'set_mint_enabled', {
      argsObj: {
        enabled: boolean
      }
      argsTuple: [enabled: boolean]
      returns: void
    }>
    & Record<'set_burn_enabled(bool)void' | 'set_burn_enabled', {
      argsObj: {
        enabled: boolean
      }
      argsTuple: [enabled: boolean]
      returns: void
    }>
    & Record<'set_swap_enabled(bool)void' | 'set_swap_enabled', {
      argsObj: {
        enabled: boolean
      }
      argsTuple: [enabled: boolean]
      returns: void
    }>
    & Record<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void' | 'register_online', {
      argsObj: {
        selection_pk: Uint8Array
        state_proof_pk: Uint8Array
        vote_pk: Uint8Array
        vote_first: bigint | number
        vote_last: bigint | number
        vote_key_dilution: bigint | number
      }
      argsTuple: [selection_pk: Uint8Array, state_proof_pk: Uint8Array, vote_pk: Uint8Array, vote_first: bigint | number, vote_last: bigint | number, vote_key_dilution: bigint | number]
      returns: void
    }>
    & Record<'register_offline()void' | 'register_offline', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'set_ratio()void' | 'set_ratio', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'mint(pay,uint64,asset)void' | 'mint', {
      argsObj: {
        /**
         * pay txn with algos sending to this app account
         */
        pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * amount of arc200 approved to add to liquidity
         */
        arc200_amount: bigint | number
        /**
         * lpt asset needed to mint
         */
        lpt_asset: number | bigint
      }
      argsTuple: [pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, arc200_amount: bigint | number, lpt_asset: number | bigint]
      returns: void
    }>
    & Record<'burn(axfer)void' | 'burn', {
      argsObj: {
        lpt_xfer_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [lpt_xfer_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'swap_to_arc200(pay,uint64)uint64' | 'swap_to_arc200', {
      argsObj: {
        /**
         * Txn with an amount of algos sending to this app account
         */
        pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * min arc200 for this swap to be successful
         */
        min_amount: bigint | number
      }
      argsTuple: [pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, min_amount: bigint | number]
      /**
       * amount of algos returned
       */
      returns: bigint
    }>
    & Record<'swap_from_arc200(uint64,uint64)uint64' | 'swap_from_arc200', {
      argsObj: {
        /**
         * amount of arc200 approved
         */
        arc200_amount: bigint | number
        /**
         * min algo for this swap to be successful
         */
        min_amount: bigint | number
      }
      argsTuple: [arc200_amount: bigint | number, min_amount: bigint | number]
      /**
       * amount of algos returned
       */
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'admin'?: BinaryState
      'governer'?: BinaryState
      'ratio'?: IntegerState
      'swap_fee'?: IntegerState
      'admin_fee'?: IntegerState
      'lpt_asset'?: IntegerState
      'arc200_token'?: IntegerState
      'mint_enabled'?: BinaryState
      'burn_enabled'?: BinaryState
      'swap_enabled'?: BinaryState
      'initialized'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AlgoArc200PoolSig = keyof AlgoArc200Pool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AlgoArc200PoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AlgoArc200Pool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AlgoArc200PoolSig> = AlgoArc200Pool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoArc200Pool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoArc200PoolSig> = AlgoArc200Pool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AlgoArc200PoolCreateCalls = (typeof AlgoArc200PoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AlgoArc200PoolCreateCallParams =
  | (TypedCallParams<'createApplication(address,address,application,uint64)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AlgoArc200PoolUpdateCalls = (typeof AlgoArc200PoolCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AlgoArc200PoolUpdateCallParams =
  | TypedCallParams<'updateApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoArc200PoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AlgoArc200PoolCreateCalls) => AlgoArc200PoolCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AlgoArc200PoolUpdateCalls) => AlgoArc200PoolUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AlgoArc200PoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AlgoArc200Pool smart contract using the createApplication(address,address,application,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,address,application,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,address,application,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.admin, args.governer, args.arc200_token, args.lp_fee],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the AlgoArc200Pool smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create_pool_token(pay,string,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createPoolToken(args: MethodArgs<'create_pool_token(pay,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_pool_token(pay,string,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.algo_seed_txn, args.lpt_name, args.lpt_unit],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_admin(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAdmin(args: MethodArgs<'set_admin(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_admin(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.admin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_governer(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setGoverner(args: MethodArgs<'set_governer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_governer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.governer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_fees(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFees(args: MethodArgs<'set_fees(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_fees(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_mint_enabled(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setMintEnabled(args: MethodArgs<'set_mint_enabled(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_mint_enabled(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.enabled],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_burn_enabled(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBurnEnabled(args: MethodArgs<'set_burn_enabled(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_burn_enabled(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.enabled],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_swap_enabled(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setSwapEnabled(args: MethodArgs<'set_swap_enabled(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_swap_enabled(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.enabled],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register_online(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOnline(args: MethodArgs<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.selection_pk, args.state_proof_pk, args.vote_pk, args.vote_first, args.vote_last, args.vote_key_dilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register_offline()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOffline(args: MethodArgs<'register_offline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_offline()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_ratio()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setRatio(args: MethodArgs<'set_ratio()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_ratio()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mint(pay,uint64,asset)void ABI method
   *
   * Add liquidity and mints lpt token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mint(args: MethodArgs<'mint(pay,uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint(pay,uint64,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.pay_txn, args.arc200_amount, args.lpt_asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn(axfer)void ABI method
   *
   * Withdraw liquidity
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burn(args: MethodArgs<'burn(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.lpt_xfer_txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swap_to_arc200(pay,uint64)uint64 ABI method
   *
   * Swap from Algos to Arc200
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swapToArc200(args: MethodArgs<'swap_to_arc200(pay,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swap_to_arc200(pay,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.pay_txn, args.min_amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swap_from_arc200(uint64,uint64)uint64 ABI method
   *
   * Swap tokens from Arc200 to Algos
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swapFromArc200(args: MethodArgs<'swap_from_arc200(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swap_from_arc200(uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc200_amount, args.min_amount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AlgoArc200Pool smart contract
 */
export class AlgoArc200PoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AlgoArc200PoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AlgoArc200Pool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AlgoArc200Pool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AlgoArc200PoolDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AlgoArc200PoolCallFactory.create)
    const updateArgs = params.updateCall?.(AlgoArc200PoolCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AlgoArc200Pool smart contract using the createApplication(address,address,application,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,address,application,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(address,address,application,uint64)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AlgoArc200PoolCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the AlgoArc200Pool smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'updateApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.update(AlgoArc200PoolCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgoArc200Pool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the create_pool_token(pay,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createPoolToken(args: MethodArgs<'create_pool_token(pay,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.createPoolToken(args, params))
  }

  /**
   * Calls the set_admin(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAdmin(args: MethodArgs<'set_admin(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.setAdmin(args, params))
  }

  /**
   * Calls the set_governer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setGoverner(args: MethodArgs<'set_governer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.setGoverner(args, params))
  }

  /**
   * Calls the set_fees(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFees(args: MethodArgs<'set_fees(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.setFees(args, params))
  }

  /**
   * Calls the set_mint_enabled(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setMintEnabled(args: MethodArgs<'set_mint_enabled(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.setMintEnabled(args, params))
  }

  /**
   * Calls the set_burn_enabled(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBurnEnabled(args: MethodArgs<'set_burn_enabled(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.setBurnEnabled(args, params))
  }

  /**
   * Calls the set_swap_enabled(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setSwapEnabled(args: MethodArgs<'set_swap_enabled(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.setSwapEnabled(args, params))
  }

  /**
   * Calls the register_online(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOnline(args: MethodArgs<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.registerOnline(args, params))
  }

  /**
   * Calls the register_offline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOffline(args: MethodArgs<'register_offline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.registerOffline(args, params))
  }

  /**
   * Calls the set_ratio()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setRatio(args: MethodArgs<'set_ratio()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.setRatio(args, params))
  }

  /**
   * Calls the mint(pay,uint64,asset)void ABI method.
   *
   * Add liquidity and mints lpt token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mint(args: MethodArgs<'mint(pay,uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.mint(args, params))
  }

  /**
   * Calls the burn(axfer)void ABI method.
   *
   * Withdraw liquidity
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burn(args: MethodArgs<'burn(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.burn(args, params))
  }

  /**
   * Calls the swap_to_arc200(pay,uint64)uint64 ABI method.
   *
   * Swap from Algos to Arc200
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: amount of algos returned
   */
  public swapToArc200(args: MethodArgs<'swap_to_arc200(pay,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.swapToArc200(args, params))
  }

  /**
   * Calls the swap_from_arc200(uint64,uint64)uint64 ABI method.
   *
   * Swap tokens from Arc200 to Algos
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: amount of algos returned
   */
  public swapFromArc200(args: MethodArgs<'swap_from_arc200(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolCallFactory.swapFromArc200(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AlgoArc200Pool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admin() {
        return AlgoArc200PoolClient.getBinaryState(state, 'admin')
      },
      get governer() {
        return AlgoArc200PoolClient.getBinaryState(state, 'governer')
      },
      get ratio() {
        return AlgoArc200PoolClient.getIntegerState(state, 'ratio')
      },
      get swap_fee() {
        return AlgoArc200PoolClient.getIntegerState(state, 'swap_fee')
      },
      get admin_fee() {
        return AlgoArc200PoolClient.getIntegerState(state, 'admin_fee')
      },
      get lpt_asset() {
        return AlgoArc200PoolClient.getIntegerState(state, 'lpt_asset')
      },
      get arc200_token() {
        return AlgoArc200PoolClient.getIntegerState(state, 'arc200_token')
      },
      get mint_enabled() {
        return AlgoArc200PoolClient.getBinaryState(state, 'mint_enabled')
      },
      get burn_enabled() {
        return AlgoArc200PoolClient.getBinaryState(state, 'burn_enabled')
      },
      get swap_enabled() {
        return AlgoArc200PoolClient.getBinaryState(state, 'swap_enabled')
      },
      get initialized() {
        return AlgoArc200PoolClient.getBinaryState(state, 'initialized')
      },
    }
  }

  public compose(): AlgoArc200PoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createPoolToken(args: MethodArgs<'create_pool_token(pay,string,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createPoolToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAdmin(args: MethodArgs<'set_admin(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setGoverner(args: MethodArgs<'set_governer(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setGoverner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFees(args: MethodArgs<'set_fees(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFees(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setMintEnabled(args: MethodArgs<'set_mint_enabled(bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setMintEnabled(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setBurnEnabled(args: MethodArgs<'set_burn_enabled(bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setBurnEnabled(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setSwapEnabled(args: MethodArgs<'set_swap_enabled(bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setSwapEnabled(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOnline(args: MethodArgs<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOnline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOffline(args: MethodArgs<'register_offline()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOffline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setRatio(args: MethodArgs<'set_ratio()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setRatio(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mint(args: MethodArgs<'mint(pay,uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burn(args: MethodArgs<'burn(axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swapToArc200(args: MethodArgs<'swap_to_arc200(pay,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swapToArc200(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swapFromArc200(args: MethodArgs<'swap_from_arc200(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swapFromArc200(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AlgoArc200PoolComposer
  }
}
export type AlgoArc200PoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_pool_token(pay,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPoolToken(args: MethodArgs<'create_pool_token(pay,string,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'create_pool_token(pay,string,string)uint64'>]>

  /**
   * Calls the set_admin(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAdmin(args: MethodArgs<'set_admin(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'set_admin(address)void'>]>

  /**
   * Calls the set_governer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGoverner(args: MethodArgs<'set_governer(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'set_governer(address)void'>]>

  /**
   * Calls the set_fees(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFees(args: MethodArgs<'set_fees(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'set_fees(uint64)void'>]>

  /**
   * Calls the set_mint_enabled(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMintEnabled(args: MethodArgs<'set_mint_enabled(bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'set_mint_enabled(bool)void'>]>

  /**
   * Calls the set_burn_enabled(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBurnEnabled(args: MethodArgs<'set_burn_enabled(bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'set_burn_enabled(bool)void'>]>

  /**
   * Calls the set_swap_enabled(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSwapEnabled(args: MethodArgs<'set_swap_enabled(bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'set_swap_enabled(bool)void'>]>

  /**
   * Calls the register_online(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOnline(args: MethodArgs<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the register_offline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOffline(args: MethodArgs<'register_offline()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'register_offline()void'>]>

  /**
   * Calls the set_ratio()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRatio(args: MethodArgs<'set_ratio()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'set_ratio()void'>]>

  /**
   * Calls the mint(pay,uint64,asset)void ABI method.
   *
   * Add liquidity and mints lpt token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(args: MethodArgs<'mint(pay,uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'mint(pay,uint64,asset)void'>]>

  /**
   * Calls the burn(axfer)void ABI method.
   *
   * Withdraw liquidity
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burn(args: MethodArgs<'burn(axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'burn(axfer)void'>]>

  /**
   * Calls the swap_to_arc200(pay,uint64)uint64 ABI method.
   *
   * Swap from Algos to Arc200
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapToArc200(args: MethodArgs<'swap_to_arc200(pay,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'swap_to_arc200(pay,uint64)uint64'>]>

  /**
   * Calls the swap_from_arc200(uint64,uint64)uint64 ABI method.
   *
   * Swap tokens from Arc200 to Algos
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapFromArc200(args: MethodArgs<'swap_from_arc200(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'swap_from_arc200(uint64,uint64)uint64'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the AlgoArc200Pool smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams): AlgoArc200PoolComposer<[...TReturns, MethodReturn<'updateApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgoArc200Pool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AlgoArc200PoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoArc200PoolComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<AlgoArc200PoolComposerResults<TReturns>>
}
export type AlgoArc200PoolComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AlgoArc200PoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
