/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "mint(pay,uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_to_arc200(pay,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_from_arc200(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_pool_token(pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_online(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_offline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_fees(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_admin(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "emergency_withdraw()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "compute_swap_to_arc200(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "compute_swap_to_arc200_by_out_tokens(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "compute_swap_from_arc200(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "compute_swap_from_arc200_by_out_amount(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "admin": {
          "type": "bytes",
          "key": "admin"
        },
        "pool_token": {
          "type": "uint64",
          "key": "pool_token"
        },
        "ratio": {
          "type": "uint64",
          "key": "ratio"
        },
        "fee": {
          "type": "uint64",
          "key": "fee"
        },
        "arc200_token": {
          "type": "uint64",
          "key": "arc200_token"
        },
        "initialized": {
          "type": "bytes",
          "key": "initialized"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Arc200Swap",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "pay_txn",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "arc200_amount",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "pool_token",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "***********************************************",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "burn",
        "args": [
          {
            "name": "lpt_pay_txn",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "swap_to_arc200",
        "args": [
          {
            "name": "pay_txn",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "min_amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "***********************************************",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "swap_from_arc200",
        "args": [
          {
            "name": "arc200_amount",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "min_amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "create_pool_token",
        "args": [
          {
            "name": "seed",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "***********************************************",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "register_online",
        "args": [
          {
            "name": "selection_pk",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "state_proof_pk",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "vote_pk",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "vote_first",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "vote_last",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "vote_key_dilution",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "register_offline",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_fees",
        "args": [
          {
            "name": "fee",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_admin",
        "args": [
          {
            "name": "admin",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "emergency_withdraw",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "compute_swap_to_arc200",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "***********************************************",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "compute_swap_to_arc200_by_out_tokens",
        "args": [
          {
            "name": "arc200_amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "compute_swap_from_arc200",
        "args": [
          {
            "name": "arc200_amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "compute_swap_from_arc200_by_out_amount",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Arc200Swap smart contract.
 */
export type Arc200Swap = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'mint(pay,uint64,asset)void' | 'mint', {
      argsObj: {
        pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        arc200_amount: bigint | number
        pool_token: number | bigint
      }
      argsTuple: [pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, arc200_amount: bigint | number, pool_token: number | bigint]
      returns: void
    }>
    & Record<'burn(axfer)void' | 'burn', {
      argsObj: {
        lpt_pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [lpt_pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'swap_to_arc200(pay,uint64)uint64' | 'swap_to_arc200', {
      argsObj: {
        pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        min_amount: bigint | number
      }
      argsTuple: [pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, min_amount: bigint | number]
      returns: bigint
    }>
    & Record<'swap_from_arc200(uint64,uint64)uint64' | 'swap_from_arc200', {
      argsObj: {
        arc200_amount: bigint | number
        min_amount: bigint | number
      }
      argsTuple: [arc200_amount: bigint | number, min_amount: bigint | number]
      returns: bigint
    }>
    & Record<'create_pool_token(pay)uint64' | 'create_pool_token', {
      argsObj: {
        seed: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [seed: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: bigint
    }>
    & Record<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void' | 'register_online', {
      argsObj: {
        selection_pk: Uint8Array
        state_proof_pk: Uint8Array
        vote_pk: Uint8Array
        vote_first: bigint | number
        vote_last: bigint | number
        vote_key_dilution: bigint | number
      }
      argsTuple: [selection_pk: Uint8Array, state_proof_pk: Uint8Array, vote_pk: Uint8Array, vote_first: bigint | number, vote_last: bigint | number, vote_key_dilution: bigint | number]
      returns: void
    }>
    & Record<'register_offline()void' | 'register_offline', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'set_fees(uint64)void' | 'set_fees', {
      argsObj: {
        fee: bigint | number
      }
      argsTuple: [fee: bigint | number]
      returns: void
    }>
    & Record<'set_admin(account)void' | 'set_admin', {
      argsObj: {
        admin: string | Uint8Array
      }
      argsTuple: [admin: string | Uint8Array]
      returns: void
    }>
    & Record<'emergency_withdraw()void' | 'emergency_withdraw', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'compute_swap_to_arc200(uint64)uint64' | 'compute_swap_to_arc200', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'compute_swap_to_arc200_by_out_tokens(uint64)uint64' | 'compute_swap_to_arc200_by_out_tokens', {
      argsObj: {
        arc200_amount: bigint | number
      }
      argsTuple: [arc200_amount: bigint | number]
      returns: bigint
    }>
    & Record<'compute_swap_from_arc200(uint64)uint64' | 'compute_swap_from_arc200', {
      argsObj: {
        arc200_amount: bigint | number
      }
      argsTuple: [arc200_amount: bigint | number]
      returns: bigint
    }>
    & Record<'compute_swap_from_arc200_by_out_amount(uint64)uint64' | 'compute_swap_from_arc200_by_out_amount', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'admin'?: BinaryState
      'pool_token'?: IntegerState
      'ratio'?: IntegerState
      'fee'?: IntegerState
      'arc200_token'?: IntegerState
      'initialized'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type Arc200SwapSig = keyof Arc200Swap['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends Arc200SwapSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Arc200Swap smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends Arc200SwapSig> = Arc200Swap['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc200Swap smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc200SwapSig> = Arc200Swap['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type Arc200SwapCreateCalls = (typeof Arc200SwapCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type Arc200SwapCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type Arc200SwapUpdateCalls = (typeof Arc200SwapCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type Arc200SwapUpdateCallParams =
  | TypedCallParams<'updateApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc200SwapDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: Arc200SwapCreateCalls) => Arc200SwapCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: Arc200SwapUpdateCalls) => Arc200SwapUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class Arc200SwapCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Arc200Swap smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Arc200Swap smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mint(pay,uint64,asset)void ABI method
   *
   * ***********************************************
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mint(args: MethodArgs<'mint(pay,uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint(pay,uint64,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.pay_txn, args.arc200_amount, args.pool_token],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn(axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burn(args: MethodArgs<'burn(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.lpt_pay_txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swap_to_arc200(pay,uint64)uint64 ABI method
   *
   * ***********************************************
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swapToArc200(args: MethodArgs<'swap_to_arc200(pay,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swap_to_arc200(pay,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.pay_txn, args.min_amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swap_from_arc200(uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swapFromArc200(args: MethodArgs<'swap_from_arc200(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swap_from_arc200(uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc200_amount, args.min_amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_pool_token(pay)uint64 ABI method
   *
   * ***********************************************
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createPoolToken(args: MethodArgs<'create_pool_token(pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_pool_token(pay)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.seed],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register_online(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOnline(args: MethodArgs<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.selection_pk, args.state_proof_pk, args.vote_pk, args.vote_first, args.vote_last, args.vote_key_dilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register_offline()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOffline(args: MethodArgs<'register_offline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_offline()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_fees(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFees(args: MethodArgs<'set_fees(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_fees(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_admin(account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAdmin(args: MethodArgs<'set_admin(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_admin(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.admin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the emergency_withdraw()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static emergencyWithdraw(args: MethodArgs<'emergency_withdraw()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'emergency_withdraw()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the compute_swap_to_arc200(uint64)uint64 ABI method
   *
   * ***********************************************
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static computeSwapToArc200(args: MethodArgs<'compute_swap_to_arc200(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'compute_swap_to_arc200(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the compute_swap_to_arc200_by_out_tokens(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static computeSwapToArc200ByOutTokens(args: MethodArgs<'compute_swap_to_arc200_by_out_tokens(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'compute_swap_to_arc200_by_out_tokens(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc200_amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the compute_swap_from_arc200(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static computeSwapFromArc200(args: MethodArgs<'compute_swap_from_arc200(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'compute_swap_from_arc200(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc200_amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the compute_swap_from_arc200_by_out_amount(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static computeSwapFromArc200ByOutAmount(args: MethodArgs<'compute_swap_from_arc200_by_out_amount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'compute_swap_from_arc200_by_out_amount(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Arc200Swap smart contract
 */
export class Arc200SwapClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `Arc200SwapClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Arc200Swap['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Arc200Swap smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: Arc200SwapDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(Arc200SwapCallFactory.create)
    const updateArgs = params.updateCall?.(Arc200SwapCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Arc200Swap smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(Arc200SwapCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Arc200Swap smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'updateApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.update(Arc200SwapCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Arc200Swap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the mint(pay,uint64,asset)void ABI method.
   *
   * ***********************************************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mint(args: MethodArgs<'mint(pay,uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.mint(args, params))
  }

  /**
   * Calls the burn(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burn(args: MethodArgs<'burn(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.burn(args, params))
  }

  /**
   * Calls the swap_to_arc200(pay,uint64)uint64 ABI method.
   *
   * ***********************************************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public swapToArc200(args: MethodArgs<'swap_to_arc200(pay,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.swapToArc200(args, params))
  }

  /**
   * Calls the swap_from_arc200(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public swapFromArc200(args: MethodArgs<'swap_from_arc200(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.swapFromArc200(args, params))
  }

  /**
   * Calls the create_pool_token(pay)uint64 ABI method.
   *
   * ***********************************************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createPoolToken(args: MethodArgs<'create_pool_token(pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.createPoolToken(args, params))
  }

  /**
   * Calls the register_online(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOnline(args: MethodArgs<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.registerOnline(args, params))
  }

  /**
   * Calls the register_offline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOffline(args: MethodArgs<'register_offline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.registerOffline(args, params))
  }

  /**
   * Calls the set_fees(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFees(args: MethodArgs<'set_fees(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.setFees(args, params))
  }

  /**
   * Calls the set_admin(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAdmin(args: MethodArgs<'set_admin(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.setAdmin(args, params))
  }

  /**
   * Calls the emergency_withdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public emergencyWithdraw(args: MethodArgs<'emergency_withdraw()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.emergencyWithdraw(args, params))
  }

  /**
   * Calls the compute_swap_to_arc200(uint64)uint64 ABI method.
   *
   * ***********************************************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public computeSwapToArc200(args: MethodArgs<'compute_swap_to_arc200(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.computeSwapToArc200(args, params))
  }

  /**
   * Calls the compute_swap_to_arc200_by_out_tokens(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public computeSwapToArc200ByOutTokens(args: MethodArgs<'compute_swap_to_arc200_by_out_tokens(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.computeSwapToArc200ByOutTokens(args, params))
  }

  /**
   * Calls the compute_swap_from_arc200(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public computeSwapFromArc200(args: MethodArgs<'compute_swap_from_arc200(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.computeSwapFromArc200(args, params))
  }

  /**
   * Calls the compute_swap_from_arc200_by_out_amount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public computeSwapFromArc200ByOutAmount(args: MethodArgs<'compute_swap_from_arc200_by_out_amount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc200SwapCallFactory.computeSwapFromArc200ByOutAmount(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Arc200Swap['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admin() {
        return Arc200SwapClient.getBinaryState(state, 'admin')
      },
      get pool_token() {
        return Arc200SwapClient.getIntegerState(state, 'pool_token')
      },
      get ratio() {
        return Arc200SwapClient.getIntegerState(state, 'ratio')
      },
      get fee() {
        return Arc200SwapClient.getIntegerState(state, 'fee')
      },
      get arc200_token() {
        return Arc200SwapClient.getIntegerState(state, 'arc200_token')
      },
      get initialized() {
        return Arc200SwapClient.getBinaryState(state, 'initialized')
      },
    }
  }

  public compose(): Arc200SwapComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      mint(args: MethodArgs<'mint(pay,uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burn(args: MethodArgs<'burn(axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swapToArc200(args: MethodArgs<'swap_to_arc200(pay,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swapToArc200(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swapFromArc200(args: MethodArgs<'swap_from_arc200(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swapFromArc200(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createPoolToken(args: MethodArgs<'create_pool_token(pay)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createPoolToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOnline(args: MethodArgs<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOnline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOffline(args: MethodArgs<'register_offline()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOffline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFees(args: MethodArgs<'set_fees(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFees(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAdmin(args: MethodArgs<'set_admin(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      emergencyWithdraw(args: MethodArgs<'emergency_withdraw()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.emergencyWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      computeSwapToArc200(args: MethodArgs<'compute_swap_to_arc200(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.computeSwapToArc200(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      computeSwapToArc200ByOutTokens(args: MethodArgs<'compute_swap_to_arc200_by_out_tokens(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.computeSwapToArc200ByOutTokens(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      computeSwapFromArc200(args: MethodArgs<'compute_swap_from_arc200(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.computeSwapFromArc200(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      computeSwapFromArc200ByOutAmount(args: MethodArgs<'compute_swap_from_arc200_by_out_amount(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.computeSwapFromArc200ByOutAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as Arc200SwapComposer
  }
}
export type Arc200SwapComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mint(pay,uint64,asset)void ABI method.
   *
   * ***********************************************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(args: MethodArgs<'mint(pay,uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'mint(pay,uint64,asset)void'>]>

  /**
   * Calls the burn(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burn(args: MethodArgs<'burn(axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'burn(axfer)void'>]>

  /**
   * Calls the swap_to_arc200(pay,uint64)uint64 ABI method.
   *
   * ***********************************************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapToArc200(args: MethodArgs<'swap_to_arc200(pay,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'swap_to_arc200(pay,uint64)uint64'>]>

  /**
   * Calls the swap_from_arc200(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapFromArc200(args: MethodArgs<'swap_from_arc200(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'swap_from_arc200(uint64,uint64)uint64'>]>

  /**
   * Calls the create_pool_token(pay)uint64 ABI method.
   *
   * ***********************************************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPoolToken(args: MethodArgs<'create_pool_token(pay)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'create_pool_token(pay)uint64'>]>

  /**
   * Calls the register_online(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOnline(args: MethodArgs<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'register_online(byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the register_offline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOffline(args: MethodArgs<'register_offline()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'register_offline()void'>]>

  /**
   * Calls the set_fees(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFees(args: MethodArgs<'set_fees(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'set_fees(uint64)void'>]>

  /**
   * Calls the set_admin(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAdmin(args: MethodArgs<'set_admin(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'set_admin(account)void'>]>

  /**
   * Calls the emergency_withdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(args: MethodArgs<'emergency_withdraw()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'emergency_withdraw()void'>]>

  /**
   * Calls the compute_swap_to_arc200(uint64)uint64 ABI method.
   *
   * ***********************************************
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computeSwapToArc200(args: MethodArgs<'compute_swap_to_arc200(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'compute_swap_to_arc200(uint64)uint64'>]>

  /**
   * Calls the compute_swap_to_arc200_by_out_tokens(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computeSwapToArc200ByOutTokens(args: MethodArgs<'compute_swap_to_arc200_by_out_tokens(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'compute_swap_to_arc200_by_out_tokens(uint64)uint64'>]>

  /**
   * Calls the compute_swap_from_arc200(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computeSwapFromArc200(args: MethodArgs<'compute_swap_from_arc200(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'compute_swap_from_arc200(uint64)uint64'>]>

  /**
   * Calls the compute_swap_from_arc200_by_out_amount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computeSwapFromArc200ByOutAmount(args: MethodArgs<'compute_swap_from_arc200_by_out_amount(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, MethodReturn<'compute_swap_from_arc200_by_out_amount(uint64)uint64'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Arc200Swap smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams): Arc200SwapComposer<[...TReturns, MethodReturn<'updateApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Arc200Swap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): Arc200SwapComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): Arc200SwapComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc200SwapComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<Arc200SwapComposerResults<TReturns>>
}
export type Arc200SwapComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type Arc200SwapComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
