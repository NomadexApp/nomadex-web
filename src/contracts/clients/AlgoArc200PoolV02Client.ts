/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "setManager(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initialize(byte[32],byte[8],uint8,uint256,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_name()byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_symbol()byte[8]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_decimals()uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_totalSupply()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_balanceOf(address)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hasBalance(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hasAllowance(address,address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_allowance(address,address)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transfer(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_approve(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transferFrom(address,address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "poolInitialize(byte[32],byte[8],application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFeeController(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFees(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPlatformFees(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRatio()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(pay,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidity(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swapXtoY(pay,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swapYtoX(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "feeController": {
          "type": "bytes",
          "key": "fee_controller"
        },
        "ratio": {
          "type": "bytes",
          "key": "ratio"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNzQuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCBjYWxsX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9VcGRhdGVBcHBsaWNhdGlvbiBjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQKCk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gbWFuYWdlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAxIDAKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MTgKCS8vIHRoaXMubWFuYWdlci52YWx1ZSA9IG1hbmFnZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWZyYW1lX2RpZyAtMSAvLyBtYW5hZ2VyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIHVwZGF0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIHVwZGF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAp1cGRhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMgoJLy8gYXNzZXJ0KHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCXJldHN1YgoKYWJpX3JvdXRlX3NldE1hbmFnZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIG1hbmFnZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldE1hbmFnZXIoYWRkcmVzcylib29sCgljYWxsc3ViIHNldE1hbmFnZXIKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gc2V0TWFuYWdlcihhZGRyZXNzKWJvb2wKc2V0TWFuYWdlcjoKCXByb3RvIDEgMQoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNgoJLy8gYXNzZXJ0KHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjcKCS8vIHRoaXMubWFuYWdlci52YWx1ZSA9IG1hbmFnZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWZyYW1lX2RpZyAtMSAvLyBtYW5hZ2VyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyOAoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgovLyBhcmMyMDBJbml0aWFsaXplKGFkZHJlc3MsdWludDI1Nix1aW50OCxieXRlWzhdLGJ5dGVbMzJdKXZvaWQKYXJjMjAwSW5pdGlhbGl6ZToKCXByb3RvIDUgMAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czozOAoJLy8gdGhpcy5tZXRhZGF0YS52YWx1ZSA9IHsKCS8vICAgICAgICAgICAgIG5hbWU6IG5hbWUsCgkvLyAgICAgICAgICAgICBzeW1ib2w6IHN5bWJvbCwKCS8vICAgICAgICAgICAgIGRlY2ltYWxzOiBkZWNpbWFscwoJLy8gICAgICAgICB9CglieXRlIDB4NmQ2NTc0NjE2NDYxNzQ2MSAvLyAibWV0YWRhdGEiCglmcmFtZV9kaWcgLTEgLy8gbmFtZTogU3RhdGljQXJyYXk8Ynl0ZSwgMzI+CglmcmFtZV9kaWcgLTIgLy8gc3ltYm9sOiBTdGF0aWNBcnJheTxieXRlLCA4PgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gZGVjaW1hbHM6IHVpbnQ4CglpdG9iCglleHRyYWN0IDcgMQoJY29uY2F0Cglib3hfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjQzCgkvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gdG90YWxTdXBwbHkKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NTcwNzA2Yzc5IC8vICJ0b3RhbFN1cHBseSIKCWZyYW1lX2RpZyAtNCAvLyB0b3RhbFN1cHBseTogdWludDI1NgoJYm94X3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czo0NQoJLy8gdGhpcy5iYWxhbmNlcyhtaW50VG8pLnZhbHVlID0gdG90YWxTdXBwbHkKCWZyYW1lX2RpZyAtNSAvLyBtaW50VG86IEFkZHJlc3MKCWZyYW1lX2RpZyAtNCAvLyB0b3RhbFN1cHBseTogdWludDI1NgoJYm94X3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czo0NwoJLy8gdGhpcy5hcmMyMDBfVHJhbnNmZXIubG9nKHsKCS8vICAgICAgICAgICAgIGZyb206IGdsb2JhbHMuemVyb0FkZHJlc3MsCgkvLyAgICAgICAgICAgICB0bzogbWludFRvLAoJLy8gICAgICAgICAgICAgdmFsdWU6IHRvdGFsU3VwcGx5CgkvLyAgICAgICAgIH0pCglieXRlIDB4Nzk4M2MzNWMgLy8gYXJjMjAwX1RyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KQoJZ2xvYmFsIFplcm9BZGRyZXNzCglmcmFtZV9kaWcgLTUgLy8gbWludFRvOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtNCAvLyB0b3RhbFN1cHBseTogdWludDI1NgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfaW5pdGlhbGl6ZToKCS8vIG1pbnRUbzogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHRvdGFsU3VwcGx5OiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZGVjaW1hbHM6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyBzeW1ib2w6IGJ5dGVbOF0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgOAoJPT0KCWFzc2VydAoKCS8vIG5hbWU6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBpbml0aWFsaXplKGFkZHJlc3MsdWludDI1Nix1aW50OCxieXRlWzhdLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgaW5pdGlhbGl6ZQoJaW50IDEKCXJldHVybgoKLy8gaW5pdGlhbGl6ZShhZGRyZXNzLHVpbnQyNTYsdWludDgsYnl0ZVs4XSxieXRlWzMyXSl2b2lkCi8vCi8vIEluaXRpYWxpemUgQVJDMjAwCi8vIEBwYXJhbSBuYW1lIHRva2VuIG5hbWUKLy8gQHBhcmFtIHN5bWJvbCB0b2tlbiBzeW1ib2wKLy8gQHBhcmFtIGRlY2ltYWxzIG51bWJlciBvZiBkZWNpbWFscwovLyBAcGFyYW0gdG90YWxTdXBwbHkgdG90YWwgc3VwcGx5IG9mIHRva2VucwovLyBAcGFyYW0gbWludFRvIGluaXRpYWwgbWludCB0bwppbml0aWFsaXplOgoJcHJvdG8gNSAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjY5CgkvLyBhc3NlcnQodGhpcy5hcHAuY3JlYXRvciA9PT0gdGhpcy50eG4uc2VuZGVyIHx8IHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJYXNzZXJ0Cgl0eG4gU2VuZGVyCgk9PQoJZHVwCglibnogc2tpcF9vcjAKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCgk9PQoJfHwKCnNraXBfb3IwOgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjcwCgkvLyBhc3NlcnQoIXRoaXMudG90YWxTdXBwbHkuZXhpc3RzKQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6NzIKCS8vIHRoaXMuYXJjMjAwSW5pdGlhbGl6ZShuYW1lLCBzeW1ib2wsIGRlY2ltYWxzLCB0b3RhbFN1cHBseSwgbWludFRvKQoJZnJhbWVfZGlnIC01IC8vIG1pbnRUbzogQWRkcmVzcwoJZnJhbWVfZGlnIC00IC8vIHRvdGFsU3VwcGx5OiB1aW50MjU2CglmcmFtZV9kaWcgLTMgLy8gZGVjaW1hbHM6IHVpbnQ4CglmcmFtZV9kaWcgLTIgLy8gc3ltYm9sOiBTdGF0aWNBcnJheTxieXRlLCA4PgoJZnJhbWVfZGlnIC0xIC8vIG5hbWU6IFN0YXRpY0FycmF5PGJ5dGUsIDMyPgoJY2FsbHN1YiBhcmMyMDBJbml0aWFsaXplCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmMyMDBfbmFtZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBhcmMyMDBfbmFtZSgpYnl0ZVszMl0KCWNhbGxzdWIgYXJjMjAwX25hbWUKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfbmFtZSgpYnl0ZVszMl0KLy8KLy8gVGhlIG5hbWUgb2YgdGhlIHRva2VuCi8vIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSB0b2tlbgphcmMyMDBfbmFtZToKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czo4MQoJLy8gcmV0dXJuIHRoaXMubWV0YWRhdGEudmFsdWUubmFtZTsKCWJ5dGUgMHg2ZDY1NzQ2MTY0NjE3NDYxIC8vICJtZXRhZGF0YSIKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDMyCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmMyMDBfc3ltYm9sOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGFyYzIwMF9zeW1ib2woKWJ5dGVbOF0KCWNhbGxzdWIgYXJjMjAwX3N5bWJvbAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF9zeW1ib2woKWJ5dGVbOF0KLy8KLy8gUmV0dXJucyB0aGUgc3ltYm9sIG9mIHRoZSB0b2tlbgovLyBAcmV0dXJucyBUaGUgc3ltYm9sIG9mIHRoZSB0b2tlbgphcmMyMDBfc3ltYm9sOgoJcHJvdG8gMCAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjkwCgkvLyByZXR1cm4gdGhpcy5tZXRhZGF0YS52YWx1ZS5zeW1ib2w7CglieXRlIDB4NmQ2NTc0NjE2NDYxNzQ2MSAvLyAibWV0YWRhdGEiCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMzIgOAoJcmV0c3ViCgphYmlfcm91dGVfYXJjMjAwX2RlY2ltYWxzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGFyYzIwMF9kZWNpbWFscygpdWludDgKCWNhbGxzdWIgYXJjMjAwX2RlY2ltYWxzCglpdG9iCglkdXAKCWJpdGxlbgoJaW50IDgKCTw9Cglhc3NlcnQKCWV4dHJhY3QgNyAxCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gYXJjMjAwX2RlY2ltYWxzKCl1aW50OAovLwovLyBSZXR1cm5zIHRoZSBkZWNpbWFscyBvZiB0aGUgdG9rZW4KLy8gQHJldHVybnMgVGhlIGRlY2ltYWxzIG9mIHRoZSB0b2tlbgphcmMyMDBfZGVjaW1hbHM6Cglwcm90byAwIDEKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6OTkKCS8vIHJldHVybiB0aGlzLm1ldGFkYXRhLnZhbHVlLmRlY2ltYWxzOwoJYnl0ZSAweDZkNjU3NDYxNjQ2MTc0NjEgLy8gIm1ldGFkYXRhIgoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDQwIDEKCWJ0b2kKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzIwMF90b3RhbFN1cHBseToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBhcmMyMDBfdG90YWxTdXBwbHkoKXVpbnQyNTYKCWNhbGxzdWIgYXJjMjAwX3RvdGFsU3VwcGx5CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfdG90YWxTdXBwbHkoKXVpbnQyNTYKLy8KLy8gUmV0dXJucyB0aGUgdG90YWwgc3VwcGx5IG9mIHRoZSB0b2tlbgovLyBAcmV0dXJucyBUaGUgdG90YWwgc3VwcGx5IG9mIHRoZSB0b2tlbgphcmMyMDBfdG90YWxTdXBwbHk6Cglwcm90byAwIDEKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MTA4CgkvLyByZXR1cm4gdGhpcy50b3RhbFN1cHBseS52YWx1ZSAtIHRoaXMuYXJjMjAwX2JhbGFuY2VPZihnbG9iYWxzLnplcm9BZGRyZXNzKSAtIHRoaXMuYXJjMjAwX2JhbGFuY2VPZih0aGlzLmFwcC5hZGRyZXNzKTsKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NTcwNzA2Yzc5IC8vICJ0b3RhbFN1cHBseSIKCWJveF9nZXQKCWFzc2VydAoJZ2xvYmFsIFplcm9BZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWItCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJY2FsbHN1YiBhcmMyMDBfYmFsYW5jZU9mCgliLQoJcmV0c3ViCgphYmlfcm91dGVfYXJjMjAwX2JhbGFuY2VPZjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gb3duZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2CgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2Ci8vCi8vIFJldHVybnMgdGhlIGN1cnJlbnQgYmFsYW5jZSBvZiB0aGUgb3duZXIgb2YgdGhlIHRva2VuCi8vIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgb3duZXIgb2YgdGhlIHRva2VuCi8vIEByZXR1cm5zIFRoZSBjdXJyZW50IGJhbGFuY2Ugb2YgdGhlIGhvbGRlciBvZiB0aGUgdG9rZW4KYXJjMjAwX2JhbGFuY2VPZjoKCXByb3RvIDEgMQoKCS8vIGlmMF9jb25kaXRpb24KCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxMTgKCS8vIHRoaXMuYmFsYW5jZXMob3duZXIpLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmMF9lbHNlCgoJLy8gaWYwX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxMTkKCS8vIHJldHVybiB0aGlzLmJhbGFuY2VzKG93bmVyKS52YWx1ZTsKCWZyYW1lX2RpZyAtMSAvLyBvd25lcjogQWRkcmVzcwoJYm94X2dldAoJYXNzZXJ0CglyZXRzdWIKCWIgaWYwX2VuZAoKaWYwX2Vsc2U6CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MTIxCgkvLyByZXR1cm4gPHVpbnQyNTY+MDsKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCglyZXRzdWIKCmlmMF9lbmQ6CglyZXRzdWIKCmFiaV9yb3V0ZV9oYXNCYWxhbmNlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgaGFzQmFsYW5jZShhZGRyZXNzKWJvb2wKCWNhbGxzdWIgaGFzQmFsYW5jZQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBoYXNCYWxhbmNlKGFkZHJlc3MpYm9vbAovLwovLyBDaGVjayBpZiBiYWxhbmNlIGJveCBleGlzdHMKLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lcgovLyBAcmV0dXJucyBgdHJ1ZWAgaWYgYmFsYW5jZSBib3ggZXhpc3RzCmhhc0JhbGFuY2U6Cglwcm90byAxIDEKCgkvLyBpZjFfY29uZGl0aW9uCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MTMyCgkvLyB0aGlzLmJhbGFuY2VzKG93bmVyKS5leGlzdHMKCWZyYW1lX2RpZyAtMSAvLyBvd25lcjogQWRkcmVzcwoJYm94X2xlbgoJc3dhcAoJcG9wCglieiBpZjFfZW5kCgoJLy8gaWYxX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxMzMKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCXJldHN1YgoKaWYxX2VuZDoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxMzUKCS8vIHJldHVybiBmYWxzZTsKCWludCAwCglyZXRzdWIKCmFiaV9yb3V0ZV9oYXNBbGxvd2FuY2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHNwZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgaGFzQWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcylib29sCgljYWxsc3ViIGhhc0FsbG93YW5jZQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBoYXNBbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKWJvb2wKLy8KLy8gQ2hlY2sgaWYgYWxsb3dhbmNlIGJveCBleGlzdHMKLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lcgovLyBAcGFyYW0gc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgc3BlbmRlcgovLyBAcmV0dXJucyBgdHJ1ZWAgaWYgYWxsb3dhbmNlIGJveCBleGlzdHMKaGFzQWxsb3dhbmNlOgoJcHJvdG8gMiAxCgoJLy8gaWYyX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE0NgoJLy8gdGhpcy5hbGxvd2FuY2VzKFtvd25lciwgc3BlbmRlcl0pLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gc3BlbmRlcjogQWRkcmVzcwoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmMl9lbmQKCgkvLyBpZjJfY29uc2VxdWVudAoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE0NwoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgppZjJfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE0OQoJLy8gcmV0dXJuIGZhbHNlOwoJaW50IDAKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzIwMF9hbGxvd2FuY2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHNwZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYXJjMjAwX2FsbG93YW5jZShhZGRyZXNzLGFkZHJlc3MpdWludDI1NgoJY2FsbHN1YiBhcmMyMDBfYWxsb3dhbmNlCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcyl1aW50MjU2Ci8vCi8vIFJldHVybnMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIG9mIHRoZSBzcGVuZGVyIG9mIHRoZSB0b2tlbnMgb2YgdGhlIG93bmVyCi8vIEBwYXJhbSBvd25lcgovLyBAcGFyYW0gc3BlbmRlcgovLyBAcmV0dXJucyBUaGUgcmVtYWluaW5nIGFsbG93YW5jZQphcmMyMDBfYWxsb3dhbmNlOgoJcHJvdG8gMiAxCgoJLy8gaWYzX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE2MAoJLy8gdGhpcy5hbGxvd2FuY2VzKFtvd25lciwgc3BlbmRlcl0pLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gc3BlbmRlcjogQWRkcmVzcwoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmM19lbHNlCgoJLy8gaWYzX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxNjEKCS8vIHJldHVybiB0aGlzLmFsbG93YW5jZXMoW293bmVyLCBzcGVuZGVyXSkudmFsdWU7CglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJcmV0c3ViCgliIGlmM19lbmQKCmlmM19lbHNlOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE2MwoJLy8gcmV0dXJuIDx1aW50MjU2PjA7CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJcmV0c3ViCgppZjNfZW5kOgoJcmV0c3ViCgphYmlfcm91dGVfYXJjMjAwX3RyYW5zZmVyOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyB2YWx1ZTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHRvOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfdHJhbnNmZXIodWludDI1NixhZGRyZXNzKWJvb2wKCWNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF90cmFuc2Zlcih1aW50MjU2LGFkZHJlc3MpYm9vbAovLwovLyBUcmFuc2ZlcnMgdG9rZW5zCi8vIEBwYXJhbSB0byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyCi8vIEBwYXJhbSB2YWx1ZSBBbW91bnQgb2YgdG9rZW5zIHRvIHRyYW5zZmVyCi8vIEByZXR1cm5zIFN1Y2Nlc3MKYXJjMjAwX3RyYW5zZmVyOgoJcHJvdG8gMiAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE5OAoJLy8gcmV0dXJuIHRoaXMudHJhbnNmZXIodGhpcy50eG4uc2VuZGVyLCB0bywgdmFsdWUpOwoJZnJhbWVfZGlnIC0yIC8vIHZhbHVlOiB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gdG86IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNhbGxzdWIgdHJhbnNmZXIKCXJldHN1YgoKLy8gdHJhbnNmZXIodWludDI1NixhZGRyZXNzLGFkZHJlc3MpYm9vbAp0cmFuc2ZlcjoKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDMKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjAyCgkvLyBzZW5kZXJCYWxhbmNlID0gdGhpcy5hcmMyMDBfYmFsYW5jZU9mKGZyb20pCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJY2FsbHN1YiBhcmMyMDBfYmFsYW5jZU9mCglmcmFtZV9idXJ5IDAgLy8gc2VuZGVyQmFsYW5jZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjAzCgkvLyBhc3NlcnQoc2VuZGVyQmFsYW5jZSA+PSB2YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIHNlbmRlckJhbGFuY2U6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWI+PQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIwNQoJLy8gc2VuZGVyQmFsYW5jZUFmdGVyID0gPHVpbnQyNTY+KHNlbmRlckJhbGFuY2UgLSB2YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIHNlbmRlckJhbGFuY2U6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWItCglmcmFtZV9idXJ5IDEgLy8gc2VuZGVyQmFsYW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoKCS8vIGlmNF9jb25kaXRpb24KCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMDYKCS8vIHNlbmRlckJhbGFuY2VBZnRlciA+IDx1aW50MjU2PjAKCWZyYW1lX2RpZyAxIC8vIHNlbmRlckJhbGFuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYnogaWY0X2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gaWY0X2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMDcKCS8vIHRoaXMuYmFsYW5jZXMoZnJvbSkudmFsdWUgPSBzZW5kZXJCYWxhbmNlQWZ0ZXIKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9kaWcgMSAvLyBzZW5kZXJCYWxhbmNlQWZ0ZXI6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWJveF9wdXQKCWIgaWY0X2VuZAoKaWY0X2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIwOAoJLy8gdGhpcy5iYWxhbmNlcyhmcm9tKS5leGlzdHMKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmNF9lbmQKCgkvLyBpZjRfZWxzZWlmMV9jb25zZXF1ZW50CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjEwCgkvLyB0aGlzLmJhbGFuY2VzKGZyb20pLmRlbGV0ZSgpCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJYm94X2RlbAoKaWY0X2VuZDoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMTMKCS8vIHJlY2VpdmVyQmFsYW5jZUFmdGVyID0gPHVpbnQyNTY+KHRoaXMuYXJjMjAwX2JhbGFuY2VPZih0bykgKyB2YWx1ZSkKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJY2FsbHN1YiBhcmMyMDBfYmFsYW5jZU9mCglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWIrCglmcmFtZV9idXJ5IDIgLy8gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXI6IHVuc2FmZSB1aW50MjU2CgoJLy8gaWY1X2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIxNAoJLy8gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXIgPiA8dWludDI1Nj4wCglmcmFtZV9kaWcgMiAvLyByZWNlaXZlckJhbGFuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYnogaWY1X2VuZAoKCS8vIGlmNV9jb25zZXF1ZW50CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjE1CgkvLyB0aGlzLmJhbGFuY2VzKHRvKS52YWx1ZSA9IHJlY2VpdmVyQmFsYW5jZUFmdGVyCglmcmFtZV9kaWcgLTIgLy8gdG86IEFkZHJlc3MKCWZyYW1lX2RpZyAyIC8vIHJlY2VpdmVyQmFsYW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglib3hfcHV0CgppZjVfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIxOAoJLy8gdGhpcy5hcmMyMDBfVHJhbnNmZXIubG9nKHsKCS8vICAgICAgICAgICAgIGZyb206IGZyb20sCgkvLyAgICAgICAgICAgICB0bzogdG8sCgkvLyAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKCS8vICAgICAgICAgfSkKCWJ5dGUgMHg3OTgzYzM1YyAvLyBhcmMyMDBfVHJhbnNmZXIoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMjQKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmMyMDBfYXBwcm92ZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gdmFsdWU6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBzcGVuZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfYXBwcm92ZSh1aW50MjU2LGFkZHJlc3MpYm9vbAoJY2FsbHN1YiBhcmMyMDBfYXBwcm92ZQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfYXBwcm92ZSh1aW50MjU2LGFkZHJlc3MpYm9vbAovLwovLyBBcHByb3ZlIHNwZW5kZXIgZm9yIGEgdG9rZW4KLy8gQHBhcmFtIHNwZW5kZXIKLy8gQHBhcmFtIHZhbHVlCi8vIEByZXR1cm5zIFN1Y2Nlc3MKYXJjMjAwX2FwcHJvdmU6Cglwcm90byAyIDEKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjM0CgkvLyByZXR1cm4gdGhpcy5hcHByb3ZlKHRoaXMudHhuLnNlbmRlciwgc3BlbmRlciwgdmFsdWUpOwoJZnJhbWVfZGlnIC0yIC8vIHZhbHVlOiB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gc3BlbmRlcjogQWRkcmVzcwoJdHhuIFNlbmRlcgoJY2FsbHN1YiBhcHByb3ZlCglyZXRzdWIKCi8vIGFwcHJvdmUodWludDI1NixhZGRyZXNzLGFkZHJlc3MpYm9vbAphcHByb3ZlOgoJcHJvdG8gMyAxCgoJLy8gaWY2X2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIzOAoJLy8gdmFsdWUgPiA8dWludDI1Nj4wCglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYnogaWY2X2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gaWY2X2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMzkKCS8vIHRoaXMuYWxsb3dhbmNlcyhbb3duZXIsIHNwZW5kZXJdKS52YWx1ZSA9IHZhbHVlCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYm94X3B1dAoJYiBpZjZfZW5kCgppZjZfZWxzZWlmMV9jb25kaXRpb246CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjQwCgkvLyB0aGlzLmFsbG93YW5jZXMoW293bmVyLCBzcGVuZGVyXSkuZXhpc3RzCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogaWY2X2VuZAoKCS8vIGlmNl9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNDEKCS8vIHRoaXMuYWxsb3dhbmNlcyhbb3duZXIsIHNwZW5kZXJdKS5kZWxldGUoKQoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gc3BlbmRlcjogQWRkcmVzcwoJY29uY2F0Cglib3hfZGVsCgppZjZfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI0NAoJLy8gdGhpcy5hcmMyMDBfQXBwcm92YWwubG9nKHsKCS8vICAgICAgICAgICAgIG93bmVyOiBvd25lciwKCS8vICAgICAgICAgICAgIHNwZW5kZXI6IHNwZW5kZXIsCgkvLyAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKCS8vICAgICAgICAgfSkKCWJ5dGUgMHgxOTY5Zjg2NSAvLyBhcmMyMDBfQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNTAKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzIwMF90cmFuc2ZlckZyb206CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHZhbHVlOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gdG86IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBmcm9tOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfdHJhbnNmZXJGcm9tKHVpbnQyNTYsYWRkcmVzcyxhZGRyZXNzKWJvb2wKCWNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyRnJvbQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfdHJhbnNmZXJGcm9tKHVpbnQyNTYsYWRkcmVzcyxhZGRyZXNzKWJvb2wKLy8KLy8gVHJhbnNmZXJzIHRva2VucyBmcm9tIHNvdXJjZSB0byBkZXN0aW5hdGlvbiBhcyBhcHByb3ZlZCBzcGVuZGVyCi8vIEBwYXJhbSBmcm9tIFRoZSBzb3VyY2UgIG9mIHRoZSB0cmFuc2ZlcgovLyBAcGFyYW0gdG8gVGhlIGRlc3RpbmF0aW9uIG9mIHRoZSB0cmFuc2ZlcgovLyBAcGFyYW0gdmFsdWUgQW1vdW50IG9mIHRva2VucyB0byB0cmFuc2ZlcgovLyBAcmV0dXJucyBTdWNjZXNzCmFyYzIwMF90cmFuc2ZlckZyb206Cglwcm90byAzIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiA1CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI2MQoJLy8gYWxsb3dhbmNlID0gdGhpcy5hcmMyMDBfYWxsb3dhbmNlKGZyb20sIHRoaXMudHhuLnNlbmRlcikKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9hbGxvd2FuY2UKCWZyYW1lX2J1cnkgMCAvLyBhbGxvd2FuY2U6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI2MgoJLy8gYXNzZXJ0KGFsbG93YW5jZSA+PSB2YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIGFsbG93YW5jZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYj49Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjY0CgkvLyBvd25lckJhbGFuY2UgPSB0aGlzLmFyYzIwMF9iYWxhbmNlT2YoZnJvbSkKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWZyYW1lX2J1cnkgMSAvLyBvd25lckJhbGFuY2U6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI2NQoJLy8gYXNzZXJ0KG93bmVyQmFsYW5jZSA+PSB2YWx1ZSkKCWZyYW1lX2RpZyAxIC8vIG93bmVyQmFsYW5jZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYj49Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjY3CgkvLyBhbGxvd2FuY2VBZnRlciA9IDx1aW50MjU2PihhbGxvd2FuY2UgLSB2YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIGFsbG93YW5jZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYi0KCWZyYW1lX2J1cnkgMiAvLyBhbGxvd2FuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCgkvLyBpZjdfY29uZGl0aW9uCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjY4CgkvLyBhbGxvd2FuY2VBZnRlciA+IDx1aW50MjU2PjAKCWZyYW1lX2RpZyAyIC8vIGFsbG93YW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+CglieiBpZjdfZWxzZWlmMV9jb25kaXRpb24KCgkvLyBpZjdfY29uc2VxdWVudAoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI2OQoJLy8gdGhpcy5hbGxvd2FuY2VzKFtmcm9tLCB0aGlzLnR4bi5zZW5kZXJdKS52YWx1ZSA9IGFsbG93YW5jZUFmdGVyCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9kaWcgMiAvLyBhbGxvd2FuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYm94X3B1dAoJYiBpZjdfZW5kCgppZjdfZWxzZWlmMV9jb25kaXRpb246CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjcwCgkvLyB0aGlzLmFsbG93YW5jZXMoW2Zyb20sIHRoaXMudHhuLnNlbmRlcl0pLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2xlbgoJc3dhcAoJcG9wCglieiBpZjdfZW5kCgoJLy8gaWY3X2Vsc2VpZjFfY29uc2VxdWVudAoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI3MgoJLy8gdGhpcy5hbGxvd2FuY2VzKFtmcm9tLCB0aGlzLnR4bi5zZW5kZXJdKS5kZWxldGUoKQoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2RlbAoKaWY3X2VuZDoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNzUKCS8vIG93bmVyQmFsYW5jZUFmdGVyID0gPHVpbnQyNTY+KG93bmVyQmFsYW5jZSAtIHZhbHVlKQoJZnJhbWVfZGlnIDEgLy8gb3duZXJCYWxhbmNlOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIC0zIC8vIHZhbHVlOiB1aW50MjU2CgliLQoJZnJhbWVfYnVyeSAzIC8vIG93bmVyQmFsYW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoKCS8vIGlmOF9jb25kaXRpb24KCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNzYKCS8vIG93bmVyQmFsYW5jZUFmdGVyID4gPHVpbnQyNTY+MAoJZnJhbWVfZGlnIDMgLy8gb3duZXJCYWxhbmNlQWZ0ZXI6IHVuc2FmZSB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj4KCWJ6IGlmOF9lbHNlaWYxX2NvbmRpdGlvbgoKCS8vIGlmOF9jb25zZXF1ZW50CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6Mjc3CgkvLyB0aGlzLmJhbGFuY2VzKGZyb20pLnZhbHVlID0gb3duZXJCYWxhbmNlQWZ0ZXIKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9kaWcgMyAvLyBvd25lckJhbGFuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYm94X3B1dAoJYiBpZjhfZW5kCgppZjhfZWxzZWlmMV9jb25kaXRpb246CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6Mjc4CgkvLyB0aGlzLmJhbGFuY2VzKGZyb20pLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogaWY4X2VuZAoKCS8vIGlmOF9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyODAKCS8vIHRoaXMuYmFsYW5jZXMoZnJvbSkuZGVsZXRlKCkKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglib3hfZGVsCgppZjhfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI4MwoJLy8gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXIgPSA8dWludDI1Nj4odGhpcy5hcmMyMDBfYmFsYW5jZU9mKHRvKSArIHZhbHVlKQoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYisKCWZyYW1lX2J1cnkgNCAvLyByZWNlaXZlckJhbGFuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCgkvLyBpZjlfY29uZGl0aW9uCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6Mjg0CgkvLyByZWNlaXZlckJhbGFuY2VBZnRlciA+IDx1aW50MjU2PjAKCWZyYW1lX2RpZyA0IC8vIHJlY2VpdmVyQmFsYW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+CglieiBpZjlfZW5kCgoJLy8gaWY5X2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyODUKCS8vIHRoaXMuYmFsYW5jZXModG8pLnZhbHVlID0gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXIKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJZnJhbWVfZGlnIDQgLy8gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXI6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWJveF9wdXQKCmlmOV9lbmQ6CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6Mjg4CgkvLyB0aGlzLmFyYzIwMF9UcmFuc2Zlci5sb2coewoJLy8gICAgICAgICAgICAgZnJvbTogZnJvbSwKCS8vICAgICAgICAgICAgIHRvOiB0bywKCS8vICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQoJLy8gICAgICAgICB9KQoJYnl0ZSAweDc5ODNjMzVjIC8vIGFyYzIwMF9UcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NikKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gdG86IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIHZhbHVlOiB1aW50MjU2Cgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI5NAoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDQKCXJldHN1YgoKYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBkZWxldGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKXZvaWQKLy8KLy8gRGVsZXRlIHRoZSBhcHAgaWYgYmFsYW5jZSB0b3RhbCBzdXBwbHkgaGFzIGJlZW4gYnVybmVkCmRlbGV0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjMwMQoJLy8gYXNzZXJ0KHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzAyCgkvLyBhc3NlcnQodGhpcy5hcmMyMDBfYmFsYW5jZU9mKGdsb2JhbHMuemVyb0FkZHJlc3MpID09PSB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlKQoJZ2xvYmFsIFplcm9BZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NTcwNzA2Yzc5IC8vICJ0b3RhbFN1cHBseSIKCWJveF9nZXQKCWFzc2VydAoJYj09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzAzCgkvLyB0aGlzLmJhbGFuY2VzKGdsb2JhbHMuemVyb0FkZHJlc3MpLmRlbGV0ZSgpCglnbG9iYWwgWmVyb0FkZHJlc3MKCWJveF9kZWwKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzA0CgkvLyB0aGlzLm1ldGFkYXRhLmRlbGV0ZSgpCglieXRlIDB4NmQ2NTc0NjE2NDYxNzQ2MSAvLyAibWV0YWRhdGEiCglib3hfZGVsCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjMwNQoJLy8gdGhpcy50b3RhbFN1cHBseS5kZWxldGUoKQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYm94X2RlbAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czozMDYKCS8vIHRoaXMubWFuYWdlci5kZWxldGUoKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9kZWwKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzA3CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiAwLAoJLy8gICAgICAgICAgICAgY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czozMDgKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjMwOQoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czozMTAKCS8vIGFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjMxMQoJLy8gY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzEyCgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzE0CgkvLyBhc3NlcnQodGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlID09PSAwKQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQoJYXNzZXJ0CglpbnQgMAoJPT0KCWFzc2VydAoJcmV0c3ViCgphYmlfcm91dGVfcG9vbEluaXRpYWxpemU6CgkvLyB0b2tlbllBcHBJZDogYXBwbGljYXRpb24KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCXR4bmFzIEFwcGxpY2F0aW9ucwoKCS8vIHN5bWJvbDogYnl0ZVs4XQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCA4Cgk9PQoJYXNzZXJ0CgoJLy8gbmFtZTogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHBvb2xJbml0aWFsaXplKGFwcGxpY2F0aW9uLGJ5dGVbOF0sYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBwb29sSW5pdGlhbGl6ZQoJaW50IDEKCXJldHVybgoKLy8gcG9vbEluaXRpYWxpemUoYXBwbGljYXRpb24sYnl0ZVs4XSxieXRlWzMyXSl2b2lkCi8vCi8vIEluaXRpYWxpemUgdGhlIHBvb2wKLy8gQHBhcmFtIG5hbWUgbmFtZSBvZiB0aGUgbHAgdG9rZW4KLy8gQHBhcmFtIHN5bWJvbCBzeW1ib2wgb2YgdGhlIGxwIHRva2VuCi8vIEBwYXJhbSB0b2tlbllBcHBJZCBhcHBpZCAob3IgaWQpIG9mIHRoZSB5LXRva2VuCnBvb2xJbml0aWFsaXplOgoJcHJvdG8gMyAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjY5CgkvLyBhc3NlcnQodGhpcy5hcHAuY3JlYXRvciA9PT0gdGhpcy50eG4uc2VuZGVyIHx8IHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJYXNzZXJ0Cgl0eG4gU2VuZGVyCgk9PQoJZHVwCglibnogc2tpcF9vcjEKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCgk9PQoJfHwKCnNraXBfb3IxOgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjcwCgkvLyBhc3NlcnQoIXRoaXMudG90YWxTdXBwbHkuZXhpc3RzKQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NzIKCS8vIHRoaXMuYXJjMjAwSW5pdGlhbGl6ZSgKCS8vICAgICAgICAgICAgIG5hbWUsCgkvLyAgICAgICAgICAgICBzeW1ib2wsCgkvLyAgICAgICAgICAgICA8dWludDg+REVDSU1BTFMsCgkvLyAgICAgICAgICAgICAoPHVpbnQyNTY+U0NBTEUgKiA8dWludDI1Nj4oMTAgKiogREVDSU1BTFMpKSwKCS8vICAgICAgICAgICAgIHRoaXMuYXBwLmFkZHJlc3MKCS8vICAgICAgICAgKQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCglpbnQgMTAKCWludCA2CglleHAKCWl0b2IKCWIqCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDA2CglkdXAKCWJpdGxlbgoJaW50IDgKCTw9Cglhc3NlcnQKCWV4dHJhY3QgNyAxCglidG9pCglmcmFtZV9kaWcgLTIgLy8gc3ltYm9sOiBTdGF0aWNBcnJheTxieXRlLCA4PgoJZnJhbWVfZGlnIC0xIC8vIG5hbWU6IFN0YXRpY0FycmF5PGJ5dGUsIDMyPgoJY2FsbHN1YiBhcmMyMDBJbml0aWFsaXplCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjgwCgkvLyB0aGlzLmZlZUNvbnRyb2xsZXIudmFsdWUgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGUgMHg2NjY1NjU1ZjYzNmY2ZTc0NzI2ZjZjNmM2NTcyIC8vICJmZWVfY29udHJvbGxlciIKCXR4biBTZW5kZXIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjgxCgkvLyB0aGlzLnJhdGlvLnZhbHVlID0gPHVpbnQyNTY+U0NBTEUKCWJ5dGUgMHg3MjYxNzQ2OTZmIC8vICJyYXRpbyIKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjgyCgkvLyB0aGlzLmZlZS52YWx1ZSA9IHsKCS8vICAgICAgICAgICAgIHN3YXBGZWU6IDx1aW50MjU2PklOSVRJQUxfRkVFLAoJLy8gICAgICAgICAgICAgcGxhdGZvcm1GZWU6IDx1aW50MjU2PklOSVRJQUxfTUFOQUdFUl9GRUUKCS8vICAgICAgICAgfQoJYnl0ZSAweDY2NjU2NSAvLyAiZmVlIgoJYnl0ZSAweDAwMDAwMGU4ZDRhNTEwMDAKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYnl0ZSAweDAwMDAyZDc5ODgzZDIwMDAKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cglib3hfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjg2CgkvLyB0aGlzLnRva2VuWUFwcElkLnZhbHVlID0gdG9rZW5ZQXBwSWQKCWJ5dGUgMHg3NDZmNmI2NTZlNWY3OTVmNjE3MDcwNWY2OTY0IC8vICJ0b2tlbl95X2FwcF9pZCIKCWZyYW1lX2RpZyAtMyAvLyB0b2tlbllBcHBJZDogQXBwbGljYXRpb24KCWl0b2IKCWJveF9wdXQKCXJldHN1YgoKYWJpX3JvdXRlX3NldEZlZUNvbnRyb2xsZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGZlZUNvbnRyb2xsZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldEZlZUNvbnRyb2xsZXIoYWRkcmVzcylib29sCgljYWxsc3ViIHNldEZlZUNvbnRyb2xsZXIKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gc2V0RmVlQ29udHJvbGxlcihhZGRyZXNzKWJvb2wKLy8KLy8gVXBkYXRlIGZlZS1jb250cm9sbGVyIGFkZHJlc3MKLy8gQHBhcmFtIGZlZUNvbnRyb2xsZXIgbmV3IGZlZS1jb250cm9sbGVyIGFkZHJlc3MKLy8gQHJldHVybnMgYHRydWVgIGlmIHN1Y2Nlc3MKc2V0RmVlQ29udHJvbGxlcjoKCXByb3RvIDEgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo5NQoJLy8gYXNzZXJ0KHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyIHx8IHRoaXMuZmVlQ29udHJvbGxlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09CglkdXAKCWJueiBza2lwX29yMgoJYnl0ZSAweDY2NjU2NTVmNjM2ZjZlNzQ3MjZmNmM2YzY1NzIgLy8gImZlZV9jb250cm9sbGVyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09Cgl8fAoKc2tpcF9vcjI6Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6OTYKCS8vIHRoaXMuZmVlQ29udHJvbGxlci52YWx1ZSA9IGZlZUNvbnRyb2xsZXIKCWJ5dGUgMHg2NjY1NjU1ZjYzNmY2ZTc0NzI2ZjZjNmM2NTcyIC8vICJmZWVfY29udHJvbGxlciIKCWZyYW1lX2RpZyAtMSAvLyBmZWVDb250cm9sbGVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo5NwoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgphYmlfcm91dGVfc2V0RmVlczoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZmVlOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRGZWVzKHVpbnQyNTYpYm9vbAoJY2FsbHN1YiBzZXRGZWVzCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHNldEZlZXModWludDI1Nilib29sCi8vCi8vIFVwZGF0ZSB0aGUgc3dhcC1mZWUgb2YgdGhlIHBvb2wKLy8gQHBhcmFtIGZlZSB1cGRhdGVkIHN3YXAtZmVlCi8vIEByZXR1cm5zIGB0cnVlYCBpZiBzdWNjZXNzCnNldEZlZXM6Cglwcm90byAxIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTA2CgkvLyBhc3NlcnQodGhpcy5mZWVDb250cm9sbGVyLnZhbHVlID09PSB0aGlzLnR4bi5zZW5kZXIpCglieXRlIDB4NjY2NTY1NWY2MzZmNmU3NDcyNmY2YzZjNjU3MiAvLyAiZmVlX2NvbnRyb2xsZXIiCglhcHBfZ2xvYmFsX2dldAoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMDcKCS8vIHRoaXMuZmVlLnZhbHVlID0gewoJLy8gICAgICAgICAgICAgc3dhcEZlZTogZmVlLAoJLy8gICAgICAgICAgICAgcGxhdGZvcm1GZWU6IHRoaXMuZmVlLnZhbHVlLnBsYXRmb3JtRmVlCgkvLyAgICAgICAgIH0KCWJ5dGUgMHg2NjY1NjUgLy8gImZlZSIKCWZyYW1lX2RpZyAtMSAvLyBmZWU6IHVpbnQyNTYKCWJ5dGUgMHg2NjY1NjUgLy8gImZlZSIKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAzMiAzMgoJY29uY2F0Cglib3hfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjExMQoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgphYmlfcm91dGVfc2V0UGxhdGZvcm1GZWVzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBmZWU6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldFBsYXRmb3JtRmVlcyh1aW50MjU2KWJvb2wKCWNhbGxzdWIgc2V0UGxhdGZvcm1GZWVzCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHNldFBsYXRmb3JtRmVlcyh1aW50MjU2KWJvb2wKLy8KLy8gVXBkYXRlIHRoZSBwbGF0Zm9ybS1mZWUgb2YgdGhlIHBvb2wKLy8gQHBhcmFtIGZlZSB1cGRhdGVkIHBsYXRmb3JtLWZlZQovLyBAcmV0dXJucyBgdHJ1ZWAgaWYgc3VjY2VzcwpzZXRQbGF0Zm9ybUZlZXM6Cglwcm90byAxIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTIwCgkvLyBhc3NlcnQodGhpcy5tYW5hZ2VyLnZhbHVlID09PSB0aGlzLnR4bi5zZW5kZXIpCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMjEKCS8vIHRoaXMuZmVlLnZhbHVlID0gewoJLy8gICAgICAgICAgICAgc3dhcEZlZTogdGhpcy5mZWUudmFsdWUuc3dhcEZlZSwKCS8vICAgICAgICAgICAgIHBsYXRmb3JtRmVlOiBmZWUKCS8vICAgICAgICAgfQoJYnl0ZSAweDY2NjU2NSAvLyAiZmVlIgoJZHVwCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIC0xIC8vIGZlZTogdWludDI1NgoJY29uY2F0Cglib3hfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjEyNQoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgphYmlfcm91dGVfcmVnaXN0ZXJPbmxpbmU6CgkvLyB2b3RlS2V5RGlsdXRpb246IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgoJYnRvaQoKCS8vIHZvdGVMYXN0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWJ0b2kKCgkvLyB2b3RlRmlyc3Q6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoKCS8vIHZvdGVQazogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglleHRyYWN0IDIgMAoKCS8vIHN0YXRlUHJvb2ZQazogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHNlbGVjdGlvblBrOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSByZWdpc3Rlck9ubGluZSh1aW50NjQsdWludDY0LHVpbnQ2NCxieXRlW10sYnl0ZVtdLGJ5dGVbXSl2b2lkCgljYWxsc3ViIHJlZ2lzdGVyT25saW5lCglpbnQgMQoJcmV0dXJuCgovLyByZWdpc3Rlck9ubGluZSh1aW50NjQsdWludDY0LHVpbnQ2NCxieXRlW10sYnl0ZVtdLGJ5dGVbXSl2b2lkCi8vCi8vIEJyaW5nIHRoZSBwb29sIGFjY291bnQgb25saW5lIGZvciBjb25zZW5zdXMgcGFydGljaXBhdGlvbgpyZWdpc3Rlck9ubGluZToKCXByb3RvIDYgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMzIKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuZmVlQ29udHJvbGxlci52YWx1ZSB8fCB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGUgMHg2NjY1NjU1ZjYzNmY2ZTc0NzI2ZjZjNmM2NTcyIC8vICJmZWVfY29udHJvbGxlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJZHVwCglibnogc2tpcF9vcjMKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJfHwKCnNraXBfb3IzOgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjEzNAoJLy8gc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBzZWxlY3Rpb25QSzogc2VsZWN0aW9uUGssCgkvLyAgICAgICAgICAgICBzdGF0ZVByb29mUEs6IHN0YXRlUHJvb2ZQaywKCS8vICAgICAgICAgICAgIHZvdGVQSzogdm90ZVBrLAoJLy8gICAgICAgICAgICAgdm90ZUZpcnN0OiB2b3RlRmlyc3QsCgkvLyAgICAgICAgICAgICB2b3RlTGFzdDogdm90ZUxhc3QsCgkvLyAgICAgICAgICAgICB2b3RlS2V5RGlsdXRpb246IHZvdGVLZXlEaWx1dGlvbiwKCS8vICAgICAgICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQga2V5cmVnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjEzNQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTM2CgkvLyBzZWxlY3Rpb25QSzogc2VsZWN0aW9uUGsKCWZyYW1lX2RpZyAtMSAvLyBzZWxlY3Rpb25QazogYnl0ZXMKCWl0eG5fZmllbGQgU2VsZWN0aW9uUEsKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTM3CgkvLyBzdGF0ZVByb29mUEs6IHN0YXRlUHJvb2ZQawoJZnJhbWVfZGlnIC0yIC8vIHN0YXRlUHJvb2ZQazogYnl0ZXMKCWl0eG5fZmllbGQgU3RhdGVQcm9vZlBLCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjEzOAoJLy8gdm90ZVBLOiB2b3RlUGsKCWZyYW1lX2RpZyAtMyAvLyB2b3RlUGs6IGJ5dGVzCglpdHhuX2ZpZWxkIFZvdGVQSwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMzkKCS8vIHZvdGVGaXJzdDogdm90ZUZpcnN0CglmcmFtZV9kaWcgLTQgLy8gdm90ZUZpcnN0OiB1aW50NjQKCWl0eG5fZmllbGQgVm90ZUZpcnN0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE0MAoJLy8gdm90ZUxhc3Q6IHZvdGVMYXN0CglmcmFtZV9kaWcgLTUgLy8gdm90ZUxhc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlTGFzdAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNDEKCS8vIHZvdGVLZXlEaWx1dGlvbjogdm90ZUtleURpbHV0aW9uCglmcmFtZV9kaWcgLTYgLy8gdm90ZUtleURpbHV0aW9uOiB1aW50NjQKCWl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE0MgoJLy8gZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJZ2xvYmFsIE1pblR4bkZlZQoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCmFiaV9yb3V0ZV9yZWdpc3Rlck9mZmxpbmU6CgkvLyBleGVjdXRlIHJlZ2lzdGVyT2ZmbGluZSgpdm9pZAoJY2FsbHN1YiByZWdpc3Rlck9mZmxpbmUKCWludCAxCglyZXR1cm4KCi8vIHJlZ2lzdGVyT2ZmbGluZSgpdm9pZAovLwovLyBCcmluZyB0aGUgcG9vbCBhY2NvdW50IG9mZmxpbmUgaS5lLiBzdG9wIGNvbnNlbnN1cyBwYXJ0aWNpcGF0aW9uCnJlZ2lzdGVyT2ZmbGluZToKCXByb3RvIDAgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNTAKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuZmVlQ29udHJvbGxlci52YWx1ZSB8fCB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGUgMHg2NjY1NjU1ZjYzNmY2ZTc0NzI2ZjZjNmM2NTcyIC8vICJmZWVfY29udHJvbGxlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJZHVwCglibnogc2tpcF9vcjQKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJfHwKCnNraXBfb3I0OgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE1MgoJLy8gc2VuZE9mZmxpbmVLZXlSZWdpc3RyYXRpb24oewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGtleXJlZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNTMKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE1NAoJLy8gZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJZ2xvYmFsIE1pblR4bkZlZQoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGdldFRva2VuWEJhbGFuY2UoKXVpbnQyNTYKZ2V0VG9rZW5YQmFsYW5jZToKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNTkKCS8vIHJldHVybiA8dWludDI1Nj4odGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlIC0gdGhpcy5hcHAuYWRkcmVzcy5taW5CYWxhbmNlKTsKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCWFzc2VydAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQoJYXNzZXJ0CgktCglpdG9iCglyZXRzdWIKCi8vIGdldFRva2VuWUJhbGFuY2UoKXVpbnQyNTYKZ2V0VG9rZW5ZQmFsYW5jZToKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNjMKCS8vIHJldHVybiBzZW5kTWV0aG9kQ2FsbDxbQWRkcmVzc10sIHVpbnQyNTY+KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIG5hbWU6ICdhcmMyMDBfYmFsYW5jZU9mJywKCS8vICAgICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUsCgkvLyAgICAgICAgICAgICBtZXRob2RBcmdzOiBbdGhpcy5hcHAuYWRkcmVzc10sCgkvLyAgICAgICAgICAgICBmZWU6IGdsb2JhbHMubWluVHhuRmVlLAoJLy8gICAgICAgICB9KTsKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgImFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTY0CgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNjYKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUKCWJ5dGUgMHg3NDZmNmI2NTZlNWY3OTVmNjE3MDcwNWY2OTY0IC8vICJ0b2tlbl95X2FwcF9pZCIKCWJveF9nZXQKCWFzc2VydAoJYnRvaQoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE2NwoJLy8gbWV0aG9kQXJnczogW3RoaXMuYXBwLmFkZHJlc3NdCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTY4CgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJcmV0c3ViCgovLyBnZXRUb2tlblhEZWNpbWFscygpdWludDgKZ2V0VG9rZW5YRGVjaW1hbHM6Cglwcm90byAwIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTczCgkvLyByZXR1cm4gPHVpbnQ4PjY7CglpbnQgNgoJcmV0c3ViCgovLyBnZXRUb2tlbllEZWNpbWFscygpdWludDgKZ2V0VG9rZW5ZRGVjaW1hbHM6Cglwcm90byAwIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTc3CgkvLyByZXR1cm4gc2VuZE1ldGhvZENhbGw8W10sIHVpbnQ4Pih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBuYW1lOiAnYXJjMjAwX2RlY2ltYWxzJywKCS8vICAgICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUsCgkvLyAgICAgICAgICAgICBtZXRob2RBcmdzOiBbXSwKCS8vICAgICAgICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgICAgIH0pOwoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAiYXJjMjAwX2RlY2ltYWxzKCl1aW50OCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE3OAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTgwCgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLnRva2VuWUFwcElkLnZhbHVlCglieXRlIDB4NzQ2ZjZiNjU2ZTVmNzk1ZjYxNzA3MDVmNjk2NCAvLyAidG9rZW5feV9hcHBfaWQiCglib3hfZ2V0Cglhc3NlcnQKCWJ0b2kKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxODEKCS8vIG1ldGhvZEFyZ3M6IFtdCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTgyCgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJYnRvaQoJcmV0c3ViCgovLyB0cmFuc2ZlclhUbyh1aW50MjU2LGFkZHJlc3MpYm9vbAp0cmFuc2ZlclhUbzoKCXByb3RvIDIgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxODcKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0bywKCS8vICAgICAgICAgICAgIGFtb3VudDogPHVpbnQ2ND5hbW91bnQsCgkvLyAgICAgICAgICAgICBmZWU6IGdsb2JhbHMubWluVHhuRmVlCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE4OAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTg5CgkvLyByZWNlaXZlcjogdG8KCWZyYW1lX2RpZyAtMSAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxOTAKCS8vIGFtb3VudDogPHVpbnQ2ND5hbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgNjQKCTw9Cglhc3NlcnQKCWV4dHJhY3QgMjQgOAoJYnRvaQoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTkxCgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTkzCgkvLyByZXR1cm4gdHJ1ZTsKCWludCAxCglyZXRzdWIKCi8vIHRyYW5zZmVyWVRvKHVpbnQyNTYsYWRkcmVzcylib29sCnRyYW5zZmVyWVRvOgoJcHJvdG8gMiAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE5NwoJLy8gcmV0dXJuIHNlbmRNZXRob2RDYWxsPFtBZGRyZXNzLCB1aW50MjU2XSwgYm9vbGVhbj4oewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgbmFtZTogJ2FyYzIwMF90cmFuc2ZlcicsCgkvLyAgICAgICAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLnRva2VuWUFwcElkLnZhbHVlLAoJLy8gICAgICAgICAgICAgbWV0aG9kQXJnczogW3RvLCBhbW91bnRdLAoJLy8gICAgICAgICAgICAgZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJLy8gICAgICAgICB9KTsKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgImFyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE5OAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjAwCgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLnRva2VuWUFwcElkLnZhbHVlCglieXRlIDB4NzQ2ZjZiNjU2ZTVmNzk1ZjYxNzA3MDVmNjk2NCAvLyAidG9rZW5feV9hcHBfaWQiCglib3hfZ2V0Cglhc3NlcnQKCWJ0b2kKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMDEKCS8vIG1ldGhvZEFyZ3M6IFt0bywgYW1vdW50XQoJZnJhbWVfZGlnIC0xIC8vIHRvOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDI1NgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjAyCgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJaW50IDAKCWdldGJpdAoJcmV0c3ViCgovLyB0cmFuc2ZlcllGcm9tKHVpbnQyNTYsYWRkcmVzcyxhZGRyZXNzKWJvb2wKdHJhbnNmZXJZRnJvbToKCXByb3RvIDMgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMDcKCS8vIHJldHVybiBzZW5kTWV0aG9kQ2FsbDxbQWRkcmVzcywgQWRkcmVzcywgdWludDI1Nl0sIGJvb2xlYW4+KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIG5hbWU6ICdhcmMyMDBfdHJhbnNmZXJGcm9tJywKCS8vICAgICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUsCgkvLyAgICAgICAgICAgICBtZXRob2RBcmdzOiBbZnJvbSwgdG8sIGFtb3VudF0sCgkvLyAgICAgICAgICAgICBmZWU6IGdsb2JhbHMubWluVHhuRmVlCgkvLyAgICAgICAgIH0pOwoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1Nilib29sIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjA4CgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMTAKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUKCWJ5dGUgMHg3NDZmNmI2NTZlNWY3OTVmNjE3MDcwNWY2OTY0IC8vICJ0b2tlbl95X2FwcF9pZCIKCWJveF9nZXQKCWFzc2VydAoJYnRvaQoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIxMQoJLy8gbWV0aG9kQXJnczogW2Zyb20sIHRvLCBhbW91bnRdCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQyNTYKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIxMgoJLy8gZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJZ2xvYmFsIE1pblR4bkZlZQoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWludCAwCglnZXRiaXQKCXJldHN1YgoKYWJpX3JvdXRlX2dldFJhdGlvOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGdldFJhdGlvKCl1aW50MjU2CgljYWxsc3ViIGdldFJhdGlvCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXRSYXRpbygpdWludDI1NgpnZXRSYXRpbzoKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjE4CgkvLyB5QmFsYW5jZSA9IHRoaXMuZ2V0VG9rZW5ZQmFsYW5jZSgpCgljYWxsc3ViIGdldFRva2VuWUJhbGFuY2UKCWZyYW1lX2J1cnkgMCAvLyB5QmFsYW5jZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjE5CgkvLyB4QmFsYW5jZSA9IHRoaXMuZ2V0VG9rZW5YQmFsYW5jZSgpCgljYWxsc3ViIGdldFRva2VuWEJhbGFuY2UKCWZyYW1lX2J1cnkgMSAvLyB4QmFsYW5jZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBpZjEwX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIyMAoJLy8geUJhbGFuY2UgPiA8dWludDI1Nj4wCglmcmFtZV9kaWcgMCAvLyB5QmFsYW5jZTogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYnogaWYxMF9lbHNlCgoJLy8gaWYxMF9jb25zZXF1ZW50CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjIxCgkvLyByZXR1cm4gKHhCYWxhbmNlICogPHVpbnQyNTY+U0NBTEUgKiA8dWludDI1Nj5TQ0FMRSkgLyB5QmFsYW5jZTsKCWZyYW1lX2RpZyAxIC8vIHhCYWxhbmNlOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDA1YWYzMTA3YTQwMDAKCWIqCglieXRlIDB4MDAwMDVhZjMxMDdhNDAwMAoJYioKCWZyYW1lX2RpZyAwIC8vIHlCYWxhbmNlOiB1bnNhZmUgdWludDI1NgoJYi8KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCWIgaWYxMF9lbmQKCmlmMTBfZWxzZToKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMjMKCS8vIHJldHVybiA8dWludDI1Nj5TQ0FMRSAqIDx1aW50MjU2PlNDQUxFOwoJYnl0ZSAweDAwMDA1YWYzMTA3YTQwMDAKCWR1cAoJYioKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCmlmMTBfZW5kOgoJcmV0c3ViCgovLyB1cGRhdGVSYXRpbygpdm9pZAp1cGRhdGVSYXRpbzoKCXByb3RvIDAgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMjgKCS8vIHRoaXMucmF0aW8udmFsdWUgPSB0aGlzLmdldFJhdGlvKCkKCWJ5dGUgMHg3MjYxNzQ2OTZmIC8vICJyYXRpbyIKCWNhbGxzdWIgZ2V0UmF0aW8KCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gcG93T2ZUZW4odWludDY0KXVpbnQyNTYKLy8KLy8gRXhhbXBsZTogYHBvd09mVGVuKDYpYCByZXR1cm5zIGAxLDAwMCwwMDBgCi8vIEBwYXJhbSBwb3cgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzCi8vIEByZXR1cm5zCnBvd09mVGVuOgoJcHJvdG8gMSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMzcKCS8vIHJlc3VsdDogdWludDI1NiA9IDEKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxCglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIzOQoJLy8gaTogdWludDY0ID0gMAoJaW50IDAKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCmZvcl8wOgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIzOQoJLy8gaSA8IGRlY2ltYWxzCglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBkZWNpbWFsczogdWludDY0Cgk8CglieiBmb3JfMF9lbmQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjQwCgkvLyByZXN1bHQgPSByZXN1bHQgKiA8dWludDI1Nj4xMAoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYQoJYioKCWZyYW1lX2J1cnkgMCAvLyByZXN1bHQ6IHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjM5CgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50IDEKCSsKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCWIgZm9yXzAKCmZvcl8wX2VuZDoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyNDMKCS8vIHJldHVybiByZXN1bHQ7CglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IHVpbnQyNTYKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCmFiaV9yb3V0ZV9hZGRMaXF1aWRpdHk6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGFtb3VudFk6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBwYXlUeG5YOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYWRkTGlxdWlkaXR5KHVpbnQyNTYscGF5KWJvb2wKCWNhbGxzdWIgYWRkTGlxdWlkaXR5CglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFkZExpcXVpZGl0eSh1aW50MjU2LHBheSlib29sCi8vCi8vIEFkZCBsaXF1aWRpdHkgdG8gdGhlIHBvb2wKLy8gQHBhcmFtIHBheVR4blggeC10b2tlbiB0eG4KLy8gQHBhcmFtIGFtb3VudFkgYW1vdW50IG9mIHktdG9rZW4gYXBwcm92ZWQgdG8gdGhlIHBvb2wKLy8gQHJldHVybnMgYHRydWVgIGlmIHN1Y2Nlc3MKYWRkTGlxdWlkaXR5OgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjUzCgkvLyB2ZXJpZnlQYXlUeG4ocGF5VHhuWCwgewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogeyBncmVhdGVyVGhhbjogMCB9LAoJLy8gICAgICAgICAgICAgcmVrZXlUbzogZ2xvYmFscy56ZXJvQWRkcmVzcywKCS8vICAgICAgICAgICAgIGNsb3NlUmVtYWluZGVyVG86IGdsb2JhbHMuemVyb0FkZHJlc3MKCS8vICAgICAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHBheVR4blg6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBheVR4blg6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJla2V5VG8KCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIFJla2V5VG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBjbG9zZVJlbWFpbmRlclRvCglmcmFtZV9kaWcgLTEgLy8gcGF5VHhuWDogUGF5VHhuCglndHhucyBDbG9zZVJlbWFpbmRlclRvCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjYxCgkvLyBhbW91bnRYID0gPHVpbnQyNTY+cGF5VHhuWC5hbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaXRvYgoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI2MwoJLy8gYXNzZXJ0KGFtb3VudFkgPiA8dWludDI1Nj4wKQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudFk6IHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI2NQoJLy8gYmFsYW5jZVkgPSB0aGlzLmdldFRva2VuWUJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlbllCYWxhbmNlCglmcmFtZV9idXJ5IDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI2NgoJLy8gYmFsYW5jZVggPSB0aGlzLmdldFRva2VuWEJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlblhCYWxhbmNlCglmcmFtZV9idXJ5IDIgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI2NwoJLy8gaXNzdWVkTHB0QmVmb3JlID0gdGhpcy50b3RhbFN1cHBseS52YWx1ZSAtIHRoaXMuYXJjMjAwX2JhbGFuY2VPZih0aGlzLmFwcC5hZGRyZXNzKQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYm94X2dldAoJYXNzZXJ0CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJY2FsbHN1YiBhcmMyMDBfYmFsYW5jZU9mCgliLQoJZnJhbWVfYnVyeSAzIC8vIGlzc3VlZExwdEJlZm9yZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjY5CgkvLyBhc3NlcnQodGhpcy50cmFuc2ZlcllGcm9tKHRoaXMudHhuLnNlbmRlciwgdGhpcy5hcHAuYWRkcmVzcywgYW1vdW50WSkpCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50WTogdWludDI1NgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCXR4biBTZW5kZXIKCWNhbGxzdWIgdHJhbnNmZXJZRnJvbQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI3MQoJLy8gbHB0VG9NaW50ID0gPHVpbnQyNTY+MAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWZyYW1lX2J1cnkgNCAvLyBscHRUb01pbnQ6IHVpbnQyNTYKCgkvLyBpZjExX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI3MwoJLy8gaXNzdWVkTHB0QmVmb3JlID09PSA8dWludDI1Nj4wCglmcmFtZV9kaWcgMyAvLyBpc3N1ZWRMcHRCZWZvcmU6IHVuc2FmZSB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj09CglieiBpZjExX2Vsc2UKCgkvLyBpZjExX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyNzUKCS8vIGRlY2ltYWxzT2ZYID0gdGhpcy5nZXRUb2tlblhEZWNpbWFscygpCgljYWxsc3ViIGdldFRva2VuWERlY2ltYWxzCglmcmFtZV9idXJ5IDUgLy8gZGVjaW1hbHNPZlg6IHVuc2FmZSB1aW50OAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyNzYKCS8vIGRlY2ltYWxzT2ZZID0gdGhpcy5nZXRUb2tlbllEZWNpbWFscygpCgljYWxsc3ViIGdldFRva2VuWURlY2ltYWxzCglmcmFtZV9idXJ5IDYgLy8gZGVjaW1hbHNPZlk6IHVuc2FmZSB1aW50OAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyNzgKCS8vIGFtb3VudFhOb3JtYWxpemVkID0gKGFtb3VudFggKiAodGhpcy5wb3dPZlRlbihERUNJTUFMUykpKSAvIHRoaXMucG93T2ZUZW4oPHVpbnQ2ND5kZWNpbWFsc09mWCkKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CglpbnQgNgoJY2FsbHN1YiBwb3dPZlRlbgoJYioKCWZyYW1lX2RpZyA1IC8vIGRlY2ltYWxzT2ZYOiB1bnNhZmUgdWludDgKCWNhbGxzdWIgcG93T2ZUZW4KCWIvCglmcmFtZV9idXJ5IDcgLy8gYW1vdW50WE5vcm1hbGl6ZWQ6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI3OQoJLy8gYW1vdW50WU5vcm1hbGl6ZWQgPSAoYW1vdW50WSAqICh0aGlzLnBvd09mVGVuKERFQ0lNQUxTKSkpIC8gdGhpcy5wb3dPZlRlbig8dWludDY0PmRlY2ltYWxzT2ZZKQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudFk6IHVpbnQyNTYKCWludCA2CgljYWxsc3ViIHBvd09mVGVuCgliKgoJZnJhbWVfZGlnIDYgLy8gZGVjaW1hbHNPZlk6IHVuc2FmZSB1aW50OAoJY2FsbHN1YiBwb3dPZlRlbgoJYi8KCWZyYW1lX2J1cnkgOCAvLyBhbW91bnRZTm9ybWFsaXplZDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjgxCgkvLyBscHRUb01pbnQgPSBzcXJ0KGFtb3VudFhOb3JtYWxpemVkICogYW1vdW50WU5vcm1hbGl6ZWQpCglmcmFtZV9kaWcgNyAvLyBhbW91bnRYTm9ybWFsaXplZDogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyA4IC8vIGFtb3VudFlOb3JtYWxpemVkOiB1bnNhZmUgdWludDI1NgoJYioKCWJzcXJ0CglmcmFtZV9idXJ5IDQgLy8gbHB0VG9NaW50OiB1aW50MjU2CgliIGlmMTFfZW5kCgppZjExX2Vsc2U6CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mjg0CgkvLyByYXRpb1ggPSAoYW1vdW50WCAqIDx1aW50MjU2PlNDQUxFKSAvIChiYWxhbmNlWCAtIGFtb3VudFgpCglmcmFtZV9kaWcgMCAvLyBhbW91bnRYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDA1YWYzMTA3YTQwMDAKCWIqCglmcmFtZV9kaWcgMiAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CgliLQoJYi8KCWZyYW1lX2J1cnkgOSAvLyByYXRpb1g6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI4NQoJLy8gcmF0aW9ZID0gKGFtb3VudFkgKiA8dWludDI1Nj5TQ0FMRSkgLyBiYWxhbmNlWQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudFk6IHVpbnQyNTYKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCgliKgoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgliLwoJZnJhbWVfYnVyeSAxMCAvLyByYXRpb1k6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI4NgoJLy8gcmF0aW8gPSByYXRpb1ggPCByYXRpb1kgPyByYXRpb1ggOiByYXRpb1kKCWZyYW1lX2RpZyA5IC8vIHJhdGlvWDogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAxMCAvLyByYXRpb1k6IHVuc2FmZSB1aW50MjU2CgliPAoJYnogdGVybmFyeTFfZmFsc2UKCWZyYW1lX2RpZyA5IC8vIHJhdGlvWDogdW5zYWZlIHVpbnQyNTYKCWIgdGVybmFyeTFfZW5kCgp0ZXJuYXJ5MV9mYWxzZToKCWZyYW1lX2RpZyAxMCAvLyByYXRpb1k6IHVuc2FmZSB1aW50MjU2Cgp0ZXJuYXJ5MV9lbmQ6CglmcmFtZV9idXJ5IDExIC8vIHJhdGlvOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyODgKCS8vIGxwdFRvTWludCA9IChpc3N1ZWRMcHRCZWZvcmUgKiByYXRpbykgLyA8dWludDI1Nj5TQ0FMRQoJZnJhbWVfZGlnIDMgLy8gaXNzdWVkTHB0QmVmb3JlOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDExIC8vIHJhdGlvOiB1bnNhZmUgdWludDI1NgoJYioKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCgliLwoJZnJhbWVfYnVyeSA0IC8vIGxwdFRvTWludDogdWludDI1NgoKaWYxMV9lbmQ6CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjkxCgkvLyBhc3NlcnQobHB0VG9NaW50ID4gPHVpbnQyNTY+MCkKCWZyYW1lX2RpZyA0IC8vIGxwdFRvTWludDogdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjkyCgkvLyBhc3NlcnQodGhpcy50cmFuc2Zlcih0aGlzLmFwcC5hZGRyZXNzLCB0aGlzLnR4bi5zZW5kZXIsIGxwdFRvTWludCkpCglmcmFtZV9kaWcgNCAvLyBscHRUb01pbnQ6IHVpbnQyNTYKCXR4biBTZW5kZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgljYWxsc3ViIHRyYW5zZmVyCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mjk0CgkvLyBpbm5lclR4bnNDb3VudCA9IDIKCWludCAyCglmcmFtZV9idXJ5IDEyIC8vIGlubmVyVHhuc0NvdW50OiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mjk1CgkvLyBpbm5lclR4bnNGZWUgPSBpbm5lclR4bnNDb3VudCAqIGdsb2JhbHMubWluVHhuRmVlCglpbnQgMiAvLyBpbm5lclR4bnNDb3VudDogdWludDY0CglnbG9iYWwgTWluVHhuRmVlCgkqCglmcmFtZV9idXJ5IDEzIC8vIGlubmVyVHhuc0ZlZTogdWludDY0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI5NgoJLy8gZmluYWxCYWxhbmNlWCA9IGJhbGFuY2VYICsgYW1vdW50WCAtIDx1aW50MjU2PmlubmVyVHhuc0ZlZQoJZnJhbWVfZGlnIDIgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMCAvLyBhbW91bnRYOiB1bnNhZmUgdWludDI1NgoJYisKCWZyYW1lX2RpZyAxMyAvLyBpbm5lclR4bnNGZWU6IHVpbnQ2NAoJaXRvYgoJYi0KCWZyYW1lX2J1cnkgMTQgLy8gZmluYWxCYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mjk3CgkvLyBmaW5hbEJhbGFuY2VZID0gYmFsYW5jZVkgKyBhbW91bnRZCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnRZOiB1aW50MjU2CgliKwoJZnJhbWVfYnVyeSAxNSAvLyBmaW5hbEJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyOTkKCS8vIHRoaXMuRGVwb3NpdC5sb2coCgkvLyAgICAgICAgICAgICB7CgkvLyAgICAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICAgICAgaW5BbXRzOiBbYW1vdW50WCwgYW1vdW50WV0sCgkvLyAgICAgICAgICAgICAgICAgb3V0THB0OiA8dWludDI1Nj4wICsgbHB0VG9NaW50LAoJLy8gICAgICAgICAgICAgICAgIHBvb2xCYWxzOiBbZmluYWxCYWxhbmNlWCwgZmluYWxCYWxhbmNlWV0sCgkvLyAgICAgICAgICAgICB9CgkvLyAgICAgICAgICkKCWJ5dGUgMHgzZDAxM2U3ZCAvLyBEZXBvc2l0KGFkZHJlc3MsKHVpbnQyNTYsdWludDI1NiksdWludDI1NiwodWludDI1Nix1aW50MjU2KSkKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnRZOiB1aW50MjU2Cgljb25jYXQKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWZyYW1lX2RpZyA0IC8vIGxwdFRvTWludDogdWludDI1NgoJYisKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0CglmcmFtZV9kaWcgMTQgLy8gZmluYWxCYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIDE1IC8vIGZpbmFsQmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMDgKCS8vIHRoaXMudXBkYXRlUmF0aW8oKQoJY2FsbHN1YiB1cGRhdGVSYXRpbwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMTAKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxNQoJcmV0c3ViCgphYmlfcm91dGVfcmVtb3ZlTGlxdWlkaXR5OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBscHRBbW91bnQ6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHJlbW92ZUxpcXVpZGl0eSh1aW50MjU2KWJvb2wKCWNhbGxzdWIgcmVtb3ZlTGlxdWlkaXR5CglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHJlbW92ZUxpcXVpZGl0eSh1aW50MjU2KWJvb2wKLy8KLy8gUmVtb3ZlIGxpcXVpZGl0eSBmcm9tIHRoZSBwb29sCi8vIEBwYXJhbSBscHRBbW91bnQgYW1vdW50IG9mIGxwLXRva2VuIHRvIGJ1cm4KLy8gQHJldHVybnMgYHRydWVgIG9mIHN1Y2Nlc3MKcmVtb3ZlTGlxdWlkaXR5OgoJcHJvdG8gMSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gOQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMTkKCS8vIGJhbGFuY2VZID0gdGhpcy5nZXRUb2tlbllCYWxhbmNlKCkKCWNhbGxzdWIgZ2V0VG9rZW5ZQmFsYW5jZQoJZnJhbWVfYnVyeSAwIC8vIGJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMjAKCS8vIGJhbGFuY2VYID0gdGhpcy5nZXRUb2tlblhCYWxhbmNlKCkKCWNhbGxzdWIgZ2V0VG9rZW5YQmFsYW5jZQoJZnJhbWVfYnVyeSAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMjIKCS8vIGFzc2VydChiYWxhbmNlWCA+IDx1aW50MjU2PjApCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMyMwoJLy8gYXNzZXJ0KGJhbGFuY2VZID4gPHVpbnQyNTY+MCkKCWZyYW1lX2RpZyAwIC8vIGJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzI1CgkvLyBpc3N1ZWRMcHRCZWZvcmUgPSB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlIC0gdGhpcy5hcmMyMDBfYmFsYW5jZU9mKHRoaXMuYXBwLmFkZHJlc3MpCglieXRlIDB4NzQ2Zjc0NjE2YzUzNzU3MDcwNmM3OSAvLyAidG90YWxTdXBwbHkiCglib3hfZ2V0Cglhc3NlcnQKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWItCglmcmFtZV9idXJ5IDIgLy8gaXNzdWVkTHB0QmVmb3JlOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMjYKCS8vIHdpdGhkcmF3QW1vdW50WCA9IChiYWxhbmNlWCAqIGxwdEFtb3VudCkgLyBpc3N1ZWRMcHRCZWZvcmUKCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIC0xIC8vIGxwdEFtb3VudDogdWludDI1NgoJYioKCWZyYW1lX2RpZyAyIC8vIGlzc3VlZExwdEJlZm9yZTogdW5zYWZlIHVpbnQyNTYKCWIvCglmcmFtZV9idXJ5IDMgLy8gd2l0aGRyYXdBbW91bnRYOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMjcKCS8vIHdpdGhkcmF3QW1vdW50WSA9IChiYWxhbmNlWSAqIGxwdEFtb3VudCkgLyBpc3N1ZWRMcHRCZWZvcmUKCWZyYW1lX2RpZyAwIC8vIGJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIC0xIC8vIGxwdEFtb3VudDogdWludDI1NgoJYioKCWZyYW1lX2RpZyAyIC8vIGlzc3VlZExwdEJlZm9yZTogdW5zYWZlIHVpbnQyNTYKCWIvCglmcmFtZV9idXJ5IDQgLy8gd2l0aGRyYXdBbW91bnRZOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMjkKCS8vIGFzc2VydCh3aXRoZHJhd0Ftb3VudFggPiA8dWludDI1Nj4wKQoJZnJhbWVfZGlnIDMgLy8gd2l0aGRyYXdBbW91bnRYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzMwCgkvLyBhc3NlcnQod2l0aGRyYXdBbW91bnRZID4gPHVpbnQyNTY+MCkKCWZyYW1lX2RpZyA0IC8vIHdpdGhkcmF3QW1vdW50WTogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMzMgoJLy8gYXNzZXJ0KHRoaXMudHJhbnNmZXIodGhpcy50eG4uc2VuZGVyLCB0aGlzLmFwcC5hZGRyZXNzLCBscHRBbW91bnQpKQoJZnJhbWVfZGlnIC0xIC8vIGxwdEFtb3VudDogdWludDI1NgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCXR4biBTZW5kZXIKCWNhbGxzdWIgdHJhbnNmZXIKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMzMKCS8vIGFzc2VydCh0aGlzLnRyYW5zZmVyWFRvKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdBbW91bnRYKSkKCWZyYW1lX2RpZyAzIC8vIHdpdGhkcmF3QW1vdW50WDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJdHhuIFNlbmRlcgoJY2FsbHN1YiB0cmFuc2ZlclhUbwoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMzNAoJLy8gYXNzZXJ0KHRoaXMudHJhbnNmZXJZVG8odGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd0Ftb3VudFkpKQoJZnJhbWVfZGlnIDQgLy8gd2l0aGRyYXdBbW91bnRZOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgl0eG4gU2VuZGVyCgljYWxsc3ViIHRyYW5zZmVyWVRvCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzM3CgkvLyBpbm5lclR4bnNDb3VudCA9IDIKCWludCAyCglmcmFtZV9idXJ5IDUgLy8gaW5uZXJUeG5zQ291bnQ6IHVpbnQ2NAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMzgKCS8vIGlubmVyVHhuc0ZlZSA9IGlubmVyVHhuc0NvdW50ICogZ2xvYmFscy5taW5UeG5GZWUKCWludCAyIC8vIGlubmVyVHhuc0NvdW50OiB1aW50NjQKCWdsb2JhbCBNaW5UeG5GZWUKCSoKCWZyYW1lX2J1cnkgNiAvLyBpbm5lclR4bnNGZWU6IHVpbnQ2NAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMzkKCS8vIGZpbmFsQmFsYW5jZVggPSBiYWxhbmNlWCAtIHdpdGhkcmF3QW1vdW50WCAtIDx1aW50MjU2PihiYWxhbmNlWCA9PT0gd2l0aGRyYXdBbW91bnRYID8gMCA6IGlubmVyVHhuc0ZlZSkKCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDMgLy8gd2l0aGRyYXdBbW91bnRYOiB1bnNhZmUgdWludDI1NgoJYi0KCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDMgLy8gd2l0aGRyYXdBbW91bnRYOiB1bnNhZmUgdWludDI1NgoJYj09CglieiB0ZXJuYXJ5NV9mYWxzZQoJaW50IDAKCWIgdGVybmFyeTVfZW5kCgp0ZXJuYXJ5NV9mYWxzZToKCWZyYW1lX2RpZyA2IC8vIGlubmVyVHhuc0ZlZTogdWludDY0Cgp0ZXJuYXJ5NV9lbmQ6CglpdG9iCgliLQoJZnJhbWVfYnVyeSA3IC8vIGZpbmFsQmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM0MAoJLy8gZmluYWxCYWxhbmNlWSA9IGJhbGFuY2VZIC0gd2l0aGRyYXdBbW91bnRZCglmcmFtZV9kaWcgMCAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyA0IC8vIHdpdGhkcmF3QW1vdW50WTogdW5zYWZlIHVpbnQyNTYKCWItCglmcmFtZV9idXJ5IDggLy8gZmluYWxCYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzQyCgkvLyB0aGlzLldpdGhkcmF3LmxvZygKCS8vICAgICAgICAgICAgIHsKCS8vICAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgICAgICBpbkxwdDogbHB0QW1vdW50LAoJLy8gICAgICAgICAgICAgICAgIG91dEFtdHM6IFt3aXRoZHJhd0Ftb3VudFgsIHdpdGhkcmF3QW1vdW50WV0sCgkvLyAgICAgICAgICAgICAgICAgcG9vbEJhbHM6IFtmaW5hbEJhbGFuY2VYLCBmaW5hbEJhbGFuY2VZXSwKCS8vICAgICAgICAgICAgIH0KCS8vICAgICAgICAgKQoJYnl0ZSAweGE2OGU2NTVjIC8vIFdpdGhkcmF3KGFkZHJlc3MsdWludDI1NiwodWludDI1Nix1aW50MjU2KSwodWludDI1Nix1aW50MjU2KSkKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBscHRBbW91bnQ6IHVpbnQyNTYKCWNvbmNhdAoJZnJhbWVfZGlnIDMgLy8gd2l0aGRyYXdBbW91bnRYOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglmcmFtZV9kaWcgNCAvLyB3aXRoZHJhd0Ftb3VudFk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9kaWcgNyAvLyBmaW5hbEJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglmcmFtZV9kaWcgOCAvLyBmaW5hbEJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzUxCgkvLyB0aGlzLnVwZGF0ZVJhdGlvKCkKCWNhbGxzdWIgdXBkYXRlUmF0aW8KCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzUzCgkvLyByZXR1cm4gdHJ1ZTsKCWludCAxCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gOAoJcmV0c3ViCgovLyBjb21wdXRlT3V0VG9rZW5zKHVpbnQyNTYsdWludDI1Nix1aW50MjU2LHVpbnQyNTYpdWludDI1Ngpjb21wdXRlT3V0VG9rZW5zOgoJcHJvdG8gNCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozNTcKCS8vIGZhY3RvciA9IDx1aW50MjU2PlNDQUxFIC0gZmVlCglieXRlIDB4MDAwMDVhZjMxMDdhNDAwMAoJZnJhbWVfZGlnIC00IC8vIGZlZTogdWludDI1NgoJYi0KCWZyYW1lX2J1cnkgMCAvLyBmYWN0b3I6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM1OQoJLy8gbnVtZXJhdG9yID0gKAoJLy8gICAgICAgICAgICAgPHVpbnQ8NTEyPj5hbW91bnRBICogPHVpbnQ8NTEyPj5zdXBwbHlCICogPHVpbnQ8NTEyPj5mYWN0b3IKCS8vICAgICAgICAgKQoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudEE6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMyAvLyBzdXBwbHlCOiB1aW50MjU2CgliKgoJZnJhbWVfZGlnIDAgLy8gZmFjdG9yOiB1bnNhZmUgdWludDI1NgoJYioKCWZyYW1lX2J1cnkgMSAvLyBudW1lcmF0b3I6IHVuc2FmZSB1aW50NTEyCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM2MgoJLy8gZGVub21pbmF0b3IgPSAoCgkvLyAgICAgICAgICAgICAoPHVpbnQ8NTEyPj5hbW91bnRBICsgPHVpbnQ8NTEyPj5zdXBwbHlBKSAqIDx1aW50PDUxMj4+U0NBTEUKCS8vICAgICAgICAgKQoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudEE6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBzdXBwbHlBOiB1aW50MjU2CgliKwoJYnl0ZSAweDAwMDA1YWYzMTA3YTQwMDAKCWIqCglmcmFtZV9idXJ5IDIgLy8gZGVub21pbmF0b3I6IHVuc2FmZSB1aW50NTEyCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM2NgoJLy8gcmV0dXJuIDx1aW50MjU2PihudW1lcmF0b3IgLyBkZW5vbWluYXRvcik7CglmcmFtZV9kaWcgMSAvLyBudW1lcmF0b3I6IHVuc2FmZSB1aW50NTEyCglmcmFtZV9kaWcgMiAvLyBkZW5vbWluYXRvcjogdW5zYWZlIHVpbnQ1MTIKCWIvCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMgoJcmV0c3ViCgovLyBjb21wdXRlUGxhdGZvcm1GZWUodWludDI1Nix1aW50MjU2LHVpbnQyNTYpdWludDI1Ngpjb21wdXRlUGxhdGZvcm1GZWU6Cglwcm90byAzIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM3MAoJLy8gYW1vdW50X3dpdGhvdXRfZmVlID0gdGhpcy5jb21wdXRlT3V0VG9rZW5zKGFtb3VudEEsIHN1cHBseUEsIHN1cHBseUIsIDx1aW50MjU2PjApCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJZnJhbWVfZGlnIC0zIC8vIHN1cHBseUI6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBzdXBwbHlBOiB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gYW1vdW50QTogdWludDI1NgoJY2FsbHN1YiBjb21wdXRlT3V0VG9rZW5zCglmcmFtZV9idXJ5IDAgLy8gYW1vdW50X3dpdGhvdXRfZmVlOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozNzEKCS8vIGFtb3VudF93aXRoX2ZlZSA9IHRoaXMuY29tcHV0ZU91dFRva2VucyhhbW91bnRBLCBzdXBwbHlBLCBzdXBwbHlCLCB0aGlzLmZlZS52YWx1ZS5zd2FwRmVlKQoJYnl0ZSAweDY2NjU2NSAvLyAiZmVlIgoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAtMyAvLyBzdXBwbHlCOiB1aW50MjU2CglmcmFtZV9kaWcgLTIgLy8gc3VwcGx5QTogdWludDI1NgoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudEE6IHVpbnQyNTYKCWNhbGxzdWIgY29tcHV0ZU91dFRva2VucwoJZnJhbWVfYnVyeSAxIC8vIGFtb3VudF93aXRoX2ZlZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzczCgkvLyByZXR1cm4gKChhbW91bnRfd2l0aG91dF9mZWUgLSBhbW91bnRfd2l0aF9mZWUpICogdGhpcy5mZWUudmFsdWUucGxhdGZvcm1GZWUpIC8gPHVpbnQyNTY+U0NBTEU7CglmcmFtZV9kaWcgMCAvLyBhbW91bnRfd2l0aG91dF9mZWU6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMSAvLyBhbW91bnRfd2l0aF9mZWU6IHVuc2FmZSB1aW50MjU2CgliLQoJYnl0ZSAweDY2NjU2NSAvLyAiZmVlIgoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDMyIDMyCgliKgoJYnl0ZSAweDAwMDA1YWYzMTA3YTQwMDAKCWIvCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMQoJcmV0c3ViCgphYmlfcm91dGVfc3dhcFh0b1k6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIG1pbkFtb3VudFk6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBwYXlUeG5YOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgc3dhcFh0b1kodWludDI1NixwYXkpdWludDI1NgoJY2FsbHN1YiBzd2FwWHRvWQoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gc3dhcFh0b1kodWludDI1NixwYXkpdWludDI1NgovLwovLyBTd2FwIHgtdG9rZW4gZm9yIHktdG9rZW4KLy8gQHBhcmFtIHBheVR4blggeC10b2tlbiBwYXkgdHhuCi8vIEBwYXJhbSBtaW5BbW91bnRZIG1pbmltdW0gYW1vdW50IG9mIHktdG9rZW4gcmVxdWlyZWQgZm9yIHRoaXMgdHhuIHRvIGJlIHN1Y2Nlc3NmdWwKLy8gQHJldHVybnMgYW1vdW50IG9mIHktdG9rZW4gZ2l2ZW4gb3V0IGluIGV4Y2hhbmdlIGZvciB4LXRva2VuCnN3YXBYdG9ZOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gOQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozODMKCS8vIHZlcmlmeVBheVR4bihwYXlUeG5YLCB7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAgICAgICAgICAgICByZWtleVRvOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICAgICAgY2xvc2VSZW1haW5kZXJUbzogZ2xvYmFscy56ZXJvQWRkcmVzcywKCS8vICAgICAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHBheVR4blg6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBheVR4blg6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJla2V5VG8KCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIFJla2V5VG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBjbG9zZVJlbWFpbmRlclRvCglmcmFtZV9kaWcgLTEgLy8gcGF5VHhuWDogUGF5VHhuCglndHhucyBDbG9zZVJlbWFpbmRlclRvCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzkxCgkvLyBhbW91bnRYID0gPHVpbnQyNTY+cGF5VHhuWC5hbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaXRvYgoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM5MgoJLy8gYmFsYW5jZVkgPSB0aGlzLmdldFRva2VuWUJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlbllCYWxhbmNlCglmcmFtZV9idXJ5IDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM5MwoJLy8gYmFsYW5jZVggPSB0aGlzLmdldFRva2VuWEJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlblhCYWxhbmNlCglmcmFtZV9idXJ5IDIgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM5NQoJLy8gYXNzZXJ0KGJhbGFuY2VYID4gPHVpbnQyNTY+MCkKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mzk2CgkvLyBhc3NlcnQoYmFsYW5jZVkgPiA8dWludDI1Nj4wLCBiYWxhbmNlWSA+IG1pbkFtb3VudFkpCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYXNzZXJ0CglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBtaW5BbW91bnRZOiB1aW50MjU2CgliPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM5OAoJLy8gYW1vdW50T3V0ID0gdGhpcy5jb21wdXRlT3V0VG9rZW5zKAoJLy8gICAgICAgICAgICAgYW1vdW50WCwKCS8vICAgICAgICAgICAgIGJhbGFuY2VYIC0gYW1vdW50WCwKCS8vICAgICAgICAgICAgIGJhbGFuY2VZLAoJLy8gICAgICAgICAgICAgdGhpcy5mZWUudmFsdWUuc3dhcEZlZQoJLy8gICAgICAgICApCglieXRlIDB4NjY2NTY1IC8vICJmZWUiCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDAgLy8gYW1vdW50WDogdW5zYWZlIHVpbnQyNTYKCWItCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNhbGxzdWIgY29tcHV0ZU91dFRva2VucwoJZnJhbWVfYnVyeSAzIC8vIGFtb3VudE91dDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDA1CgkvLyBhc3NlcnQoYW1vdW50T3V0ID4gPHVpbnQyNTY+MCwgYW1vdW50T3V0ID49IG1pbkFtb3VudFksIGFtb3VudE91dCA8IGJhbGFuY2VZKQoJZnJhbWVfZGlnIDMgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCWZyYW1lX2RpZyAzIC8vIGFtb3VudE91dDogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBtaW5BbW91bnRZOiB1aW50MjU2CgliPj0KCWFzc2VydAoJZnJhbWVfZGlnIDMgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgliPAoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQwNwoJLy8gcGxhdGZvcm1GZWUgPSB0aGlzLmNvbXB1dGVQbGF0Zm9ybUZlZSgKCS8vICAgICAgICAgICAgIGFtb3VudFgsCgkvLyAgICAgICAgICAgICBiYWxhbmNlWCAtIGFtb3VudFgsCgkvLyAgICAgICAgICAgICBiYWxhbmNlWSwKCS8vICAgICAgICAgKQoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDAgLy8gYW1vdW50WDogdW5zYWZlIHVpbnQyNTYKCWItCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNhbGxzdWIgY29tcHV0ZVBsYXRmb3JtRmVlCglmcmFtZV9idXJ5IDQgLy8gcGxhdGZvcm1GZWU6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQxMwoJLy8gYXNzZXJ0KHRoaXMudHJhbnNmZXJZVG8odGhpcy50eG4uc2VuZGVyLCBhbW91bnRPdXQpKQoJZnJhbWVfZGlnIDMgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgl0eG4gU2VuZGVyCgljYWxsc3ViIHRyYW5zZmVyWVRvCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDE0CgkvLyBhc3NlcnQodGhpcy50cmFuc2ZlcllUbyh0aGlzLm1hbmFnZXIudmFsdWUsIHBsYXRmb3JtRmVlKSkKCWZyYW1lX2RpZyA0IC8vIHBsYXRmb3JtRmVlOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJY2FsbHN1YiB0cmFuc2ZlcllUbwoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQxNgoJLy8gaW5uZXJUeG5zQ291bnQgPSAyCglpbnQgMgoJZnJhbWVfYnVyeSA1IC8vIGlubmVyVHhuc0NvdW50OiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDE3CgkvLyBpbm5lclR4bnNGZWUgPSBpbm5lclR4bnNDb3VudCAqIGdsb2JhbHMubWluVHhuRmVlCglpbnQgMiAvLyBpbm5lclR4bnNDb3VudDogdWludDY0CglnbG9iYWwgTWluVHhuRmVlCgkqCglmcmFtZV9idXJ5IDYgLy8gaW5uZXJUeG5zRmVlOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDE4CgkvLyBmaW5hbEJhbGFuY2VYID0gYmFsYW5jZVggLSA8dWludDI1Nj5pbm5lclR4bnNGZWUKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDYgLy8gaW5uZXJUeG5zRmVlOiB1aW50NjQKCWl0b2IKCWItCglmcmFtZV9idXJ5IDcgLy8gZmluYWxCYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDE5CgkvLyBmaW5hbEJhbGFuY2VZID0gYmFsYW5jZVkgLSBhbW91bnRPdXQgLSBwbGF0Zm9ybUZlZQoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMyAvLyBhbW91bnRPdXQ6IHVuc2FmZSB1aW50MjU2CgliLQoJZnJhbWVfZGlnIDQgLy8gcGxhdGZvcm1GZWU6IHVuc2FmZSB1aW50MjU2CgliLQoJZnJhbWVfYnVyeSA4IC8vIGZpbmFsQmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQyMQoJLy8gdGhpcy5Td2FwLmxvZygKCS8vICAgICAgICAgICAgIHsKCS8vICAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgICAgICBpbkFtdHM6IFthbW91bnRYLCAwXSwKCS8vICAgICAgICAgICAgICAgICBvdXRBbXRzOiBbMCwgYW1vdW50T3V0XSwKCS8vICAgICAgICAgICAgICAgICBwb29sQmFsczogW2ZpbmFsQmFsYW5jZVgsIGZpbmFsQmFsYW5jZVldLAoJLy8gICAgICAgICAgICAgfQoJLy8gICAgICAgICApCglieXRlIDB4NzA0OGQwZWEgLy8gU3dhcChhZGRyZXNzLCh1aW50MjU2LHVpbnQyNTYpLCh1aW50MjU2LHVpbnQyNTYpLCh1aW50MjU2LHVpbnQyNTYpKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIDAgLy8gYW1vdW50WDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJY29uY2F0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJZnJhbWVfZGlnIDMgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfZGlnIDcgLy8gZmluYWxCYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIDggLy8gZmluYWxCYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQzMAoJLy8gdGhpcy51cGRhdGVSYXRpbygpCgljYWxsc3ViIHVwZGF0ZVJhdGlvCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQzMgoJLy8gcmV0dXJuIGFtb3VudE91dDsKCWZyYW1lX2RpZyAzIC8vIGFtb3VudE91dDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiA4CglyZXRzdWIKCmFiaV9yb3V0ZV9zd2FwWXRvWDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gbWluQW1vdW50WDogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGFtb3VudFk6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHN3YXBZdG9YKHVpbnQyNTYsdWludDI1Nil1aW50MjU2CgljYWxsc3ViIHN3YXBZdG9YCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBzd2FwWXRvWCh1aW50MjU2LHVpbnQyNTYpdWludDI1NgovLwovLyBTd2FwIHktdG9rZW4gZm9yIHgtdG9rZW4KLy8gQHBhcmFtIGFtb3VudFkgYW1vdW50IG9mIHktdG9rZW4gYXBwcm92ZWQgZm9yIHN3YXAKLy8gQHBhcmFtIG1pbkFtb3VudFggbWluaW11bSBhbW91bnQgb2YgeC10b2tlbiByZXF1aXJlZCBmb3IgdGhpcyB0eG4gdG8gYmUgc3VjY2Vzc2Z1bAovLyBAcmV0dXJucyBhbW91bnQgb2YgeC10b2tlbiBnaXZlbiBvdXQgaW4gZXhjaGFuZ2UgZm9yIHgtdG9rZW4Kc3dhcFl0b1g6Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiA4CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQ0MgoJLy8gYXNzZXJ0KHRoaXMudHJhbnNmZXJZRnJvbSh0aGlzLnR4bi5zZW5kZXIsIHRoaXMuYXBwLmFkZHJlc3MsIGFtb3VudFkpKQoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudFk6IHVpbnQyNTYKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgl0eG4gU2VuZGVyCgljYWxsc3ViIHRyYW5zZmVyWUZyb20KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo0NDQKCS8vIGJhbGFuY2VZID0gdGhpcy5nZXRUb2tlbllCYWxhbmNlKCkKCWNhbGxzdWIgZ2V0VG9rZW5ZQmFsYW5jZQoJZnJhbWVfYnVyeSAwIC8vIGJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo0NDUKCS8vIGJhbGFuY2VYID0gdGhpcy5nZXRUb2tlblhCYWxhbmNlKCkKCWNhbGxzdWIgZ2V0VG9rZW5YQmFsYW5jZQoJZnJhbWVfYnVyeSAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo0NDcKCS8vIGFzc2VydChiYWxhbmNlWCA+IDx1aW50MjU2PjAsIGJhbGFuY2VYID4gbWluQW1vdW50WCkKCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIC0yIC8vIG1pbkFtb3VudFg6IHVpbnQyNTYKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDQ4CgkvLyBhc3NlcnQoYmFsYW5jZVkgPiA8dWludDI1Nj4wKQoJZnJhbWVfZGlnIDAgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj4KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo0NTAKCS8vIGFtb3VudE91dCA9IHRoaXMuY29tcHV0ZU91dFRva2VucygKCS8vICAgICAgICAgICAgIGFtb3VudFksCgkvLyAgICAgICAgICAgICBiYWxhbmNlWSAtIGFtb3VudFksCgkvLyAgICAgICAgICAgICBiYWxhbmNlWCwKCS8vICAgICAgICAgICAgIHRoaXMuZmVlLnZhbHVlLnN3YXBGZWUKCS8vICAgICAgICAgKQoJYnl0ZSAweDY2NjU2NSAvLyAiZmVlIgoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglmcmFtZV9kaWcgMCAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRZOiB1aW50MjU2CgliLQoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglmcmFtZV9kaWcgLTEgLy8gYW1vdW50WTogdWludDI1NgoJY2FsbHN1YiBjb21wdXRlT3V0VG9rZW5zCglmcmFtZV9idXJ5IDIgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo0NTcKCS8vIGFzc2VydChhbW91bnRPdXQgPiA8dWludDI1Nj4wLCBhbW91bnRPdXQgPj0gbWluQW1vdW50WCwgYW1vdW50T3V0IDwgYmFsYW5jZVgpCglmcmFtZV9kaWcgMiAvLyBhbW91bnRPdXQ6IHVuc2FmZSB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj4KCWFzc2VydAoJZnJhbWVfZGlnIDIgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIC0yIC8vIG1pbkFtb3VudFg6IHVpbnQyNTYKCWI+PQoJYXNzZXJ0CglmcmFtZV9kaWcgMiAvLyBhbW91bnRPdXQ6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWI8Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDU5CgkvLyBwbGF0Zm9ybUZlZSA9IHRoaXMuY29tcHV0ZVBsYXRmb3JtRmVlKAoJLy8gICAgICAgICAgICAgYW1vdW50WSwKCS8vICAgICAgICAgICAgIGJhbGFuY2VZIC0gYW1vdW50WSwKCS8vICAgICAgICAgICAgIGJhbGFuY2VYLAoJLy8gICAgICAgICApCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIDAgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gYW1vdW50WTogdWludDI1NgoJYi0KCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudFk6IHVpbnQyNTYKCWNhbGxzdWIgY29tcHV0ZVBsYXRmb3JtRmVlCglmcmFtZV9idXJ5IDMgLy8gcGxhdGZvcm1GZWU6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQ2NQoJLy8gYXNzZXJ0KHRoaXMudHJhbnNmZXJYVG8odGhpcy50eG4uc2VuZGVyLCBhbW91bnRPdXQpKQoJZnJhbWVfZGlnIDIgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgl0eG4gU2VuZGVyCgljYWxsc3ViIHRyYW5zZmVyWFRvCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDY2CgkvLyBhc3NlcnQodGhpcy50cmFuc2ZlclhUbyh0aGlzLm1hbmFnZXIudmFsdWUsIHBsYXRmb3JtRmVlKSkKCWZyYW1lX2RpZyAzIC8vIHBsYXRmb3JtRmVlOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJY2FsbHN1YiB0cmFuc2ZlclhUbwoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQ2OAoJLy8gaW5uZXJUeG5zQ291bnQgPSAyCglpbnQgMgoJZnJhbWVfYnVyeSA0IC8vIGlubmVyVHhuc0NvdW50OiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDY5CgkvLyBpbm5lclR4bnNGZWUgPSBpbm5lclR4bnNDb3VudCAqIGdsb2JhbHMubWluVHhuRmVlCglpbnQgMiAvLyBpbm5lclR4bnNDb3VudDogdWludDY0CglnbG9iYWwgTWluVHhuRmVlCgkqCglmcmFtZV9idXJ5IDUgLy8gaW5uZXJUeG5zRmVlOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDcwCgkvLyBmaW5hbEJhbGFuY2VYID0gYmFsYW5jZVggLSBhbW91bnRPdXQgLSBwbGF0Zm9ybUZlZSAtIDx1aW50MjU2PmlubmVyVHhuc0ZlZQoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMiAvLyBhbW91bnRPdXQ6IHVuc2FmZSB1aW50MjU2CgliLQoJZnJhbWVfZGlnIDMgLy8gcGxhdGZvcm1GZWU6IHVuc2FmZSB1aW50MjU2CgliLQoJZnJhbWVfZGlnIDUgLy8gaW5uZXJUeG5zRmVlOiB1aW50NjQKCWl0b2IKCWItCglmcmFtZV9idXJ5IDYgLy8gZmluYWxCYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDcxCgkvLyBmaW5hbEJhbGFuY2VZID0gYmFsYW5jZVkKCWZyYW1lX2RpZyAwIC8vIGJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfYnVyeSA3IC8vIGZpbmFsQmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQ3MwoJLy8gdGhpcy5Td2FwLmxvZygKCS8vICAgICAgICAgICAgIHsKCS8vICAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgICAgICBpbkFtdHM6IFswLCBhbW91bnRZXSwKCS8vICAgICAgICAgICAgICAgICBvdXRBbXRzOiBbYW1vdW50T3V0LCAwXSwKCS8vICAgICAgICAgICAgICAgICBwb29sQmFsczogW2ZpbmFsQmFsYW5jZVgsIGZpbmFsQmFsYW5jZVldLAoJLy8gICAgICAgICAgICAgfQoJLy8gICAgICAgICApCglieXRlIDB4NzA0OGQwZWEgLy8gU3dhcChhZGRyZXNzLCh1aW50MjU2LHVpbnQyNTYpLCh1aW50MjU2LHVpbnQyNTYpLCh1aW50MjU2LHVpbnQyNTYpKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRZOiB1aW50MjU2Cgljb25jYXQKCWNvbmNhdAoJZnJhbWVfZGlnIDIgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2RpZyA2IC8vIGZpbmFsQmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyA3IC8vIGZpbmFsQmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo0ODIKCS8vIHRoaXMudXBkYXRlUmF0aW8oKQoJY2FsbHN1YiB1cGRhdGVSYXRpbwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo0ODQKCS8vIHJldHVybiBhbW91bnRPdXQ7CglmcmFtZV9kaWcgMiAvLyBhbW91bnRPdXQ6IHVuc2FmZSB1aW50MjU2CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gNwoJcmV0c3ViCgpjcmVhdGVfTm9PcDoKCW1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgllcnIKCmNhbGxfTm9PcDoKCW1ldGhvZCAic2V0TWFuYWdlcihhZGRyZXNzKWJvb2wiCgltZXRob2QgImluaXRpYWxpemUoYnl0ZVszMl0sYnl0ZVs4XSx1aW50OCx1aW50MjU2LGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAiYXJjMjAwX25hbWUoKWJ5dGVbMzJdIgoJbWV0aG9kICJhcmMyMDBfc3ltYm9sKClieXRlWzhdIgoJbWV0aG9kICJhcmMyMDBfZGVjaW1hbHMoKXVpbnQ4IgoJbWV0aG9kICJhcmMyMDBfdG90YWxTdXBwbHkoKXVpbnQyNTYiCgltZXRob2QgImFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2IgoJbWV0aG9kICJoYXNCYWxhbmNlKGFkZHJlc3MpYm9vbCIKCW1ldGhvZCAiaGFzQWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcylib29sIgoJbWV0aG9kICJhcmMyMDBfYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcyl1aW50MjU2IgoJbWV0aG9kICJhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wiCgltZXRob2QgImFyYzIwMF9hcHByb3ZlKGFkZHJlc3MsdWludDI1Nilib29sIgoJbWV0aG9kICJhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wiCgltZXRob2QgInBvb2xJbml0aWFsaXplKGJ5dGVbMzJdLGJ5dGVbOF0sYXBwbGljYXRpb24pdm9pZCIKCW1ldGhvZCAic2V0RmVlQ29udHJvbGxlcihhZGRyZXNzKWJvb2wiCgltZXRob2QgInNldEZlZXModWludDI1Nilib29sIgoJbWV0aG9kICJzZXRQbGF0Zm9ybUZlZXModWludDI1Nilib29sIgoJbWV0aG9kICJyZWdpc3Rlck9ubGluZShieXRlW10sYnl0ZVtdLGJ5dGVbXSx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJyZWdpc3Rlck9mZmxpbmUoKXZvaWQiCgltZXRob2QgImdldFJhdGlvKCl1aW50MjU2IgoJbWV0aG9kICJhZGRMaXF1aWRpdHkocGF5LHVpbnQyNTYpYm9vbCIKCW1ldGhvZCAicmVtb3ZlTGlxdWlkaXR5KHVpbnQyNTYpYm9vbCIKCW1ldGhvZCAic3dhcFh0b1kocGF5LHVpbnQyNTYpdWludDI1NiIKCW1ldGhvZCAic3dhcFl0b1godWludDI1Nix1aW50MjU2KXVpbnQyNTYiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfc2V0TWFuYWdlciBhYmlfcm91dGVfaW5pdGlhbGl6ZSBhYmlfcm91dGVfYXJjMjAwX25hbWUgYWJpX3JvdXRlX2FyYzIwMF9zeW1ib2wgYWJpX3JvdXRlX2FyYzIwMF9kZWNpbWFscyBhYmlfcm91dGVfYXJjMjAwX3RvdGFsU3VwcGx5IGFiaV9yb3V0ZV9hcmMyMDBfYmFsYW5jZU9mIGFiaV9yb3V0ZV9oYXNCYWxhbmNlIGFiaV9yb3V0ZV9oYXNBbGxvd2FuY2UgYWJpX3JvdXRlX2FyYzIwMF9hbGxvd2FuY2UgYWJpX3JvdXRlX2FyYzIwMF90cmFuc2ZlciBhYmlfcm91dGVfYXJjMjAwX2FwcHJvdmUgYWJpX3JvdXRlX2FyYzIwMF90cmFuc2ZlckZyb20gYWJpX3JvdXRlX3Bvb2xJbml0aWFsaXplIGFiaV9yb3V0ZV9zZXRGZWVDb250cm9sbGVyIGFiaV9yb3V0ZV9zZXRGZWVzIGFiaV9yb3V0ZV9zZXRQbGF0Zm9ybUZlZXMgYWJpX3JvdXRlX3JlZ2lzdGVyT25saW5lIGFiaV9yb3V0ZV9yZWdpc3Rlck9mZmxpbmUgYWJpX3JvdXRlX2dldFJhdGlvIGFiaV9yb3V0ZV9hZGRMaXF1aWRpdHkgYWJpX3JvdXRlX3JlbW92ZUxpcXVpZGl0eSBhYmlfcm91dGVfc3dhcFh0b1kgYWJpX3JvdXRlX3N3YXBZdG9YCgllcnIKCmNhbGxfVXBkYXRlQXBwbGljYXRpb246CgltZXRob2QgInVwZGF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uCgllcnIKCmNhbGxfRGVsZXRlQXBwbGljYXRpb246CgltZXRob2QgImRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AlgoArc200PoolV02",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setManager",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "initialize",
        "desc": "Initialize ARC200",
        "args": [
          {
            "name": "name",
            "type": "byte[32]",
            "desc": "token name"
          },
          {
            "name": "symbol",
            "type": "byte[8]",
            "desc": "token symbol"
          },
          {
            "name": "decimals",
            "type": "uint8",
            "desc": "number of decimals"
          },
          {
            "name": "totalSupply",
            "type": "uint256",
            "desc": "total supply of tokens"
          },
          {
            "name": "mintTo",
            "type": "address",
            "desc": "initial mint to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc200_name",
        "desc": "The name of the token",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "byte[32]",
          "desc": "The name of the token"
        }
      },
      {
        "name": "arc200_symbol",
        "desc": "Returns the symbol of the token",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "byte[8]",
          "desc": "The symbol of the token"
        }
      },
      {
        "name": "arc200_decimals",
        "desc": "Returns the decimals of the token",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint8",
          "desc": "The decimals of the token"
        }
      },
      {
        "name": "arc200_totalSupply",
        "desc": "Returns the total supply of the token",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint256",
          "desc": "The total supply of the token"
        }
      },
      {
        "name": "arc200_balanceOf",
        "desc": "Returns the current balance of the owner of the token",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address",
            "desc": "The address of the owner of the token"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "The current balance of the holder of the token"
        }
      },
      {
        "name": "hasBalance",
        "desc": "Check if balance box exists",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address",
            "desc": "The address of the owner"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`if balance box exists"
        }
      },
      {
        "name": "hasAllowance",
        "desc": "Check if allowance box exists",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address",
            "desc": "The address of the owner"
          },
          {
            "name": "spender",
            "type": "address",
            "desc": "The address of the spender"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`if allowance box exists"
        }
      },
      {
        "name": "arc200_allowance",
        "desc": "Returns the current allowance of the spender of the tokens of the owner",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "The remaining allowance"
        }
      },
      {
        "name": "arc200_transfer",
        "desc": "Transfers tokens",
        "args": [
          {
            "name": "to",
            "type": "address",
            "desc": "The destination of the transfer"
          },
          {
            "name": "value",
            "type": "uint256",
            "desc": "Amount of tokens to transfer"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "Success"
        }
      },
      {
        "name": "arc200_approve",
        "desc": "Approve spender for a token",
        "args": [
          {
            "name": "spender",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "Success"
        }
      },
      {
        "name": "arc200_transferFrom",
        "desc": "Transfers tokens from source to destination as approved spender",
        "args": [
          {
            "name": "from",
            "type": "address",
            "desc": "The source  of the transfer"
          },
          {
            "name": "to",
            "type": "address",
            "desc": "The destination of the transfer"
          },
          {
            "name": "value",
            "type": "uint256",
            "desc": "Amount of tokens to transfer"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "Success"
        },
        "events": [
          {
            "name": "arc200_Transfer",
            "args": [
              {
                "name": "from",
                "type": "address"
              },
              {
                "name": "to",
                "type": "address"
              },
              {
                "name": "value",
                "type": "uint256"
              }
            ],
            "desc": "Transfer of tokens"
          }
        ]
      },
      {
        "name": "deleteApplication",
        "desc": "Delete the app if balance total supply has been burned",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "poolInitialize",
        "desc": "Initialize the pool",
        "args": [
          {
            "name": "name",
            "type": "byte[32]",
            "desc": "name of the lp token"
          },
          {
            "name": "symbol",
            "type": "byte[8]",
            "desc": "symbol of the lp token"
          },
          {
            "name": "tokenYAppId",
            "type": "application",
            "desc": "appid (or id) of the y-token"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFeeController",
        "desc": "Update fee-controller address",
        "args": [
          {
            "name": "feeController",
            "type": "address",
            "desc": "new fee-controller address"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`if success"
        }
      },
      {
        "name": "setFees",
        "desc": "Update the swap-fee of the pool",
        "args": [
          {
            "name": "fee",
            "type": "uint256",
            "desc": "updated swap-fee"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`if success"
        }
      },
      {
        "name": "setPlatformFees",
        "desc": "Update the platform-fee of the pool",
        "args": [
          {
            "name": "fee",
            "type": "uint256",
            "desc": "updated platform-fee"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`if success"
        }
      },
      {
        "name": "registerOnline",
        "desc": "Bring the pool account online for consensus participation",
        "args": [
          {
            "name": "selectionPk",
            "type": "byte[]"
          },
          {
            "name": "stateProofPk",
            "type": "byte[]"
          },
          {
            "name": "votePk",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerOffline",
        "desc": "Bring the pool account offline i.e. stop consensus participation",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getRatio",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "addLiquidity",
        "desc": "Add liquidity to the pool",
        "args": [
          {
            "name": "payTxnX",
            "type": "pay",
            "desc": "x-token txn"
          },
          {
            "name": "amountY",
            "type": "uint256",
            "desc": "amount of y-token approved to the pool"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`if success"
        },
        "events": [
          {
            "name": "Deposit",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "inAmts",
                "type": "(uint256,uint256)"
              },
              {
                "name": "outLpt",
                "type": "uint256"
              },
              {
                "name": "poolBals",
                "type": "(uint256,uint256)"
              }
            ],
            "desc": "Deposit event logged when user adds liquidity"
          }
        ]
      },
      {
        "name": "removeLiquidity",
        "desc": "Remove liquidity from the pool",
        "args": [
          {
            "name": "lptAmount",
            "type": "uint256",
            "desc": "amount of lp-token to burn"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`of success"
        },
        "events": [
          {
            "name": "Withdraw",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "inLpt",
                "type": "uint256"
              },
              {
                "name": "outAmts",
                "type": "(uint256,uint256)"
              },
              {
                "name": "poolBals",
                "type": "(uint256,uint256)"
              }
            ],
            "desc": "Withdraw event logged when user removes liquidity"
          }
        ]
      },
      {
        "name": "swapXtoY",
        "desc": "Swap x-token for y-token",
        "args": [
          {
            "name": "payTxnX",
            "type": "pay",
            "desc": "x-token pay txn"
          },
          {
            "name": "minAmountY",
            "type": "uint256",
            "desc": "minimum amount of y-token required for this txn to be successful"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "amount of y-token given out in exchange for x-token"
        },
        "events": [
          {
            "name": "Swap",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "inAmts",
                "type": "(uint256,uint256)"
              },
              {
                "name": "outAmts",
                "type": "(uint256,uint256)"
              },
              {
                "name": "poolBals",
                "type": "(uint256,uint256)"
              }
            ],
            "desc": "Swap event logged on swap"
          }
        ]
      },
      {
        "name": "swapYtoX",
        "desc": "Swap y-token for x-token",
        "args": [
          {
            "name": "amountY",
            "type": "uint256",
            "desc": "amount of y-token approved for swap"
          },
          {
            "name": "minAmountX",
            "type": "uint256",
            "desc": "minimum amount of x-token required for this txn to be successful"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "amount of x-token given out in exchange for x-token"
        },
        "events": [
          {
            "name": "Swap",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "inAmts",
                "type": "(uint256,uint256)"
              },
              {
                "name": "outAmts",
                "type": "(uint256,uint256)"
              },
              {
                "name": "poolBals",
                "type": "(uint256,uint256)"
              }
            ],
            "desc": "Swap event logged on swap"
          }
        ]
      }
    ],
    "events": [
      {
        "name": "arc200_Transfer",
        "args": [
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "desc": "Transfer of tokens"
      },
      {
        "name": "arc200_Approval",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "desc": "Approval of tokens"
      },
      {
        "name": "Swap",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "inAmts",
            "type": "(uint256,uint256)"
          },
          {
            "name": "outAmts",
            "type": "(uint256,uint256)"
          },
          {
            "name": "poolBals",
            "type": "(uint256,uint256)"
          }
        ],
        "desc": "Swap event logged on swap"
      },
      {
        "name": "Deposit",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "inAmts",
            "type": "(uint256,uint256)"
          },
          {
            "name": "outLpt",
            "type": "uint256"
          },
          {
            "name": "poolBals",
            "type": "(uint256,uint256)"
          }
        ],
        "desc": "Deposit event logged when user adds liquidity"
      },
      {
        "name": "Withdraw",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "inLpt",
            "type": "uint256"
          },
          {
            "name": "outAmts",
            "type": "(uint256,uint256)"
          },
          {
            "name": "poolBals",
            "type": "(uint256,uint256)"
          }
        ],
        "desc": "Withdraw event logged when user removes liquidity"
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AlgoArc200PoolV02 smart contract.
 */
export type AlgoArc200PoolV02 = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: {
        manager: string
      }
      argsTuple: [manager: string]
      returns: void
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'setManager(address)bool' | 'setManager', {
      argsObj: {
        manager: string
      }
      argsTuple: [manager: string]
      returns: boolean
    }>
    & Record<'initialize(byte[32],byte[8],uint8,uint256,address)void' | 'initialize', {
      argsObj: {
        /**
         * token name
         */
        name: Uint8Array
        /**
         * token symbol
         */
        symbol: Uint8Array
        /**
         * number of decimals
         */
        decimals: number
        /**
         * total supply of tokens
         */
        totalSupply: bigint | number
        /**
         * initial mint to
         */
        mintTo: string
      }
      argsTuple: [name: Uint8Array, symbol: Uint8Array, decimals: number, totalSupply: bigint | number, mintTo: string]
      returns: void
    }>
    & Record<'arc200_name()byte[32]' | 'arc200_name', {
      argsObj: {
      }
      argsTuple: []
      /**
       * The name of the token
       */
      returns: Uint8Array
    }>
    & Record<'arc200_symbol()byte[8]' | 'arc200_symbol', {
      argsObj: {
      }
      argsTuple: []
      /**
       * The symbol of the token
       */
      returns: Uint8Array
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: {
      }
      argsTuple: []
      /**
       * The decimals of the token
       */
      returns: number
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: {
      }
      argsTuple: []
      /**
       * The total supply of the token
       */
      returns: bigint
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: {
        /**
         * The address of the owner of the token
         */
        owner: string
      }
      argsTuple: [owner: string]
      /**
       * The current balance of the holder of the token
       */
      returns: bigint
    }>
    & Record<'hasBalance(address)bool' | 'hasBalance', {
      argsObj: {
        /**
         * The address of the owner
         */
        owner: string
      }
      argsTuple: [owner: string]
      /**
       * `true`if balance box exists
       */
      returns: boolean
    }>
    & Record<'hasAllowance(address,address)bool' | 'hasAllowance', {
      argsObj: {
        /**
         * The address of the owner
         */
        owner: string
        /**
         * The address of the spender
         */
        spender: string
      }
      argsTuple: [owner: string, spender: string]
      /**
       * `true`if allowance box exists
       */
      returns: boolean
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: {
        owner: string
        spender: string
      }
      argsTuple: [owner: string, spender: string]
      /**
       * The remaining allowance
       */
      returns: bigint
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: {
        /**
         * The destination of the transfer
         */
        to: string
        /**
         * Amount of tokens to transfer
         */
        value: bigint | number
      }
      argsTuple: [to: string, value: bigint | number]
      /**
       * Success
       */
      returns: boolean
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: {
        spender: string
        value: bigint | number
      }
      argsTuple: [spender: string, value: bigint | number]
      /**
       * Success
       */
      returns: boolean
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: {
        /**
         * The source  of the transfer
         */
        from: string
        /**
         * The destination of the transfer
         */
        to: string
        /**
         * Amount of tokens to transfer
         */
        value: bigint | number
      }
      argsTuple: [from: string, to: string, value: bigint | number]
      /**
       * Success
       */
      returns: boolean
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'poolInitialize(byte[32],byte[8],application)void' | 'poolInitialize', {
      argsObj: {
        /**
         * name of the lp token
         */
        name: Uint8Array
        /**
         * symbol of the lp token
         */
        symbol: Uint8Array
        /**
         * appid (or id) of the y-token
         */
        tokenYAppId: number | bigint
      }
      argsTuple: [name: Uint8Array, symbol: Uint8Array, tokenYAppId: number | bigint]
      returns: void
    }>
    & Record<'setFeeController(address)bool' | 'setFeeController', {
      argsObj: {
        /**
         * new fee-controller address
         */
        feeController: string
      }
      argsTuple: [feeController: string]
      /**
       * `true`if success
       */
      returns: boolean
    }>
    & Record<'setFees(uint256)bool' | 'setFees', {
      argsObj: {
        /**
         * updated swap-fee
         */
        fee: bigint | number
      }
      argsTuple: [fee: bigint | number]
      /**
       * `true`if success
       */
      returns: boolean
    }>
    & Record<'setPlatformFees(uint256)bool' | 'setPlatformFees', {
      argsObj: {
        /**
         * updated platform-fee
         */
        fee: bigint | number
      }
      argsTuple: [fee: bigint | number]
      /**
       * `true`if success
       */
      returns: boolean
    }>
    & Record<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void' | 'registerOnline', {
      argsObj: {
        selectionPk: Uint8Array
        stateProofPk: Uint8Array
        votePk: Uint8Array
        voteFirst: bigint | number
        voteLast: bigint | number
        voteKeyDilution: bigint | number
      }
      argsTuple: [selectionPk: Uint8Array, stateProofPk: Uint8Array, votePk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
      returns: void
    }>
    & Record<'registerOffline()void' | 'registerOffline', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getRatio()uint256' | 'getRatio', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'addLiquidity(pay,uint256)bool' | 'addLiquidity', {
      argsObj: {
        /**
         * x-token txn
         */
        payTxnX: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * amount of y-token approved to the pool
         */
        amountY: bigint | number
      }
      argsTuple: [payTxnX: TransactionToSign | Transaction | Promise<SendTransactionResult>, amountY: bigint | number]
      /**
       * `true`if success
       */
      returns: boolean
    }>
    & Record<'removeLiquidity(uint256)bool' | 'removeLiquidity', {
      argsObj: {
        /**
         * amount of lp-token to burn
         */
        lptAmount: bigint | number
      }
      argsTuple: [lptAmount: bigint | number]
      /**
       * `true`of success
       */
      returns: boolean
    }>
    & Record<'swapXtoY(pay,uint256)uint256' | 'swapXtoY', {
      argsObj: {
        /**
         * x-token pay txn
         */
        payTxnX: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * minimum amount of y-token required for this txn to be successful
         */
        minAmountY: bigint | number
      }
      argsTuple: [payTxnX: TransactionToSign | Transaction | Promise<SendTransactionResult>, minAmountY: bigint | number]
      /**
       * amount of y-token given out in exchange for x-token
       */
      returns: bigint
    }>
    & Record<'swapYtoX(uint256,uint256)uint256' | 'swapYtoX', {
      argsObj: {
        /**
         * amount of y-token approved for swap
         */
        amountY: bigint | number
        /**
         * minimum amount of x-token required for this txn to be successful
         */
        minAmountX: bigint | number
      }
      argsTuple: [amountY: bigint | number, minAmountX: bigint | number]
      /**
       * amount of x-token given out in exchange for x-token
       */
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'manager'?: BinaryState
      'fee_controller'?: BinaryState
      'ratio'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AlgoArc200PoolV02Sig = keyof AlgoArc200PoolV02['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AlgoArc200PoolV02Sig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AlgoArc200PoolV02 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AlgoArc200PoolV02Sig> = AlgoArc200PoolV02['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoArc200PoolV02 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoArc200PoolV02Sig> = AlgoArc200PoolV02['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AlgoArc200PoolV02CreateCalls = (typeof AlgoArc200PoolV02CallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AlgoArc200PoolV02CreateCallParams =
  | (TypedCallParams<'createApplication(address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AlgoArc200PoolV02UpdateCalls = (typeof AlgoArc200PoolV02CallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AlgoArc200PoolV02UpdateCallParams =
  | TypedCallParams<'updateApplication()void'>
/**
 * A factory for available 'delete' calls
 */
export type AlgoArc200PoolV02DeleteCalls = (typeof AlgoArc200PoolV02CallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AlgoArc200PoolV02DeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoArc200PoolV02DeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AlgoArc200PoolV02CreateCalls) => AlgoArc200PoolV02CreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AlgoArc200PoolV02UpdateCalls) => AlgoArc200PoolV02UpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AlgoArc200PoolV02DeleteCalls) => AlgoArc200PoolV02DeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AlgoArc200PoolV02CallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AlgoArc200PoolV02 smart contract using the createApplication(address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.manager],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the AlgoArc200PoolV02 smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the AlgoArc200PoolV02 smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setManager(address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setManager(args: MethodArgs<'setManager(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setManager(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.manager],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initialize(byte[32],byte[8],uint8,uint256,address)void ABI method
   *
   * Initialize ARC200
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initialize(args: MethodArgs<'initialize(byte[32],byte[8],uint8,uint256,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initialize(byte[32],byte[8],uint8,uint256,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.symbol, args.decimals, args.totalSupply, args.mintTo],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * The name of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_name()byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * Returns the symbol of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_symbol()byte[8]' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * Returns the decimals of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_decimals()uint8' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * Returns the total supply of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_totalSupply()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * Returns the current balance of the owner of the token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_balanceOf(address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the hasBalance(address)bool ABI method
   *
   * Check if balance box exists
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hasBalance(args: MethodArgs<'hasBalance(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hasBalance(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the hasAllowance(address,address)bool ABI method
   *
   * Check if allowance box exists
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hasAllowance(args: MethodArgs<'hasAllowance(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hasAllowance(address,address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_allowance(address,address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * Transfers tokens
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_transfer(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.to, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * Approve spender for a token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_approve(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.spender, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.from, args.to, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the poolInitialize(byte[32],byte[8],application)void ABI method
   *
   * Initialize the pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static poolInitialize(args: MethodArgs<'poolInitialize(byte[32],byte[8],application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'poolInitialize(byte[32],byte[8],application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.symbol, args.tokenYAppId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setFeeController(address)bool ABI method
   *
   * Update fee-controller address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFeeController(args: MethodArgs<'setFeeController(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFeeController(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.feeController],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setFees(uint256)bool ABI method
   *
   * Update the swap-fee of the pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFees(args: MethodArgs<'setFees(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFees(uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setPlatformFees(uint256)bool ABI method
   *
   * Update the platform-fee of the pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPlatformFees(args: MethodArgs<'setPlatformFees(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setPlatformFees(uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * Bring the pool account online for consensus participation
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.selectionPk, args.stateProofPk, args.votePk, args.voteFirst, args.voteLast, args.voteKeyDilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerOffline()void ABI method
   *
   * Bring the pool account offline i.e. stop consensus participation
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOffline(args: MethodArgs<'registerOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerOffline()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getRatio()uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getRatio(args: MethodArgs<'getRatio()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getRatio()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(pay,uint256)bool ABI method
   *
   * Add liquidity to the pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addLiquidity(args: MethodArgs<'addLiquidity(pay,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addLiquidity(pay,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxnX, args.amountY],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(uint256)bool ABI method
   *
   * Remove liquidity from the pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeLiquidity(args: MethodArgs<'removeLiquidity(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeLiquidity(uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.lptAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swapXtoY(pay,uint256)uint256 ABI method
   *
   * Swap x-token for y-token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swapXtoY(args: MethodArgs<'swapXtoY(pay,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swapXtoY(pay,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxnX, args.minAmountY],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swapYtoX(uint256,uint256)uint256 ABI method
   *
   * Swap y-token for x-token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swapYtoX(args: MethodArgs<'swapYtoX(uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swapYtoX(uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.amountY, args.minAmountX],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AlgoArc200PoolV02 smart contract
 */
export class AlgoArc200PoolV02Client {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AlgoArc200PoolV02Client`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AlgoArc200PoolV02['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AlgoArc200PoolV02 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AlgoArc200PoolV02DeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AlgoArc200PoolV02CallFactory.create)
    const updateArgs = params.updateCall?.(AlgoArc200PoolV02CallFactory.update)
    const deleteArgs = params.deleteCall?.(AlgoArc200PoolV02CallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AlgoArc200PoolV02 smart contract using the createApplication(address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(address)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AlgoArc200PoolV02CallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the AlgoArc200PoolV02 smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'updateApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.update(AlgoArc200PoolV02CallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the AlgoArc200PoolV02 smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'deleteApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.delete(AlgoArc200PoolV02CallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgoArc200PoolV02 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setManager(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setManager(args: MethodArgs<'setManager(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.setManager(args, params))
  }

  /**
   * Calls the initialize(byte[32],byte[8],uint8,uint256,address)void ABI method.
   *
   * Initialize ARC200
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initialize(args: MethodArgs<'initialize(byte[32],byte[8],uint8,uint256,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.initialize(args, params))
  }

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * The name of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The name of the token
   */
  public arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200Name(args, params))
  }

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * Returns the symbol of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The symbol of the token
   */
  public arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200Symbol(args, params))
  }

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The decimals of the token
   */
  public arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200Decimals(args, params))
  }

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * Returns the total supply of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The total supply of the token
   */
  public arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200TotalSupply(args, params))
  }

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * Returns the current balance of the owner of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The current balance of the holder of the token
   */
  public arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200BalanceOf(args, params))
  }

  /**
   * Calls the hasBalance(address)bool ABI method.
   *
   * Check if balance box exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: `true`if balance box exists
   */
  public hasBalance(args: MethodArgs<'hasBalance(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.hasBalance(args, params))
  }

  /**
   * Calls the hasAllowance(address,address)bool ABI method.
   *
   * Check if allowance box exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: `true`if allowance box exists
   */
  public hasAllowance(args: MethodArgs<'hasAllowance(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.hasAllowance(args, params))
  }

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The remaining allowance
   */
  public arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200Allowance(args, params))
  }

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * Transfers tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Success
   */
  public arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200Transfer(args, params))
  }

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * Approve spender for a token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Success
   */
  public arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200Approve(args, params))
  }

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Success
   */
  public arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.arc200TransferFrom(args, params))
  }

  /**
   * Calls the poolInitialize(byte[32],byte[8],application)void ABI method.
   *
   * Initialize the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public poolInitialize(args: MethodArgs<'poolInitialize(byte[32],byte[8],application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.poolInitialize(args, params))
  }

  /**
   * Calls the setFeeController(address)bool ABI method.
   *
   * Update fee-controller address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: `true`if success
   */
  public setFeeController(args: MethodArgs<'setFeeController(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.setFeeController(args, params))
  }

  /**
   * Calls the setFees(uint256)bool ABI method.
   *
   * Update the swap-fee of the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: `true`if success
   */
  public setFees(args: MethodArgs<'setFees(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.setFees(args, params))
  }

  /**
   * Calls the setPlatformFees(uint256)bool ABI method.
   *
   * Update the platform-fee of the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: `true`if success
   */
  public setPlatformFees(args: MethodArgs<'setPlatformFees(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.setPlatformFees(args, params))
  }

  /**
   * Calls the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Bring the pool account online for consensus participation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.registerOnline(args, params))
  }

  /**
   * Calls the registerOffline()void ABI method.
   *
   * Bring the pool account offline i.e. stop consensus participation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOffline(args: MethodArgs<'registerOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.registerOffline(args, params))
  }

  /**
   * Calls the getRatio()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getRatio(args: MethodArgs<'getRatio()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.getRatio(args, params))
  }

  /**
   * Calls the addLiquidity(pay,uint256)bool ABI method.
   *
   * Add liquidity to the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: `true`if success
   */
  public addLiquidity(args: MethodArgs<'addLiquidity(pay,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.addLiquidity(args, params))
  }

  /**
   * Calls the removeLiquidity(uint256)bool ABI method.
   *
   * Remove liquidity from the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: `true`of success
   */
  public removeLiquidity(args: MethodArgs<'removeLiquidity(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.removeLiquidity(args, params))
  }

  /**
   * Calls the swapXtoY(pay,uint256)uint256 ABI method.
   *
   * Swap x-token for y-token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: amount of y-token given out in exchange for x-token
   */
  public swapXtoY(args: MethodArgs<'swapXtoY(pay,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.swapXtoY(args, params))
  }

  /**
   * Calls the swapYtoX(uint256,uint256)uint256 ABI method.
   *
   * Swap y-token for x-token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: amount of x-token given out in exchange for x-token
   */
  public swapYtoX(args: MethodArgs<'swapYtoX(uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoArc200PoolV02CallFactory.swapYtoX(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AlgoArc200PoolV02['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get manager() {
        return AlgoArc200PoolV02Client.getBinaryState(state, 'manager')
      },
      get fee_controller() {
        return AlgoArc200PoolV02Client.getBinaryState(state, 'fee_controller')
      },
      get ratio() {
        return AlgoArc200PoolV02Client.getBinaryState(state, 'ratio')
      },
    }
  }

  public compose(): AlgoArc200PoolV02Composer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setManager(args: MethodArgs<'setManager(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setManager(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initialize(args: MethodArgs<'initialize(byte[32],byte[8],uint8,uint256,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initialize(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Name(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Symbol(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Decimals(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200TotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200BalanceOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      hasBalance(args: MethodArgs<'hasBalance(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hasBalance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      hasAllowance(args: MethodArgs<'hasAllowance(address,address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hasAllowance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Allowance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200TransferFrom(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      poolInitialize(args: MethodArgs<'poolInitialize(byte[32],byte[8],application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.poolInitialize(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFeeController(args: MethodArgs<'setFeeController(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFeeController(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFees(args: MethodArgs<'setFees(uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFees(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPlatformFees(args: MethodArgs<'setPlatformFees(uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPlatformFees(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOnline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOffline(args: MethodArgs<'registerOffline()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOffline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getRatio(args: MethodArgs<'getRatio()uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getRatio(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addLiquidity(args: MethodArgs<'addLiquidity(pay,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addLiquidity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeLiquidity(args: MethodArgs<'removeLiquidity(uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeLiquidity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swapXtoY(args: MethodArgs<'swapXtoY(pay,uint256)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swapXtoY(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swapYtoX(args: MethodArgs<'swapYtoX(uint256,uint256)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swapYtoX(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AlgoArc200PoolV02Composer
  }
}
export type AlgoArc200PoolV02Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setManager(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setManager(args: MethodArgs<'setManager(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'setManager(address)bool'>]>

  /**
   * Calls the initialize(byte[32],byte[8],uint8,uint256,address)void ABI method.
   *
   * Initialize ARC200
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(args: MethodArgs<'initialize(byte[32],byte[8],uint8,uint256,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'initialize(byte[32],byte[8],uint8,uint256,address)void'>]>

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * The name of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_name()byte[32]'>]>

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * Returns the symbol of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_symbol()byte[8]'>]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_decimals()uint8'>]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * Returns the total supply of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_totalSupply()uint256'>]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * Returns the current balance of the owner of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_balanceOf(address)uint256'>]>

  /**
   * Calls the hasBalance(address)bool ABI method.
   *
   * Check if balance box exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasBalance(args: MethodArgs<'hasBalance(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'hasBalance(address)bool'>]>

  /**
   * Calls the hasAllowance(address,address)bool ABI method.
   *
   * Check if allowance box exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasAllowance(args: MethodArgs<'hasAllowance(address,address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'hasAllowance(address,address)bool'>]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_allowance(address,address)uint256'>]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * Transfers tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_transfer(address,uint256)bool'>]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * Approve spender for a token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_approve(address,uint256)bool'>]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'arc200_transferFrom(address,address,uint256)bool'>]>

  /**
   * Calls the poolInitialize(byte[32],byte[8],application)void ABI method.
   *
   * Initialize the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  poolInitialize(args: MethodArgs<'poolInitialize(byte[32],byte[8],application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'poolInitialize(byte[32],byte[8],application)void'>]>

  /**
   * Calls the setFeeController(address)bool ABI method.
   *
   * Update fee-controller address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFeeController(args: MethodArgs<'setFeeController(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'setFeeController(address)bool'>]>

  /**
   * Calls the setFees(uint256)bool ABI method.
   *
   * Update the swap-fee of the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFees(args: MethodArgs<'setFees(uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'setFees(uint256)bool'>]>

  /**
   * Calls the setPlatformFees(uint256)bool ABI method.
   *
   * Update the platform-fee of the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPlatformFees(args: MethodArgs<'setPlatformFees(uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'setPlatformFees(uint256)bool'>]>

  /**
   * Calls the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Bring the pool account online for consensus participation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the registerOffline()void ABI method.
   *
   * Bring the pool account offline i.e. stop consensus participation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOffline(args: MethodArgs<'registerOffline()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'registerOffline()void'>]>

  /**
   * Calls the getRatio()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRatio(args: MethodArgs<'getRatio()uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'getRatio()uint256'>]>

  /**
   * Calls the addLiquidity(pay,uint256)bool ABI method.
   *
   * Add liquidity to the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(args: MethodArgs<'addLiquidity(pay,uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'addLiquidity(pay,uint256)bool'>]>

  /**
   * Calls the removeLiquidity(uint256)bool ABI method.
   *
   * Remove liquidity from the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(args: MethodArgs<'removeLiquidity(uint256)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'removeLiquidity(uint256)bool'>]>

  /**
   * Calls the swapXtoY(pay,uint256)uint256 ABI method.
   *
   * Swap x-token for y-token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapXtoY(args: MethodArgs<'swapXtoY(pay,uint256)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'swapXtoY(pay,uint256)uint256'>]>

  /**
   * Calls the swapYtoX(uint256,uint256)uint256 ABI method.
   *
   * Swap y-token for x-token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapYtoX(args: MethodArgs<'swapYtoX(uint256,uint256)uint256'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'swapYtoX(uint256,uint256)uint256'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the AlgoArc200PoolV02 smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'updateApplication()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the AlgoArc200PoolV02 smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientCallCoreParams): AlgoArc200PoolV02Composer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgoArc200PoolV02 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AlgoArc200PoolV02Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AlgoArc200PoolV02Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoArc200PoolV02ComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<AlgoArc200PoolV02ComposerResults<TReturns>>
}
export type AlgoArc200PoolV02ComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AlgoArc200PoolV02ComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
