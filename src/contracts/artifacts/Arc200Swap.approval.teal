#pragma version 9

// This TEAL was generated by TEALScript v0.66.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication

NOT_IMPLEMENTED:
	err

// set_admin(account)void
abi_route_set_admin:
	// admin: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute set_admin(account)void
	callsub set_admin
	int 1
	return

set_admin:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0

	// src/contracts/arc200_swap.algo.ts:11
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// src/contracts/arc200_swap.algo.ts:12
	// this.admin.value = admin
	byte 0x61646d696e // "admin"
	frame_dig -1 // admin: account
	app_global_put
	retsub

// create_pool_token(pay)uint64
abi_route_create_pool_token:
	// The ABI return prefix
	byte 0x151f7c75

	// seed: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute create_pool_token(pay)uint64
	callsub create_pool_token
	itob
	concat
	log
	int 1
	return

create_pool_token:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1

	// src/contracts/arc200_swap.algo.ts:18
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// src/contracts/arc200_swap.algo.ts:19
	// verifyPayTxn(seed, { receiver: this.app.address, amount: { greaterThanEqualTo: 300_000 } })
	// verify receiver
	frame_dig -1 // seed: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // seed: pay
	gtxns Amount
	int 300_000
	>=
	assert

	// src/contracts/arc200_swap.algo.ts:20
	// assert(!this.pool_token.exists)
	txna Applications 0
	byte 0x706f6f6c5f746f6b656e // "pool_token"
	app_global_get_ex
	swap
	pop
	!
	assert

	// src/contracts/arc200_swap.algo.ts:22
	// this.pool_token.value = sendAssetCreation({
	//       configAssetName: 'VOI-VIA LPT',
	//       configAssetUnitName: 'LPT',
	//       configAssetTotal: TOTAL_SUPPLY,
	//       configAssetDecimals: 6,
	//       configAssetManager: this.app.address,
	//       configAssetReserve: this.app.address,
	//       fee: 1000
	//     })
	byte 0x706f6f6c5f746f6b656e // "pool_token"
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// src/contracts/arc200_swap.algo.ts:23
	// configAssetName: 'VOI-VIA LPT'
	byte 0x564f492d564941204c5054 // "VOI-VIA LPT"
	itxn_field ConfigAssetName

	// src/contracts/arc200_swap.algo.ts:24
	// configAssetUnitName: 'LPT'
	byte 0x4c5054 // "LPT"
	itxn_field ConfigAssetUnitName

	// src/contracts/arc200_swap.algo.ts:25
	// configAssetTotal: TOTAL_SUPPLY
	int 10_000_000_000_000_000
	itxn_field ConfigAssetTotal

	// src/contracts/arc200_swap.algo.ts:26
	// configAssetDecimals: 6
	int 6
	itxn_field ConfigAssetDecimals

	// src/contracts/arc200_swap.algo.ts:27
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// src/contracts/arc200_swap.algo.ts:28
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// src/contracts/arc200_swap.algo.ts:29
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

	// src/contracts/arc200_swap.algo.ts:32
	// return this.pool_token.value;
	byte 0x706f6f6c5f746f6b656e // "pool_token"
	app_global_get
	retsub

set_ratio:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 1

	// src/contracts/arc200_swap.algo.ts:38
	// this.ratio.value = wideRatio(
	//       [this.get_balance(), SCALE],
	//       [this.get_arc200_balance()]
	//     )
	byte 0x726174696f // "ratio"
	callsub get_balance
	int 10000
	mulw
	int 0
	callsub get_arc200_balance
	divmodw
	pop
	pop
	swap
	!
	assert
	app_global_put

	// src/contracts/arc200_swap.algo.ts:42
	// return this.ratio.value;
	byte 0x726174696f // "ratio"
	app_global_get
	retsub

// set_fees(uint64)void
abi_route_set_fees:
	// fee: uint64
	txna ApplicationArgs 1
	btoi

	// execute set_fees(uint64)void
	callsub set_fees
	int 1
	return

set_fees:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0

	// src/contracts/arc200_swap.algo.ts:51
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// src/contracts/arc200_swap.algo.ts:52
	// this.fee.value = fee
	byte 0x666565 // "fee"
	frame_dig -1 // fee: uint64
	app_global_put
	retsub

// createApplication()void
//
// // initialize values
abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

createApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// src/contracts/arc200_swap.algo.ts:63
	// this.admin.value = this.txn.sender
	byte 0x61646d696e // "admin"
	txn Sender
	app_global_put

	// src/contracts/arc200_swap.algo.ts:64
	// this.arc200_token.value = Application.fromID(6779767)
	byte 0x6172633230305f746f6b656e // "arc200_token"
	int 6779767
	app_global_put

	// src/contracts/arc200_swap.algo.ts:65
	// this.fee.value = 25
	byte 0x666565 // "fee"
	int 25
	app_global_put

	// src/contracts/arc200_swap.algo.ts:66
	// this.platform_fee.value = 25
	byte 0x706c6174666f726d5f666565 // "platform_fee"
	int 25
	app_global_put

	// src/contracts/arc200_swap.algo.ts:67
	// this.initialized.value = false
	byte 0x696e697469616c697a6564 // "initialized"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// updateApplication()void
//
// // allow admin to update the application
abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

updateApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// src/contracts/arc200_swap.algo.ts:72
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert
	retsub

tokens_to_mint_intial:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1

	// src/contracts/arc200_swap.algo.ts:78
	// return sqrt(a_amount * b_amount);
	frame_dig -1 // a_amount: uint64
	frame_dig -2 // b_amount: uint64
	*
	sqrt
	retsub

tokens_to_mint:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 5 1; byte 0x; dupn 2

	// src/contracts/arc200_swap.algo.ts:82
	// a_ratio = wideRatio([a_amount, SCALE], [a_supply])
	frame_dig -4 // a_amount: uint64
	int 10000
	mulw
	int 0
	frame_dig -2 // a_supply: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 0 // a_ratio: uint64

	// src/contracts/arc200_swap.algo.ts:83
	// b_ratio = wideRatio([b_amount, SCALE], [b_supply])
	frame_dig -5 // b_amount: uint64
	int 10000
	mulw
	int 0
	frame_dig -3 // b_supply: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 1 // b_ratio: uint64

	// src/contracts/arc200_swap.algo.ts:85
	// ratio = a_ratio < b_ratio ? a_ratio : b_ratio
	frame_dig 0 // a_ratio: uint64
	frame_dig 1 // b_ratio: uint64
	<
	bz ternary1_false
	frame_dig 0 // a_ratio: uint64
	b ternary1_end

ternary1_false:
	frame_dig 1 // b_ratio: uint64

ternary1_end:
	frame_bury 2 // ratio: uint64

	// src/contracts/arc200_swap.algo.ts:87
	// return wideRatio([ratio, issued], [SCALE]);
	frame_dig 2 // ratio: uint64
	frame_dig -1 // issued: uint64
	mulw
	int 0
	int 10000
	divmodw
	pop
	pop
	swap
	!
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

compute_token_withdraw_amount:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1

	// src/contracts/arc200_swap.algo.ts:91
	// return wideRatio([supply, amount], [issued]);
	frame_dig -2 // supply: uint64
	frame_dig -3 // amount: uint64
	mulw
	int 0
	frame_dig -1 // issued: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	retsub

compute_out_tokens:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1; byte 0x; dupn 3

	// src/contracts/arc200_swap.algo.ts:95
	// factor = SCALE - (this.fee.value + this.platform_fee.value)
	int 10000
	byte 0x666565 // "fee"
	app_global_get
	byte 0x706c6174666f726d5f666565 // "platform_fee"
	app_global_get
	+
	-
	frame_bury 0 // factor: uint64

	// src/contracts/arc200_swap.algo.ts:97
	// xf = <uint<256>>(
	//       <uint<256>>in_amount * <uint<256>>factor
	//     )
	frame_dig -1 // in_amount: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	frame_dig 0 // factor: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b*
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 1 // xf: uint256

	// src/contracts/arc200_swap.algo.ts:100
	// numerator = <uint<256>>(
	//       <uint<256>>xf * <uint<256>>out_supply
	//     )
	frame_dig 1 // xf: uint256
	frame_dig -3 // out_supply: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b*
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 2 // numerator: uint256

	// src/contracts/arc200_swap.algo.ts:103
	// denominator = <uint<256>>(
	//       (<uint<256>>in_supply * <uint<256>>SCALE) + <uint<256>>xf
	//     )
	frame_dig -2 // in_supply: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	byte 0x0000000000002710
	byte 0x0000000000002710
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b*
	frame_dig 1 // xf: uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 3 // denominator: uint256

	// src/contracts/arc200_swap.algo.ts:107
	// return <uint64>(numerator / denominator);
	frame_dig 2 // numerator: uint256
	frame_dig 3 // denominator: uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

compute_in_tokens:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1; byte 0x; dupn 2

	// src/contracts/arc200_swap.algo.ts:111
	// factor = SCALE - (this.fee.value + this.platform_fee.value)
	int 10000
	byte 0x666565 // "fee"
	app_global_get
	byte 0x706c6174666f726d5f666565 // "platform_fee"
	app_global_get
	+
	-
	frame_bury 0 // factor: uint64

	// src/contracts/arc200_swap.algo.ts:113
	// numerator = <uint<256>>(
	//       <uint<256>>out_amount * <uint<256>>out_supply * <uint<256>>in_supply * <uint<256>>SCALE
	//     )
	frame_dig -1 // out_amount: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	frame_dig -3 // out_supply: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b*
	frame_dig -2 // in_supply: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b*
	byte 0x0000000000002710
	byte 0x0000000000002710
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b*
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 1 // numerator: uint256

	// src/contracts/arc200_swap.algo.ts:116
	// denominator = <uint<256>>(
	//       <uint<256>>out_supply * <uint<256>>factor * (
	//         <uint<256>>out_supply - <uint<256>>out_amount
	//       )
	//     )
	frame_dig -3 // out_supply: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	frame_dig 0 // factor: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b*
	frame_dig -3 // out_supply: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	frame_dig -1 // out_amount: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b-
	b*
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 2 // denominator: uint256

	// src/contracts/arc200_swap.algo.ts:122
	// return <uint64>(numerator / denominator);
	frame_dig 1 // numerator: uint256
	frame_dig 2 // denominator: uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

get_balance:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 1

	// src/contracts/arc200_swap.algo.ts:128
	// return this.app.address.balance - 1000_000;
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	assert
	int 1000_000
	-
	retsub

get_arc200_balance:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 1

	// src/contracts/arc200_swap.algo.ts:132
	// return <uint64>sendMethodCall<[Address], uint<256>>({
	//       sender: this.app.address,
	//       name: 'arc200_balanceOf',
	//       applicationID: this.arc200_token.value,
	//       methodArgs: [this.app.address],
	//       fee: 1000,
	//     });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_balanceOf(address)uint256"
	itxn_field ApplicationArgs

	// src/contracts/arc200_swap.algo.ts:133
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/arc200_swap.algo.ts:135
	// applicationID: this.arc200_token.value
	byte 0x6172633230305f746f6b656e // "arc200_token"
	app_global_get
	itxn_field ApplicationID

	// src/contracts/arc200_swap.algo.ts:136
	// methodArgs: [this.app.address]
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// src/contracts/arc200_swap.algo.ts:137
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	retsub

transfer_to:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1

	// src/contracts/arc200_swap.algo.ts:144
	// sendPayment({
	//       sender: this.app.address,
	//       receiver: to,
	//       amount: amount,
	//       fee: 1000
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/contracts/arc200_swap.algo.ts:145
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/arc200_swap.algo.ts:146
	// receiver: to
	frame_dig -1 // to: address
	itxn_field Receiver

	// src/contracts/arc200_swap.algo.ts:147
	// amount: amount
	frame_dig -2 // amount: uint64
	itxn_field Amount

	// src/contracts/arc200_swap.algo.ts:148
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/contracts/arc200_swap.algo.ts:150
	// return true;
	int 1
	retsub

asa_transfer_to:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1

	// src/contracts/arc200_swap.algo.ts:154
	// sendAssetTransfer({
	//       assetReceiver: receiver,
	//       xferAsset: asset,
	//       assetAmount: amount,
	//       fee: 1000,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/contracts/arc200_swap.algo.ts:155
	// assetReceiver: receiver
	frame_dig -1 // receiver: account
	itxn_field AssetReceiver

	// src/contracts/arc200_swap.algo.ts:156
	// xferAsset: asset
	frame_dig -2 // asset: asset
	itxn_field XferAsset

	// src/contracts/arc200_swap.algo.ts:157
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// src/contracts/arc200_swap.algo.ts:158
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/contracts/arc200_swap.algo.ts:160
	// return true;
	int 1
	retsub

arc200_transfer_to:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1

	// src/contracts/arc200_swap.algo.ts:164
	// return sendMethodCall<[Address, uint<256>], boolean>({
	//       sender: this.app.address,
	//       name: 'arc200_transfer',
	//       applicationID: this.arc200_token.value,
	//       methodArgs: [to, <uint<256>>amount],
	//       fee: 1000
	//     });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_transfer(address,uint256)bool"
	itxn_field ApplicationArgs

	// src/contracts/arc200_swap.algo.ts:165
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/arc200_swap.algo.ts:167
	// applicationID: this.arc200_token.value
	byte 0x6172633230305f746f6b656e // "arc200_token"
	app_global_get
	itxn_field ApplicationID

	// src/contracts/arc200_swap.algo.ts:168
	// methodArgs: [to, <uint<256>>amount]
	frame_dig -1 // to: address
	itxn_field ApplicationArgs
	frame_dig -2 // amount: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	itxn_field ApplicationArgs

	// src/contracts/arc200_swap.algo.ts:169
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	int 0
	getbit
	retsub

arc200_tranfer_from:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1

	// src/contracts/arc200_swap.algo.ts:175
	// return sendMethodCall<[Address, Address, uint<256>], boolean>({
	//       sender: this.app.address,
	//       name: 'arc200_transferFrom',
	//       applicationID: this.arc200_token.value,
	//       methodArgs: [from, to, <uint<256>>amount],
	//       fee: 1000
	//     });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_transferFrom(address,address,uint256)bool"
	itxn_field ApplicationArgs

	// src/contracts/arc200_swap.algo.ts:176
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/arc200_swap.algo.ts:178
	// applicationID: this.arc200_token.value
	byte 0x6172633230305f746f6b656e // "arc200_token"
	app_global_get
	itxn_field ApplicationID

	// src/contracts/arc200_swap.algo.ts:179
	// methodArgs: [from, to, <uint<256>>amount]
	frame_dig -1 // from: address
	itxn_field ApplicationArgs
	frame_dig -2 // to: address
	itxn_field ApplicationArgs
	frame_dig -3 // amount: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	itxn_field ApplicationArgs

	// src/contracts/arc200_swap.algo.ts:180
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	int 0
	getbit
	retsub

// register_online(uint64,uint64,uint64,bytes,bytes,bytes)void
//
// **********************************************
abi_route_register_online:
	// vote_key_dilution: uint64
	txna ApplicationArgs 6
	btoi

	// vote_last: uint64
	txna ApplicationArgs 5
	btoi

	// vote_first: uint64
	txna ApplicationArgs 4
	btoi

	// vote_pk: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// state_proof_pk: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// selection_pk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute register_online(uint64,uint64,uint64,bytes,bytes,bytes)void
	callsub register_online
	int 1
	return

register_online:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 6 0

	// src/contracts/arc200_swap.algo.ts:187
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// src/contracts/arc200_swap.algo.ts:189
	// sendOnlineKeyRegistration({
	//       sender: this.app.address,
	//       selectionPK: selection_pk,
	//       stateProofPK: state_proof_pk,
	//       votePK: vote_pk,
	//       voteFirst: vote_first,
	//       voteLast: vote_last,
	//       voteKeyDilution: vote_key_dilution,
	//       fee: 1000,
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// src/contracts/arc200_swap.algo.ts:190
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/arc200_swap.algo.ts:191
	// selectionPK: selection_pk
	frame_dig -1 // selection_pk: bytes
	itxn_field SelectionPK

	// src/contracts/arc200_swap.algo.ts:192
	// stateProofPK: state_proof_pk
	frame_dig -2 // state_proof_pk: bytes
	itxn_field StateProofPK

	// src/contracts/arc200_swap.algo.ts:193
	// votePK: vote_pk
	frame_dig -3 // vote_pk: bytes
	itxn_field VotePK

	// src/contracts/arc200_swap.algo.ts:194
	// voteFirst: vote_first
	frame_dig -4 // vote_first: uint64
	itxn_field VoteFirst

	// src/contracts/arc200_swap.algo.ts:195
	// voteLast: vote_last
	frame_dig -5 // vote_last: uint64
	itxn_field VoteLast

	// src/contracts/arc200_swap.algo.ts:196
	// voteKeyDilution: vote_key_dilution
	frame_dig -6 // vote_key_dilution: uint64
	itxn_field VoteKeyDilution

	// src/contracts/arc200_swap.algo.ts:197
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// register_offline()void
abi_route_register_offline:
	// execute register_offline()void
	callsub register_offline
	int 1
	return

register_offline:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// src/contracts/arc200_swap.algo.ts:202
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// src/contracts/arc200_swap.algo.ts:204
	// sendOfflineKeyRegistration({
	//       sender: this.app.address,
	//       fee: 1000
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// src/contracts/arc200_swap.algo.ts:205
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/arc200_swap.algo.ts:206
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// emergency_withdraw()void
abi_route_emergency_withdraw:
	// execute emergency_withdraw()void
	callsub emergency_withdraw
	int 1
	return

emergency_withdraw:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0; byte 0x

	// src/contracts/arc200_swap.algo.ts:211
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// src/contracts/arc200_swap.algo.ts:213
	// arc200_balance = this.get_arc200_balance()
	callsub get_arc200_balance
	frame_bury 0 // arc200_balance: uint64

	// src/contracts/arc200_swap.algo.ts:215
	// this.arc200_transfer_to(this.txn.sender, arc200_balance)
	frame_dig 0 // arc200_balance: uint64
	txn Sender
	callsub arc200_transfer_to

	// src/contracts/arc200_swap.algo.ts:216
	// this.transfer_to(this.txn.sender, this.get_balance())
	callsub get_balance
	txn Sender
	callsub transfer_to
	retsub

// mint(asset,uint64,pay)void
abi_route_mint:
	// pool_token: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// arc200_amount: uint64
	txna ApplicationArgs 1
	btoi

	// pay_txn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute mint(asset,uint64,pay)void
	callsub mint
	int 1
	return

mint:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 0; byte 0x

	// src/contracts/arc200_swap.algo.ts:220
	// verifyPayTxn(pay_txn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: { greaterThan: 0 },
	//     })
	// verify sender
	frame_dig -1 // pay_txn: pay
	gtxns Sender
	txn Sender
	==
	assert

	// verify receiver
	frame_dig -1 // pay_txn: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // pay_txn: pay
	gtxns Amount
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:226
	// assert(arc200_amount > 0)
	frame_dig -2 // arc200_amount: uint64
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:227
	// assert(pool_token === this.pool_token.value)
	frame_dig -3 // pool_token: asset
	byte 0x706f6f6c5f746f6b656e // "pool_token"
	app_global_get
	==
	assert

	// src/contracts/arc200_swap.algo.ts:228
	// assert(this.get_balance() > 0)
	callsub get_balance
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:230
	// this.arc200_tranfer_from(this.txn.sender, this.app.address, arc200_amount)
	frame_dig -2 // arc200_amount: uint64
	global CurrentApplicationAddress
	txn Sender
	callsub arc200_tranfer_from

	// src/contracts/arc200_swap.algo.ts:232
	// to_mint = <uint64>0
	int 0
	frame_bury 0 // to_mint: uint64

	// if0_condition
	// src/contracts/arc200_swap.algo.ts:234
	// !this.initialized.value
	byte 0x696e697469616c697a6564 // "initialized"
	app_global_get
	int 0
	getbit
	!
	bz if0_else

	// if0_consequent
	// src/contracts/arc200_swap.algo.ts:235
	// to_mint = this.tokens_to_mint_intial(pay_txn.amount, arc200_amount)
	frame_dig -2 // arc200_amount: uint64
	frame_dig -1 // pay_txn: pay
	gtxns Amount
	callsub tokens_to_mint_intial
	frame_bury 0 // to_mint: uint64

	// src/contracts/arc200_swap.algo.ts:236
	// this.initialized.value = true
	byte 0x696e697469616c697a6564 // "initialized"
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	b if0_end

if0_else:
	// src/contracts/arc200_swap.algo.ts:238
	// to_mint = this.tokens_to_mint(
	//         TOTAL_SUPPLY - this.app.address.assetBalance(this.pool_token.value),
	//         this.get_balance() - pay_txn.amount,
	//         this.get_arc200_balance() - arc200_amount,
	//         pay_txn.amount,
	//         arc200_amount
	//       )
	frame_dig -2 // arc200_amount: uint64
	frame_dig -1 // pay_txn: pay
	gtxns Amount
	callsub get_arc200_balance
	frame_dig -2 // arc200_amount: uint64
	-
	callsub get_balance
	frame_dig -1 // pay_txn: pay
	gtxns Amount
	-
	int 10_000_000_000_000_000
	global CurrentApplicationAddress
	byte 0x706f6f6c5f746f6b656e // "pool_token"
	app_global_get
	asset_holding_get AssetBalance
	assert
	-
	callsub tokens_to_mint
	frame_bury 0 // to_mint: uint64

if0_end:
	// src/contracts/arc200_swap.algo.ts:247
	// assert(to_mint > 0)
	frame_dig 0 // to_mint: uint64
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:249
	// this.asa_transfer_to(this.txn.sender, this.pool_token.value, to_mint)
	frame_dig 0 // to_mint: uint64
	byte 0x706f6f6c5f746f6b656e // "pool_token"
	app_global_get
	txn Sender
	callsub asa_transfer_to

	// src/contracts/arc200_swap.algo.ts:250
	// this.set_ratio()
	callsub set_ratio
	retsub

// burn(axfer)void
abi_route_burn:
	// lpt_pay_txn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute burn(axfer)void
	callsub burn
	int 1
	return

burn:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0; byte 0x; dupn 2

	// src/contracts/arc200_swap.algo.ts:254
	// verifyAssetTransferTxn(lpt_pay_txn, {
	//       sender: this.txn.sender,
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       xferAsset: this.pool_token.value,
	//     })
	// verify sender
	frame_dig -1 // lpt_pay_txn: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// verify assetAmount
	frame_dig -1 // lpt_pay_txn: axfer
	gtxns AssetAmount
	int 0
	>
	assert

	// verify assetReceiver
	frame_dig -1 // lpt_pay_txn: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify xferAsset
	frame_dig -1 // lpt_pay_txn: axfer
	gtxns XferAsset
	byte 0x706f6f6c5f746f6b656e // "pool_token"
	app_global_get
	==
	assert

	// src/contracts/arc200_swap.algo.ts:261
	// assert(this.get_balance() > 0)
	callsub get_balance
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:263
	// issued = TOTAL_SUPPLY - (this.app.address.assetBalance(this.pool_token.value) - lpt_pay_txn.assetAmount)
	int 10_000_000_000_000_000
	global CurrentApplicationAddress
	byte 0x706f6f6c5f746f6b656e // "pool_token"
	app_global_get
	asset_holding_get AssetBalance
	assert
	frame_dig -1 // lpt_pay_txn: axfer
	gtxns AssetAmount
	-
	-
	frame_bury 0 // issued: uint64

	// src/contracts/arc200_swap.algo.ts:265
	// withdraw_amount = this.compute_token_withdraw_amount(issued, this.get_balance(), lpt_pay_txn.assetAmount)
	frame_dig -1 // lpt_pay_txn: axfer
	gtxns AssetAmount
	callsub get_balance
	frame_dig 0 // issued: uint64
	callsub compute_token_withdraw_amount
	frame_bury 1 // withdraw_amount: uint64

	// src/contracts/arc200_swap.algo.ts:266
	// arc200_withdraw_amount = this.compute_token_withdraw_amount(issued, this.get_arc200_balance(), lpt_pay_txn.assetAmount)
	frame_dig -1 // lpt_pay_txn: axfer
	gtxns AssetAmount
	callsub get_arc200_balance
	frame_dig 0 // issued: uint64
	callsub compute_token_withdraw_amount
	frame_bury 2 // arc200_withdraw_amount: uint64

	// src/contracts/arc200_swap.algo.ts:268
	// this.transfer_to(this.txn.sender, withdraw_amount)
	frame_dig 1 // withdraw_amount: uint64
	txn Sender
	callsub transfer_to

	// src/contracts/arc200_swap.algo.ts:269
	// this.arc200_transfer_to(this.txn.sender, arc200_withdraw_amount)
	frame_dig 2 // arc200_withdraw_amount: uint64
	txn Sender
	callsub arc200_transfer_to

	// src/contracts/arc200_swap.algo.ts:271
	// this.set_ratio()
	callsub set_ratio
	retsub

// swap_to_arc200(uint64,pay)uint64
abi_route_swap_to_arc200:
	// The ABI return prefix
	byte 0x151f7c75

	// min_amount: uint64
	txna ApplicationArgs 1
	btoi

	// pay_txn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute swap_to_arc200(uint64,pay)uint64
	callsub swap_to_arc200
	itob
	concat
	log
	int 1
	return

swap_to_arc200:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1; byte 0x; dupn 2

	// src/contracts/arc200_swap.algo.ts:275
	// verifyPayTxn(pay_txn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: { greaterThan: 0 },
	//     })
	// verify sender
	frame_dig -1 // pay_txn: pay
	gtxns Sender
	txn Sender
	==
	assert

	// verify receiver
	frame_dig -1 // pay_txn: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // pay_txn: pay
	gtxns Amount
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:282
	// arc200_balance = this.get_arc200_balance()
	callsub get_arc200_balance
	frame_bury 0 // arc200_balance: uint64

	// src/contracts/arc200_swap.algo.ts:283
	// balance = this.get_balance()
	callsub get_balance
	frame_bury 1 // balance: uint64

	// src/contracts/arc200_swap.algo.ts:285
	// assert(balance > 0)
	frame_dig 1 // balance: uint64
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:286
	// assert(arc200_balance > 0)
	frame_dig 0 // arc200_balance: uint64
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:288
	// to_swap = this.compute_out_tokens(
	//       pay_txn.amount,
	//       balance - pay_txn.amount,
	//       arc200_balance
	//     )
	frame_dig 0 // arc200_balance: uint64
	frame_dig 1 // balance: uint64
	frame_dig -1 // pay_txn: pay
	gtxns Amount
	-
	frame_dig -1 // pay_txn: pay
	gtxns Amount
	callsub compute_out_tokens
	frame_bury 2 // to_swap: uint64

	// src/contracts/arc200_swap.algo.ts:294
	// assert(to_swap > 0)
	frame_dig 2 // to_swap: uint64
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:295
	// assert(to_swap >= min_amount)
	frame_dig 2 // to_swap: uint64
	frame_dig -2 // min_amount: uint64
	>=
	assert

	// src/contracts/arc200_swap.algo.ts:297
	// this.arc200_transfer_to(this.txn.sender, to_swap)
	frame_dig 2 // to_swap: uint64
	txn Sender
	callsub arc200_transfer_to

	// src/contracts/arc200_swap.algo.ts:298
	// this.set_ratio()
	callsub set_ratio

	// src/contracts/arc200_swap.algo.ts:300
	// return to_swap;
	frame_dig 2 // to_swap: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// swap_from_arc200(uint64,uint64)uint64
abi_route_swap_from_arc200:
	// The ABI return prefix
	byte 0x151f7c75

	// min_amount: uint64
	txna ApplicationArgs 2
	btoi

	// arc200_amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute swap_from_arc200(uint64,uint64)uint64
	callsub swap_from_arc200
	itob
	concat
	log
	int 1
	return

swap_from_arc200:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1; byte 0x; dupn 2

	// src/contracts/arc200_swap.algo.ts:304
	// this.arc200_tranfer_from(this.txn.sender, this.app.address, arc200_amount)
	frame_dig -1 // arc200_amount: uint64
	global CurrentApplicationAddress
	txn Sender
	callsub arc200_tranfer_from

	// src/contracts/arc200_swap.algo.ts:306
	// arc200_balance = this.get_arc200_balance()
	callsub get_arc200_balance
	frame_bury 0 // arc200_balance: uint64

	// src/contracts/arc200_swap.algo.ts:307
	// balance = this.get_balance()
	callsub get_balance
	frame_bury 1 // balance: uint64

	// src/contracts/arc200_swap.algo.ts:309
	// assert(balance > 0)
	frame_dig 1 // balance: uint64
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:310
	// assert(arc200_balance > 0)
	frame_dig 0 // arc200_balance: uint64
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:312
	// to_swap = this.compute_out_tokens(
	//       arc200_amount,
	//       arc200_balance - arc200_amount,
	//       balance
	//     )
	frame_dig 1 // balance: uint64
	frame_dig 0 // arc200_balance: uint64
	frame_dig -1 // arc200_amount: uint64
	-
	frame_dig -1 // arc200_amount: uint64
	callsub compute_out_tokens
	frame_bury 2 // to_swap: uint64

	// src/contracts/arc200_swap.algo.ts:318
	// assert(to_swap > 0)
	frame_dig 2 // to_swap: uint64
	int 0
	>
	assert

	// src/contracts/arc200_swap.algo.ts:319
	// assert(to_swap >= min_amount)
	frame_dig 2 // to_swap: uint64
	frame_dig -2 // min_amount: uint64
	>=
	assert

	// src/contracts/arc200_swap.algo.ts:321
	// this.transfer_to(this.txn.sender, to_swap)
	frame_dig 2 // to_swap: uint64
	txn Sender
	callsub transfer_to

	// src/contracts/arc200_swap.algo.ts:322
	// this.set_ratio()
	callsub set_ratio

	// src/contracts/arc200_swap.algo.ts:324
	// return to_swap;
	frame_dig 2 // to_swap: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// compute_swap_to_arc200(uint64)uint64
abi_route_compute_swap_to_arc200:
	// The ABI return prefix
	byte 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute compute_swap_to_arc200(uint64)uint64
	callsub compute_swap_to_arc200
	itob
	concat
	log
	int 1
	return

compute_swap_to_arc200:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// src/contracts/arc200_swap.algo.ts:328
	// arc200_balance = this.get_arc200_balance()
	callsub get_arc200_balance
	frame_bury 0 // arc200_balance: uint64

	// src/contracts/arc200_swap.algo.ts:329
	// return this.compute_out_tokens(amount, this.get_balance(), arc200_balance);
	frame_dig 0 // arc200_balance: uint64
	callsub get_balance
	frame_dig -1 // amount: uint64
	callsub compute_out_tokens

	// set the subroutine return value
	frame_bury 0
	retsub

// compute_swap_to_arc200_by_out_tokens(uint64)uint64
abi_route_compute_swap_to_arc200_by_out_tokens:
	// The ABI return prefix
	byte 0x151f7c75

	// arc200_amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute compute_swap_to_arc200_by_out_tokens(uint64)uint64
	callsub compute_swap_to_arc200_by_out_tokens
	itob
	concat
	log
	int 1
	return

compute_swap_to_arc200_by_out_tokens:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// src/contracts/arc200_swap.algo.ts:333
	// arc200_balance = this.get_arc200_balance()
	callsub get_arc200_balance
	frame_bury 0 // arc200_balance: uint64

	// src/contracts/arc200_swap.algo.ts:334
	// return this.compute_in_tokens(arc200_amount, this.get_balance(), arc200_balance);
	frame_dig 0 // arc200_balance: uint64
	callsub get_balance
	frame_dig -1 // arc200_amount: uint64
	callsub compute_in_tokens

	// set the subroutine return value
	frame_bury 0
	retsub

// compute_swap_from_arc200(uint64)uint64
abi_route_compute_swap_from_arc200:
	// The ABI return prefix
	byte 0x151f7c75

	// arc200_amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute compute_swap_from_arc200(uint64)uint64
	callsub compute_swap_from_arc200
	itob
	concat
	log
	int 1
	return

compute_swap_from_arc200:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// src/contracts/arc200_swap.algo.ts:338
	// arc200_balance = this.get_arc200_balance()
	callsub get_arc200_balance
	frame_bury 0 // arc200_balance: uint64

	// src/contracts/arc200_swap.algo.ts:339
	// return this.compute_out_tokens(
	//       arc200_amount,
	//       arc200_balance,
	//       this.get_balance()
	//     );
	callsub get_balance
	frame_dig 0 // arc200_balance: uint64
	frame_dig -1 // arc200_amount: uint64
	callsub compute_out_tokens

	// set the subroutine return value
	frame_bury 0
	retsub

// compute_swap_from_arc200_by_out_amount(uint64)uint64
abi_route_compute_swap_from_arc200_by_out_amount:
	// The ABI return prefix
	byte 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute compute_swap_from_arc200_by_out_amount(uint64)uint64
	callsub compute_swap_from_arc200_by_out_amount
	itob
	concat
	log
	int 1
	return

compute_swap_from_arc200_by_out_amount:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// src/contracts/arc200_swap.algo.ts:347
	// arc200_balance = this.get_arc200_balance()
	callsub get_arc200_balance
	frame_bury 0 // arc200_balance: uint64

	// src/contracts/arc200_swap.algo.ts:348
	// return this.compute_in_tokens(
	//       amount,
	//       arc200_balance,
	//       this.get_balance()
	//     );
	callsub get_balance
	frame_dig 0 // arc200_balance: uint64
	frame_dig -1 // amount: uint64
	callsub compute_in_tokens

	// set the subroutine return value
	frame_bury 0
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "set_admin(account)void"
	method "create_pool_token(pay)uint64"
	method "set_fees(uint64)void"
	method "register_online(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "register_offline()void"
	method "emergency_withdraw()void"
	method "mint(pay,uint64,asset)void"
	method "burn(axfer)void"
	method "swap_to_arc200(pay,uint64)uint64"
	method "swap_from_arc200(uint64,uint64)uint64"
	method "compute_swap_to_arc200(uint64)uint64"
	method "compute_swap_to_arc200_by_out_tokens(uint64)uint64"
	method "compute_swap_from_arc200(uint64)uint64"
	method "compute_swap_from_arc200_by_out_amount(uint64)uint64"
	txna ApplicationArgs 0
	match abi_route_set_admin abi_route_create_pool_token abi_route_set_fees abi_route_register_online abi_route_register_offline abi_route_emergency_withdraw abi_route_mint abi_route_burn abi_route_swap_to_arc200 abi_route_swap_from_arc200 abi_route_compute_swap_to_arc200 abi_route_compute_swap_to_arc200_by_out_tokens abi_route_compute_swap_from_arc200 abi_route_compute_swap_from_arc200_by_out_amount
	err

call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match abi_route_updateApplication
	err