{
  "hints": {
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "set_governor(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(pay,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrapStep2(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bringOnline(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bringOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "emergencyWithdraw()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(pay,uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swapVoiForVia(pay,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "simulateSwapVoiForVia(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "simulateSwapVoiForXVia(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swapViaForVoi(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "simulateSwapViaForVoi(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "simulateSwapViaForXVoi(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "poolToken": {
          "type": "uint64",
          "key": "p"
        },
        "ratio": {
          "type": "uint64",
          "key": "r"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "VoiSwap",
    "desc": "",
    "methods": [
      {
        "name": "updateApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "set_governor",
        "args": [
          {
            "name": "governor",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "voiPayTxn",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "viaAmount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "bootstrapStep2",
        "args": [
          {
            "name": "optinTxn",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "poolAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bringOnline",
        "args": [
          {
            "name": "selectionPK",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "stateProofPK",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "votePK",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "voteFirst",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "voteLast",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bringOffline",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "emergencyWithdraw",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "voiPayTxn",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "viaAmount",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "poolAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "burn",
        "args": [
          {
            "name": "poolXfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "poolAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "swapVoiForVia",
        "args": [
          {
            "name": "voiPayTxn",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "minVia",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "simulateSwapVoiForVia",
        "args": [
          {
            "name": "voiAmount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "simulateSwapVoiForXVia",
        "args": [
          {
            "name": "viaAmount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "swapViaForVoi",
        "args": [
          {
            "name": "viaAmount",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "minVoi",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "simulateSwapViaForVoi",
        "args": [
          {
            "name": "viaAmount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "simulateSwapViaForXVoi",
        "args": [
          {
            "name": "voiAmount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      }
    ]
  }
}