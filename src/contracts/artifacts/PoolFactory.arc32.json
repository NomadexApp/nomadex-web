{
  "hints": {
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "manager()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createPool(pay,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "poolBootstrap(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFee(uint64)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPlatformFee(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPoolManager(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPoolFee(uint64,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(address,uint256,(uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "noop(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "warden": {
          "type": "bytes",
          "key": "warden"
        },
        "bootstrapFee": {
          "type": "uint64",
          "key": "bootstrap_fee"
        },
        "platformFee": {
          "type": "bytes",
          "key": "platform_fee"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "PoolFactory",
    "desc": "",
    "methods": [
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "manager",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "grant",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createPool",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "name",
            "type": "byte[32]"
          },
          {
            "name": "symbol",
            "type": "byte[8]"
          },
          {
            "name": "alphaId",
            "type": "uint64"
          },
          {
            "name": "alphaType",
            "type": "uint8"
          },
          {
            "name": "betaId",
            "type": "uint64"
          },
          {
            "name": "betaType",
            "type": "uint8"
          },
          {
            "name": "swapFee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint64"
        },
        "events": [
          {
            "name": "PoolCreated",
            "args": [
              {
                "name": "poolId",
                "type": "uint64"
              },
              {
                "name": "alphaId",
                "type": "uint64"
              },
              {
                "name": "alphaType",
                "type": "uint8"
              },
              {
                "name": "betaId",
                "type": "uint64"
              },
              {
                "name": "betaType",
                "type": "uint8"
              },
              {
                "name": "swapFee",
                "type": "uint256"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "poolBootstrap",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PoolBootstrap",
            "args": [
              {
                "name": "poolId",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "setFee",
        "args": [
          {
            "name": "fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "setPlatformFee",
        "args": [
          {
            "name": "fee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "setPoolManager",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          },
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPoolFee",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          },
          {
            "name": "fee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "amount",
            "type": "uint256"
          },
          {
            "name": "id",
            "type": "(uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Withdraw",
            "args": [
              {
                "name": "to",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "asaId",
                "type": "uint64"
              },
              {
                "name": "smartAssetId",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "noop",
        "args": [
          {
            "name": "_",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "PoolCreated",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          },
          {
            "name": "alphaId",
            "type": "uint64"
          },
          {
            "name": "alphaType",
            "type": "uint8"
          },
          {
            "name": "betaId",
            "type": "uint64"
          },
          {
            "name": "betaType",
            "type": "uint8"
          },
          {
            "name": "swapFee",
            "type": "uint256"
          }
        ],
        "desc": ""
      },
      {
        "name": "PoolBootstrap",
        "args": [
          {
            "name": "poolId",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "Withdraw",
        "args": [
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "amount",
            "type": "uint256"
          },
          {
            "name": "asaId",
            "type": "uint64"
          },
          {
            "name": "smartAssetId",
            "type": "uint64"
          }
        ],
        "desc": ""
      }
    ]
  }
}