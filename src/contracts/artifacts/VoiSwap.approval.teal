#pragma version 9

// This TEAL was generated by TEALScript v0.66.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication

NOT_IMPLEMENTED:
	err

// updateApplication()void
//
// // custom <
abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

updateApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// src/contracts/voi_swap.algo.ts:19
	// verifyAppCallTxn(this.txn, { sender: this.governor.value })
	// verify sender
	txn Sender
	byte 0x67 // "g"
	app_global_get
	==
	assert

	// src/contracts/voi_swap.algo.ts:20
	// this.governor.value = this.txn.sender
	byte 0x67 // "g"
	txn Sender
	app_global_put

	// src/contracts/voi_swap.algo.ts:21
	// return;
	retsub

getVoiBalance:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1

	// src/contracts/voi_swap.algo.ts:25
	// return address.balance;
	frame_dig -1 // address: address
	acct_params_get AcctBalance
	assert
	retsub

getViaBalance:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1

	// src/contracts/voi_swap.algo.ts:29
	// return sendMethodCall<[Address], uint<256>>({
	//       sender: this.app.address,
	//       name: 'arc200_balanceOf',
	//       applicationID: Application.fromID(6779767),
	//       methodArgs: [address],
	//       fee: 1000,
	//     });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_balanceOf(address)uint256"
	itxn_field ApplicationArgs

	// src/contracts/voi_swap.algo.ts:30
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/voi_swap.algo.ts:32
	// applicationID: Application.fromID(6779767)
	int 6779767
	itxn_field ApplicationID

	// src/contracts/voi_swap.algo.ts:33
	// methodArgs: [address]
	frame_dig -1 // address: address
	itxn_field ApplicationArgs

	// src/contracts/voi_swap.algo.ts:34
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	retsub

transferVoiTo:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1

	// src/contracts/voi_swap.algo.ts:39
	// sendPayment({
	//       sender: this.app.address,
	//       receiver: to,
	//       amount: amount,
	//       fee: 1000
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/contracts/voi_swap.algo.ts:40
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/voi_swap.algo.ts:41
	// receiver: to
	frame_dig -1 // to: address
	itxn_field Receiver

	// src/contracts/voi_swap.algo.ts:42
	// amount: amount
	frame_dig -2 // amount: uint64
	itxn_field Amount

	// src/contracts/voi_swap.algo.ts:43
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/contracts/voi_swap.algo.ts:45
	// return true;
	int 1
	retsub

viaTransfer:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1

	// src/contracts/voi_swap.algo.ts:49
	// return sendMethodCall<[Address, uint<256>], boolean>({
	//       sender: this.app.address,
	//       name: 'arc200_transfer',
	//       applicationID: Application.fromID(6779767),
	//       methodArgs: [to, amount],
	//       fee: 1000
	//     });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_transfer(address,uint256)bool"
	itxn_field ApplicationArgs

	// src/contracts/voi_swap.algo.ts:50
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/voi_swap.algo.ts:52
	// applicationID: Application.fromID(6779767)
	int 6779767
	itxn_field ApplicationID

	// src/contracts/voi_swap.algo.ts:53
	// methodArgs: [to, amount]
	frame_dig -1 // to: address
	itxn_field ApplicationArgs
	frame_dig -2 // amount: uint256
	itxn_field ApplicationArgs

	// src/contracts/voi_swap.algo.ts:54
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	int 0
	getbit
	retsub

viaTranferFrom:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1

	// src/contracts/voi_swap.algo.ts:60
	// return sendMethodCall<[Address, Address, uint<256>], boolean>({
	//       sender: this.app.address,
	//       name: 'arc200_transferFrom',
	//       applicationID: Application.fromID(6779767),
	//       methodArgs: [from, to, amount],
	//       fee: 1000
	//     });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_transferFrom(address,address,uint256)bool"
	itxn_field ApplicationArgs

	// src/contracts/voi_swap.algo.ts:61
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/voi_swap.algo.ts:63
	// applicationID: Application.fromID(6779767)
	int 6779767
	itxn_field ApplicationID

	// src/contracts/voi_swap.algo.ts:64
	// methodArgs: [from, to, amount]
	frame_dig -1 // from: address
	itxn_field ApplicationArgs
	frame_dig -2 // to: address
	itxn_field ApplicationArgs
	frame_dig -3 // amount: uint256
	itxn_field ApplicationArgs

	// src/contracts/voi_swap.algo.ts:65
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	int 0
	getbit
	retsub

// createApplication()void
//
// // > custom
abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

createApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// src/contracts/voi_swap.algo.ts:79
	// this.governor.value = this.txn.sender
	byte 0x67 // "g"
	txn Sender
	app_global_put
	retsub

doCreatePoolToken:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 1

	// src/contracts/voi_swap.algo.ts:85
	// return sendAssetCreation({
	//       configAssetName: 'LPT-VOI-VIA',
	//       configAssetUnitName: 'LPT',
	//       configAssetTotal: TOTAL_SUPPLY,
	//       configAssetDecimals: 6,
	//       configAssetManager: this.app.address,
	//       configAssetReserve: this.app.address,
	//       fee: 1000
	//     });
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// src/contracts/voi_swap.algo.ts:86
	// configAssetName: 'LPT-VOI-VIA'
	byte 0x4c50542d564f492d564941 // "LPT-VOI-VIA"
	itxn_field ConfigAssetName

	// src/contracts/voi_swap.algo.ts:87
	// configAssetUnitName: 'LPT'
	byte 0x4c5054 // "LPT"
	itxn_field ConfigAssetUnitName

	// src/contracts/voi_swap.algo.ts:88
	// configAssetTotal: TOTAL_SUPPLY
	int 10_000_000_000_000_000
	itxn_field ConfigAssetTotal

	// src/contracts/voi_swap.algo.ts:89
	// configAssetDecimals: 6
	int 6
	itxn_field ConfigAssetDecimals

	// src/contracts/voi_swap.algo.ts:90
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// src/contracts/voi_swap.algo.ts:91
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// src/contracts/voi_swap.algo.ts:92
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	retsub

doAxfer:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 0

	// src/contracts/voi_swap.algo.ts:97
	// sendAssetTransfer({
	//       assetReceiver: receiver,
	//       xferAsset: asset,
	//       assetAmount: amount,
	//       fee: 1000,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/contracts/voi_swap.algo.ts:98
	// assetReceiver: receiver
	frame_dig -1 // receiver: account
	itxn_field AssetReceiver

	// src/contracts/voi_swap.algo.ts:99
	// xferAsset: asset
	frame_dig -2 // asset: asset
	itxn_field XferAsset

	// src/contracts/voi_swap.algo.ts:100
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// src/contracts/voi_swap.algo.ts:101
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

tokensToMintIntial:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1

	// src/contracts/voi_swap.algo.ts:106
	// return sqrt(aAmount * bAmount);
	frame_dig -1 // aAmount: uint64
	frame_dig -2 // bAmount: uint64
	*
	sqrt
	retsub

tokensToMint:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 5 1; byte 0x; dupn 2

	// src/contracts/voi_swap.algo.ts:110
	// aRatio = wideRatio([aAmount, SCALE], [aSupply])
	frame_dig -4 // aAmount: uint64
	int 1000
	mulw
	int 0
	frame_dig -2 // aSupply: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 0 // aRatio: uint64

	// src/contracts/voi_swap.algo.ts:111
	// bRatio = wideRatio([bAmount, SCALE], [bSupply])
	frame_dig -5 // bAmount: uint64
	int 1000
	mulw
	int 0
	frame_dig -3 // bSupply: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	frame_bury 1 // bRatio: uint64

	// src/contracts/voi_swap.algo.ts:113
	// ratio = aRatio < bRatio ? aRatio : bRatio
	frame_dig 0 // aRatio: uint64
	frame_dig 1 // bRatio: uint64
	<
	bz ternary1_false
	frame_dig 0 // aRatio: uint64
	b ternary1_end

ternary1_false:
	frame_dig 1 // bRatio: uint64

ternary1_end:
	frame_bury 2 // ratio: uint64

	// src/contracts/voi_swap.algo.ts:115
	// return wideRatio([ratio, issued], [SCALE]);
	frame_dig 2 // ratio: uint64
	frame_dig -1 // issued: uint64
	mulw
	int 0
	int 1000
	divmodw
	pop
	pop
	swap
	!
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

computeRatio:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 1

	// src/contracts/voi_swap.algo.ts:119
	// return wideRatio(
	//       [this.getVoiBalance(this.app.address), <uint64>SCALE],
	//       [<uint64>this.getViaBalance(this.app.address)]
	//     );
	global CurrentApplicationAddress
	callsub getVoiBalance
	int 1000
	mulw
	int 0
	global CurrentApplicationAddress
	callsub getViaBalance
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	divmodw
	pop
	pop
	swap
	!
	assert
	retsub

tokensToBurn:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1

	// src/contracts/voi_swap.algo.ts:126
	// return wideRatio([supply, amount], [issued]);
	frame_dig -2 // supply: uint64
	frame_dig -3 // amount: uint64
	mulw
	int 0
	frame_dig -1 // issued: uint64
	divmodw
	pop
	pop
	swap
	!
	assert
	retsub

tokensToSwap:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1; byte 0x

	// src/contracts/voi_swap.algo.ts:130
	// factor = SCALE - FEE
	int 995
	frame_bury 0 // factor: uint64

	// src/contracts/voi_swap.algo.ts:131
	// return wideRatio([inAmount, factor, outSupply], [inSupply * SCALE + inAmount * factor]);
	frame_dig -1 // inAmount: uint64
	frame_dig 0 // factor: uint64
	mulw
	frame_dig -3 // outSupply: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	int 0
	frame_dig -2 // inSupply: uint64
	int 1000
	*
	frame_dig -1 // inAmount: uint64
	frame_dig 0 // factor: uint64
	*
	+
	divmodw
	pop
	pop
	swap
	!
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

tokensForSwap:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 1; byte 0x

	// src/contracts/voi_swap.algo.ts:135
	// factor = SCALE - FEE
	int 995
	frame_bury 0 // factor: uint64

	// src/contracts/voi_swap.algo.ts:136
	// return wideRatio([outAmount, outSupply, inSupply, SCALE], [outSupply, factor, outSupply - outAmount]);
	frame_dig -1 // outAmount: uint64
	frame_dig -3 // outSupply: uint64
	mulw
	frame_dig -2 // inSupply: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	int 1000
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	frame_dig -3 // outSupply: uint64
	frame_dig 0 // factor: uint64
	mulw
	frame_dig -3 // outSupply: uint64
	frame_dig -1 // outAmount: uint64
	-
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	divmodw
	pop
	pop
	swap
	!
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// set_governor(account)void
abi_route_set_governor:
	// governor: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute set_governor(account)void
	callsub set_governor
	int 1
	return

set_governor:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0

	// src/contracts/voi_swap.algo.ts:140
	// verifyAppCallTxn(this.txn, { sender: this.governor.value })
	// verify sender
	txn Sender
	byte 0x67 // "g"
	app_global_get
	==
	assert

	// src/contracts/voi_swap.algo.ts:141
	// this.governor.value = governor
	byte 0x67 // "g"
	frame_dig -1 // governor: account
	app_global_put
	retsub

// bootstrap(uint64,pay)uint64
abi_route_bootstrap:
	// The ABI return prefix
	byte 0x151f7c75

	// viaAmount: uint64
	txna ApplicationArgs 1
	btoi

	// voiPayTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute bootstrap(uint64,pay)uint64
	callsub bootstrap
	itob
	concat
	log
	int 1
	return

bootstrap:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1

	// src/contracts/voi_swap.algo.ts:145
	// verifyAppCallTxn(this.txn, { sender: this.governor.value })
	// verify sender
	txn Sender
	byte 0x67 // "g"
	app_global_get
	==
	assert

	// src/contracts/voi_swap.algo.ts:147
	// assert(globals.groupSize > 1)
	global GroupSize
	int 1
	>
	assert

	// src/contracts/voi_swap.algo.ts:148
	// assert(viaAmount >= voiPayTxn.amount)
	frame_dig -2 // viaAmount: uint64
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	>=
	assert

	// src/contracts/voi_swap.algo.ts:150
	// verifyPayTxn(voiPayTxn, { receiver: this.app.address, amount: { greaterThanEqualTo: 300_000 } })
	// verify receiver
	frame_dig -1 // voiPayTxn: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	int 300_000
	>=
	assert

	// src/contracts/voi_swap.algo.ts:151
	// assert(this.viaTranferFrom(this.txn.sender, this.app.address, <uint<256>>viaAmount))
	frame_dig -2 // viaAmount: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	global CurrentApplicationAddress
	txn Sender
	callsub viaTranferFrom
	assert

	// if0_condition
	// src/contracts/voi_swap.algo.ts:153
	// !this.poolToken.exists
	txna Applications 0
	byte 0x70 // "p"
	app_global_get_ex
	swap
	pop
	!
	bz if0_end

	// if0_consequent
	// src/contracts/voi_swap.algo.ts:154
	// this.poolToken.value = this.doCreatePoolToken()
	byte 0x70 // "p"
	callsub doCreatePoolToken
	app_global_put

if0_end:
	// src/contracts/voi_swap.algo.ts:157
	// return this.poolToken.value;
	byte 0x70 // "p"
	app_global_get
	retsub

// bootstrapStep2(asset,axfer)void
abi_route_bootstrapStep2:
	// poolAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// optinTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute bootstrapStep2(asset,axfer)void
	callsub bootstrapStep2
	int 1
	return

bootstrapStep2:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 0; byte 0x; dupn 2

	// src/contracts/voi_swap.algo.ts:161
	// verifyAppCallTxn(this.txn, { sender: this.governor.value })
	// verify sender
	txn Sender
	byte 0x67 // "g"
	app_global_get
	==
	assert

	// src/contracts/voi_swap.algo.ts:162
	// verifyAssetTransferTxn(optinTxn, { sender: this.txn.sender, xferAsset: poolAsset })
	// verify sender
	frame_dig -1 // optinTxn: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// verify xferAsset
	frame_dig -1 // optinTxn: axfer
	gtxns XferAsset
	frame_dig -2 // poolAsset: asset
	==
	assert

	// src/contracts/voi_swap.algo.ts:164
	// assert(poolAsset === this.poolToken.value)
	frame_dig -2 // poolAsset: asset
	byte 0x70 // "p"
	app_global_get
	==
	assert

	// src/contracts/voi_swap.algo.ts:165
	// assert(TOTAL_SUPPLY === this.app.address.assetBalance(poolAsset))
	int 10_000_000_000_000_000
	global CurrentApplicationAddress
	frame_dig -2 // poolAsset: asset
	asset_holding_get AssetBalance
	assert
	==
	assert

	// src/contracts/voi_swap.algo.ts:167
	// voiBalance = this.getVoiBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_bury 0 // voiBalance: uint64

	// src/contracts/voi_swap.algo.ts:168
	// viaBalance = this.getViaBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getViaBalance
	frame_bury 1 // viaBalance: uint256

	// src/contracts/voi_swap.algo.ts:169
	// toMint = this.tokensToMintIntial(voiBalance, <uint64>viaBalance)
	frame_dig 1 // viaBalance: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	frame_dig 0 // voiBalance: uint64
	callsub tokensToMintIntial
	frame_bury 2 // toMint: uint64

	// src/contracts/voi_swap.algo.ts:171
	// this.doAxfer(this.txn.sender, poolAsset, toMint)
	frame_dig 2 // toMint: uint64
	frame_dig -2 // poolAsset: asset
	txn Sender
	callsub doAxfer
	retsub

// bringOnline(uint64,uint64,uint64,bytes,bytes,bytes)void
abi_route_bringOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// votePK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// stateProofPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute bringOnline(uint64,uint64,uint64,bytes,bytes,bytes)void
	callsub bringOnline
	int 1
	return

bringOnline:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 6 0

	// src/contracts/voi_swap.algo.ts:177
	// sendOnlineKeyRegistration({
	//       sender: this.app.address,
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       votePK: votePK,
	//       voteFirst: voteFirst,
	//       voteLast: voteLast,
	//       voteKeyDilution: voteKeyDilution,
	//       fee: 1000,
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// src/contracts/voi_swap.algo.ts:178
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/voi_swap.algo.ts:179
	// selectionPK: selectionPK
	frame_dig -1 // selectionPK: bytes
	itxn_field SelectionPK

	// src/contracts/voi_swap.algo.ts:180
	// stateProofPK: stateProofPK
	frame_dig -2 // stateProofPK: bytes
	itxn_field StateProofPK

	// src/contracts/voi_swap.algo.ts:181
	// votePK: votePK
	frame_dig -3 // votePK: bytes
	itxn_field VotePK

	// src/contracts/voi_swap.algo.ts:182
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// src/contracts/voi_swap.algo.ts:183
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// src/contracts/voi_swap.algo.ts:184
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// src/contracts/voi_swap.algo.ts:185
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// bringOffline()void
abi_route_bringOffline:
	// execute bringOffline()void
	callsub bringOffline
	int 1
	return

bringOffline:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// src/contracts/voi_swap.algo.ts:192
	// sendOfflineKeyRegistration({
	//       sender: this.app.address,
	//       fee: 1000
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// src/contracts/voi_swap.algo.ts:193
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/voi_swap.algo.ts:194
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// emergencyWithdraw()void
abi_route_emergencyWithdraw:
	// execute emergencyWithdraw()void
	callsub emergencyWithdraw
	int 1
	return

emergencyWithdraw:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0; byte 0x; dupn 2

	// src/contracts/voi_swap.algo.ts:199
	// verifyAppCallTxn(this.txn, { sender: this.governor.value })
	// verify sender
	txn Sender
	byte 0x67 // "g"
	app_global_get
	==
	assert

	// src/contracts/voi_swap.algo.ts:202
	// viaBalance = this.getViaBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getViaBalance
	frame_bury 0 // viaBalance: uint256

	// if1_condition
	// src/contracts/voi_swap.algo.ts:203
	// <uint64>viaBalance > 0
	frame_dig 0 // viaBalance: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	int 0
	>
	bz if1_end

	// if1_consequent
	// src/contracts/voi_swap.algo.ts:204
	// assert(this.viaTransfer(this.governor.value, <uint<256>>viaBalance))
	frame_dig 0 // viaBalance: uint256
	byte 0x67 // "g"
	app_global_get
	callsub viaTransfer
	assert

if1_end:
	// src/contracts/voi_swap.algo.ts:207
	// voiBalance = this.getVoiBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_bury 1 // voiBalance: uint64

	// src/contracts/voi_swap.algo.ts:208
	// minBalance = (this.app.address.minBalance + 1000)
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	int 1000
	+
	frame_bury 2 // minBalance: uint64

	// if2_condition
	// src/contracts/voi_swap.algo.ts:209
	// voiBalance > minBalance
	frame_dig 1 // voiBalance: uint64
	frame_dig 2 // minBalance: uint64
	>
	bz if2_end

	// if2_consequent
	// src/contracts/voi_swap.algo.ts:210
	// assert(this.transferVoiTo(this.governor.value, this.getVoiBalance(this.app.address) - minBalance))
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig 2 // minBalance: uint64
	-
	byte 0x67 // "g"
	app_global_get
	callsub transferVoiTo
	assert

if2_end:
	retsub

// mint(asset,uint64,pay)void
abi_route_mint:
	// poolAsset: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// viaAmount: uint64
	txna ApplicationArgs 1
	btoi

	// voiPayTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute mint(asset,uint64,pay)void
	callsub mint
	int 1
	return

mint:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 0; byte 0x

	// src/contracts/voi_swap.algo.ts:215
	// assert(globals.groupSize > 1)
	global GroupSize
	int 1
	>
	assert

	// src/contracts/voi_swap.algo.ts:216
	// assert(poolAsset === this.poolToken.value)
	frame_dig -3 // poolAsset: asset
	byte 0x70 // "p"
	app_global_get
	==
	assert

	// src/contracts/voi_swap.algo.ts:218
	// verifyPayTxn(voiPayTxn, {
	//       sender: this.txn.sender,
	//       amount: { greaterThan: 0 },
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -1 // voiPayTxn: pay
	gtxns Sender
	txn Sender
	==
	assert

	// verify amount
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	int 0
	>
	assert

	// verify receiver
	frame_dig -1 // voiPayTxn: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src/contracts/voi_swap.algo.ts:224
	// assert(this.viaTranferFrom(this.txn.sender, this.app.address, <uint<256>>viaAmount))
	frame_dig -2 // viaAmount: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	global CurrentApplicationAddress
	txn Sender
	callsub viaTranferFrom
	assert

	// if3_condition
	// src/contracts/voi_swap.algo.ts:227
	// this.getVoiBalance(this.app.address) === voiPayTxn.amount &&
	//       <uint64>this.getViaBalance(this.app.address) === viaAmount
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	==
	dup
	bz skip_and0
	global CurrentApplicationAddress
	callsub getViaBalance
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	frame_dig -2 // viaAmount: uint64
	==
	&&

skip_and0:
	bz if3_else

	// if3_consequent
	// src/contracts/voi_swap.algo.ts:230
	// this.tokensToMintIntial(voiPayTxn.amount, viaAmount)
	frame_dig -2 // viaAmount: uint64
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	callsub tokensToMintIntial
	b if3_end

if3_else:
	// src/contracts/voi_swap.algo.ts:232
	// toMint = this.tokensToMint(
	//         TOTAL_SUPPLY - this.app.address.assetBalance(poolAsset),
	//         this.getVoiBalance(this.app.address) - voiPayTxn.amount,
	//         <uint64>this.getViaBalance(this.app.address) - viaAmount,
	//         voiPayTxn.amount,
	//         viaAmount
	//       )
	frame_dig -2 // viaAmount: uint64
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	global CurrentApplicationAddress
	callsub getViaBalance
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	frame_dig -2 // viaAmount: uint64
	-
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	-
	int 10_000_000_000_000_000
	global CurrentApplicationAddress
	frame_dig -3 // poolAsset: asset
	asset_holding_get AssetBalance
	assert
	-
	callsub tokensToMint
	frame_bury 0 // toMint: uint64

	// src/contracts/voi_swap.algo.ts:240
	// assert(toMint > 0)
	frame_dig 0 // toMint: uint64
	int 0
	>
	assert

	// src/contracts/voi_swap.algo.ts:242
	// this.doAxfer(this.txn.sender, poolAsset, toMint)
	frame_dig 0 // toMint: uint64
	frame_dig -3 // poolAsset: asset
	txn Sender
	callsub doAxfer

if3_end:
	retsub

// burn(asset,axfer)void
abi_route_burn:
	// poolAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// poolXfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute burn(asset,axfer)void
	callsub burn
	int 1
	return

burn:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 0; byte 0x; dupn 2

	// src/contracts/voi_swap.algo.ts:247
	// assert(poolAsset === this.poolToken.value)
	frame_dig -2 // poolAsset: asset
	byte 0x70 // "p"
	app_global_get
	==
	assert

	// src/contracts/voi_swap.algo.ts:249
	// verifyAssetTransferTxn(poolXfer, {
	//       sender: this.txn.sender,
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       xferAsset: poolAsset,
	//     })
	// verify sender
	frame_dig -1 // poolXfer: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// verify assetAmount
	frame_dig -1 // poolXfer: axfer
	gtxns AssetAmount
	int 0
	>
	assert

	// verify assetReceiver
	frame_dig -1 // poolXfer: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify xferAsset
	frame_dig -1 // poolXfer: axfer
	gtxns XferAsset
	frame_dig -2 // poolAsset: asset
	==
	assert

	// src/contracts/voi_swap.algo.ts:256
	// issued = TOTAL_SUPPLY - (this.app.address.assetBalance(poolAsset) - poolXfer.assetAmount)
	int 10_000_000_000_000_000
	global CurrentApplicationAddress
	frame_dig -2 // poolAsset: asset
	asset_holding_get AssetBalance
	assert
	frame_dig -1 // poolXfer: axfer
	gtxns AssetAmount
	-
	-
	frame_bury 0 // issued: uint64

	// src/contracts/voi_swap.algo.ts:258
	// aAmt = this.tokensToBurn(issued, this.getVoiBalance(this.app.address), poolXfer.assetAmount)
	frame_dig -1 // poolXfer: axfer
	gtxns AssetAmount
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig 0 // issued: uint64
	callsub tokensToBurn
	frame_bury 1 // aAmt: uint64

	// src/contracts/voi_swap.algo.ts:260
	// bAmt = this.tokensToBurn(issued, <uint64>this.getViaBalance(this.app.address), poolXfer.assetAmount)
	frame_dig -1 // poolXfer: axfer
	gtxns AssetAmount
	global CurrentApplicationAddress
	callsub getViaBalance
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	frame_dig 0 // issued: uint64
	callsub tokensToBurn
	frame_bury 2 // bAmt: uint64

	// src/contracts/voi_swap.algo.ts:262
	// this.transferVoiTo(this.txn.sender, aAmt)
	frame_dig 1 // aAmt: uint64
	txn Sender
	callsub transferVoiTo

	// src/contracts/voi_swap.algo.ts:263
	// this.viaTransfer(this.txn.sender, <uint<256>>bAmt)
	frame_dig 2 // bAmt: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	txn Sender
	callsub viaTransfer

	// src/contracts/voi_swap.algo.ts:265
	// this.ratio.value = this.computeRatio()
	byte 0x72 // "r"
	callsub computeRatio
	app_global_put
	retsub

// swapVoiForVia(uint64,pay)uint64
abi_route_swapVoiForVia:
	// The ABI return prefix
	byte 0x151f7c75

	// minVia: uint64
	txna ApplicationArgs 1
	btoi

	// voiPayTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute swapVoiForVia(uint64,pay)uint64
	callsub swapVoiForVia
	itob
	concat
	log
	int 1
	return

swapVoiForVia:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1; byte 0x; dupn 1

	// src/contracts/voi_swap.algo.ts:269
	// verifyPayTxn(voiPayTxn, {
	//       amount: { greaterThan: 0 },
	//       receiver: this.app.address,
	//       sender: this.txn.sender,
	//     })
	// verify amount
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	int 0
	>
	assert

	// verify receiver
	frame_dig -1 // voiPayTxn: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // voiPayTxn: pay
	gtxns Sender
	txn Sender
	==
	assert

	// src/contracts/voi_swap.algo.ts:275
	// viaBalance = this.getViaBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getViaBalance
	frame_bury 0 // viaBalance: uint256

	// src/contracts/voi_swap.algo.ts:277
	// toSwap = this.tokensToSwap(
	//       voiPayTxn.amount,
	//       this.getVoiBalance(this.app.address) - voiPayTxn.amount,
	//       <uint64>viaBalance
	//     )
	frame_dig 0 // viaBalance: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	-
	frame_dig -1 // voiPayTxn: pay
	gtxns Amount
	callsub tokensToSwap
	frame_bury 1 // toSwap: uint64

	// src/contracts/voi_swap.algo.ts:283
	// assert(toSwap > 0)
	frame_dig 1 // toSwap: uint64
	int 0
	>
	assert

	// src/contracts/voi_swap.algo.ts:284
	// assert(toSwap >= minVia)
	frame_dig 1 // toSwap: uint64
	frame_dig -2 // minVia: uint64
	>=
	assert

	// src/contracts/voi_swap.algo.ts:286
	// this.viaTransfer(this.txn.sender, <uint<256>>toSwap)
	frame_dig 1 // toSwap: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	txn Sender
	callsub viaTransfer

	// src/contracts/voi_swap.algo.ts:288
	// this.ratio.value = this.computeRatio()
	byte 0x72 // "r"
	callsub computeRatio
	app_global_put

	// src/contracts/voi_swap.algo.ts:290
	// return toSwap;
	frame_dig 1 // toSwap: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// simulateSwapVoiForVia(uint64)uint64
abi_route_simulateSwapVoiForVia:
	// The ABI return prefix
	byte 0x151f7c75

	// voiAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute simulateSwapVoiForVia(uint64)uint64
	callsub simulateSwapVoiForVia
	itob
	concat
	log
	int 1
	return

simulateSwapVoiForVia:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// src/contracts/voi_swap.algo.ts:294
	// viaBalance = this.getViaBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getViaBalance
	frame_bury 0 // viaBalance: uint256

	// src/contracts/voi_swap.algo.ts:295
	// return this.tokensToSwap(voiAmount, this.getVoiBalance(this.app.address), <uint64>viaBalance);
	frame_dig 0 // viaBalance: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig -1 // voiAmount: uint64
	callsub tokensToSwap

	// set the subroutine return value
	frame_bury 0
	retsub

// simulateSwapVoiForXVia(uint64)uint64
abi_route_simulateSwapVoiForXVia:
	// The ABI return prefix
	byte 0x151f7c75

	// viaAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute simulateSwapVoiForXVia(uint64)uint64
	callsub simulateSwapVoiForXVia
	itob
	concat
	log
	int 1
	return

simulateSwapVoiForXVia:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// src/contracts/voi_swap.algo.ts:299
	// viaBalance = this.getViaBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getViaBalance
	frame_bury 0 // viaBalance: uint256

	// src/contracts/voi_swap.algo.ts:300
	// return this.tokensForSwap(viaAmount, this.getVoiBalance(this.app.address), <uint64>viaBalance);
	frame_dig 0 // viaBalance: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig -1 // viaAmount: uint64
	callsub tokensForSwap

	// set the subroutine return value
	frame_bury 0
	retsub

// swapViaForVoi(uint64,uint64)uint64
abi_route_swapViaForVoi:
	// The ABI return prefix
	byte 0x151f7c75

	// minVoi: uint64
	txna ApplicationArgs 2
	btoi

	// viaAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute swapViaForVoi(uint64,uint64)uint64
	callsub swapViaForVoi
	itob
	concat
	log
	int 1
	return

swapViaForVoi:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1; byte 0x

	// src/contracts/voi_swap.algo.ts:304
	// assert(this.viaTranferFrom(this.txn.sender, this.app.address, <uint<256>>viaAmount))
	frame_dig -1 // viaAmount: uint64
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	global CurrentApplicationAddress
	txn Sender
	callsub viaTranferFrom
	assert

	// src/contracts/voi_swap.algo.ts:306
	// toSwap = this.tokensToSwap(
	//       viaAmount,
	//       <uint64>this.getViaBalance(this.app.address) - viaAmount,
	//       this.getVoiBalance(this.app.address)
	//     )
	global CurrentApplicationAddress
	callsub getVoiBalance
	global CurrentApplicationAddress
	callsub getViaBalance
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	frame_dig -1 // viaAmount: uint64
	-
	frame_dig -1 // viaAmount: uint64
	callsub tokensToSwap
	frame_bury 0 // toSwap: uint64

	// src/contracts/voi_swap.algo.ts:312
	// assert(toSwap > 0)
	frame_dig 0 // toSwap: uint64
	int 0
	>
	assert

	// src/contracts/voi_swap.algo.ts:313
	// assert(toSwap >= minVoi)
	frame_dig 0 // toSwap: uint64
	frame_dig -2 // minVoi: uint64
	>=
	assert

	// src/contracts/voi_swap.algo.ts:315
	// this.transferVoiTo(this.txn.sender, toSwap)
	frame_dig 0 // toSwap: uint64
	txn Sender
	callsub transferVoiTo

	// src/contracts/voi_swap.algo.ts:317
	// this.ratio.value = this.computeRatio()
	byte 0x72 // "r"
	callsub computeRatio
	app_global_put

	// src/contracts/voi_swap.algo.ts:319
	// return toSwap;
	frame_dig 0 // toSwap: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// simulateSwapViaForVoi(uint64)uint64
abi_route_simulateSwapViaForVoi:
	// The ABI return prefix
	byte 0x151f7c75

	// viaAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute simulateSwapViaForVoi(uint64)uint64
	callsub simulateSwapViaForVoi
	itob
	concat
	log
	int 1
	return

simulateSwapViaForVoi:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// src/contracts/voi_swap.algo.ts:323
	// viaBalance = this.getViaBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getViaBalance
	frame_bury 0 // viaBalance: uint256

	// src/contracts/voi_swap.algo.ts:324
	// return this.tokensToSwap(
	//       viaAmount,
	//       <uint64>viaBalance,
	//       this.getVoiBalance(this.app.address)
	//     );
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig 0 // viaBalance: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	frame_dig -1 // viaAmount: uint64
	callsub tokensToSwap

	// set the subroutine return value
	frame_bury 0
	retsub

// simulateSwapViaForXVoi(uint64)uint64
abi_route_simulateSwapViaForXVoi:
	// The ABI return prefix
	byte 0x151f7c75

	// voiAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute simulateSwapViaForXVoi(uint64)uint64
	callsub simulateSwapViaForXVoi
	itob
	concat
	log
	int 1
	return

simulateSwapViaForXVoi:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// src/contracts/voi_swap.algo.ts:332
	// viaBalance = this.getViaBalance(this.app.address)
	global CurrentApplicationAddress
	callsub getViaBalance
	frame_bury 0 // viaBalance: uint256

	// src/contracts/voi_swap.algo.ts:333
	// return this.tokensForSwap(
	//       voiAmount,
	//       <uint64>viaBalance,
	//       this.getVoiBalance(this.app.address)
	//     );
	global CurrentApplicationAddress
	callsub getVoiBalance
	frame_dig 0 // viaBalance: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	frame_dig -1 // voiAmount: uint64
	callsub tokensForSwap

	// set the subroutine return value
	frame_bury 0
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "set_governor(account)void"
	method "bootstrap(pay,uint64)uint64"
	method "bootstrapStep2(axfer,asset)void"
	method "bringOnline(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "bringOffline()void"
	method "emergencyWithdraw()void"
	method "mint(pay,uint64,asset)void"
	method "burn(axfer,asset)void"
	method "swapVoiForVia(pay,uint64)uint64"
	method "simulateSwapVoiForVia(uint64)uint64"
	method "simulateSwapVoiForXVia(uint64)uint64"
	method "swapViaForVoi(uint64,uint64)uint64"
	method "simulateSwapViaForVoi(uint64)uint64"
	method "simulateSwapViaForXVoi(uint64)uint64"
	txna ApplicationArgs 0
	match abi_route_set_governor abi_route_bootstrap abi_route_bootstrapStep2 abi_route_bringOnline abi_route_bringOffline abi_route_emergencyWithdraw abi_route_mint abi_route_burn abi_route_swapVoiForVia abi_route_simulateSwapVoiForVia abi_route_simulateSwapVoiForXVia abi_route_swapViaForVoi abi_route_simulateSwapViaForVoi abi_route_simulateSwapViaForXVoi
	err

call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match abi_route_updateApplication
	err