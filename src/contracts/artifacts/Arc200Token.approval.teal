#pragma version 9

// This TEAL was generated by TEALScript v0.71.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication call_DeleteApplication create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

abi_route_createApplication:
	// manager: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute createApplication(address)void
	callsub createApplication
	int 1
	return

// createApplication(address)void
createApplication:
	proto 1 0

	// src/contracts/Arc200Token.algo.ts:18
	// this.manager.value = manager
	byte 0x6d616e61676572 // "manager"
	frame_dig -1 // manager: Address
	app_global_put
	retsub

abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

// updateApplication()void
updateApplication:
	proto 0 0

	// src/contracts/Arc200Token.algo.ts:22
	// assert(this.manager.value === this.txn.sender)
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	assert
	retsub

abi_route_setManager:
	// The ABI return prefix
	byte 0x151f7c75

	// manager: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setManager(address)bool
	callsub setManager
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// setManager(address)bool
setManager:
	proto 1 1

	// src/contracts/Arc200Token.algo.ts:26
	// assert(this.manager.value === this.txn.sender)
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	assert

	// src/contracts/Arc200Token.algo.ts:27
	// this.manager.value = manager
	byte 0x6d616e61676572 // "manager"
	frame_dig -1 // manager: Address
	app_global_put

	// src/contracts/Arc200Token.algo.ts:28
	// return true;
	int 1
	retsub

// arc200Initialize(address,uint256,uint8,byte[8],byte[32])void
arc200Initialize:
	proto 5 0

	// src/contracts/Arc200Token.algo.ts:38
	// this.metadata.value = {
	//             name: name,
	//             symbol: symbol,
	//             decimals: decimals
	//         }
	byte 0x6d65746164617461 // "metadata"
	frame_dig -1 // name: StaticArray<byte, 32>
	frame_dig -2 // symbol: StaticArray<byte, 8>
	concat
	frame_dig -3 // decimals: uint8
	concat
	box_put

	// src/contracts/Arc200Token.algo.ts:43
	// this.totalSupply.value = totalSupply
	byte 0x746f74616c537570706c79 // "totalSupply"
	frame_dig -4 // totalSupply: uint256
	box_put

	// src/contracts/Arc200Token.algo.ts:45
	// this.balances(mintTo).value = totalSupply
	frame_dig -5 // mintTo: Address
	frame_dig -4 // totalSupply: uint256
	box_put

	// src/contracts/Arc200Token.algo.ts:47
	// this.arc200_Transfer.log({
	//             from: globals.zeroAddress,
	//             to: mintTo,
	//             value: totalSupply
	//         })
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	global ZeroAddress
	frame_dig -5 // mintTo: Address
	concat
	frame_dig -4 // totalSupply: uint256
	concat
	concat
	log
	retsub

abi_route_initialize:
	// mintTo: address
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// totalSupply: uint256
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// decimals: uint8
	txna ApplicationArgs 3
	dup
	len
	int 1
	==
	assert

	// symbol: byte[8]
	txna ApplicationArgs 2
	dup
	len
	int 8
	==
	assert

	// name: byte[32]
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute initialize(address,uint256,uint8,byte[8],byte[32])void
	callsub initialize
	int 1
	return

// initialize(address,uint256,uint8,byte[8],byte[32])void
//
// Initialize ARC200
// @param name token name
// @param symbol token symbol
// @param decimals number of decimals
// @param totalSupply total supply of tokens
// @param mintTo initial mint to
initialize:
	proto 5 0

	// src/contracts/Arc200Token.algo.ts:69
	// assert(this.app.creator === this.txn.sender || this.manager.value === this.txn.sender)
	txna Applications 0
	app_params_get AppCreator
	assert
	txn Sender
	==
	dup
	bnz skip_or0
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	||

skip_or0:
	assert

	// src/contracts/Arc200Token.algo.ts:70
	// assert(!this.totalSupply.exists)
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_len
	swap
	pop
	!
	assert

	// src/contracts/Arc200Token.algo.ts:72
	// this.arc200Initialize(name, symbol, decimals, totalSupply, mintTo)
	frame_dig -5 // mintTo: Address
	frame_dig -4 // totalSupply: uint256
	frame_dig -3 // decimals: uint8
	frame_dig -2 // symbol: StaticArray<byte, 8>
	frame_dig -1 // name: StaticArray<byte, 32>
	callsub arc200Initialize
	retsub

abi_route_arc200_name:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_name()byte[32]
	callsub arc200_name
	concat
	log
	int 1
	return

// arc200_name()byte[32]
//
// The name of the token
// @returns The name of the token
arc200_name:
	proto 0 1

	// src/contracts/Arc200Token.algo.ts:81
	// return this.metadata.value.name;
	byte 0x6d65746164617461 // "metadata"
	box_get
	assert
	extract 0 32
	retsub

abi_route_arc200_symbol:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_symbol()byte[8]
	callsub arc200_symbol
	concat
	log
	int 1
	return

// arc200_symbol()byte[8]
//
// Returns the symbol of the token
// @returns The symbol of the token
arc200_symbol:
	proto 0 1

	// src/contracts/Arc200Token.algo.ts:90
	// return this.metadata.value.symbol;
	byte 0x6d65746164617461 // "metadata"
	box_get
	assert
	extract 32 8
	retsub

abi_route_arc200_decimals:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_decimals()uint8
	callsub arc200_decimals
	concat
	log
	int 1
	return

// arc200_decimals()uint8
//
// Returns the decimals of the token
// @returns The decimals of the token
arc200_decimals:
	proto 0 1

	// src/contracts/Arc200Token.algo.ts:99
	// return this.metadata.value.decimals;
	byte 0x6d65746164617461 // "metadata"
	box_get
	assert
	extract 40 1
	retsub

abi_route_arc200_totalSupply:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_totalSupply()uint256
	callsub arc200_totalSupply
	concat
	log
	int 1
	return

// arc200_totalSupply()uint256
//
// Returns the total supply of the token
// @returns The total supply of the token
arc200_totalSupply:
	proto 0 1

	// src/contracts/Arc200Token.algo.ts:108
	// return this.totalSupply.value - this.arc200_balanceOf(globals.zeroAddress) - this.arc200_balanceOf(this.app.address);
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_get
	assert
	global ZeroAddress
	callsub arc200_balanceOf
	b-
	global CurrentApplicationAddress
	callsub arc200_balanceOf
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	retsub

abi_route_arc200_balanceOf:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_balanceOf(address)uint256
	callsub arc200_balanceOf
	concat
	log
	int 1
	return

// arc200_balanceOf(address)uint256
//
// Returns the current balance of the owner of the token
// @param owner The address of the owner of the token
// @returns The current balance of the holder of the token
arc200_balanceOf:
	proto 1 1

	// if0_condition
	// src/contracts/Arc200Token.algo.ts:118
	// this.balances(owner).exists
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	bz if0_else

	// if0_consequent
	// src/contracts/Arc200Token.algo.ts:119
	// return this.balances(owner).value;
	frame_dig -1 // owner: Address
	box_get
	assert
	retsub
	b if0_end

if0_else:
	// src/contracts/Arc200Token.algo.ts:121
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

if0_end:
	retsub

abi_route_hasBalance:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute hasBalance(address)bool
	callsub hasBalance
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// hasBalance(address)bool
//
// Check if balance box exists
// @param owner The address of the owner
// @returns `true` if balance box exists
hasBalance:
	proto 1 1

	// if1_condition
	// src/contracts/Arc200Token.algo.ts:132
	// this.balances(owner).exists
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	bz if1_end

	// if1_consequent
	// src/contracts/Arc200Token.algo.ts:133
	// return true;
	int 1
	retsub

if1_end:
	// src/contracts/Arc200Token.algo.ts:135
	// return false;
	int 0
	retsub

abi_route_hasAllowance:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute hasAllowance(address,address)bool
	callsub hasAllowance
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// hasAllowance(address,address)bool
//
// Check if allowance box exists
// @param owner The address of the owner
// @param spender The address of the spender
// @returns `true` if allowance box exists
hasAllowance:
	proto 2 1

	// if2_condition
	// src/contracts/Arc200Token.algo.ts:146
	// this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	bz if2_end

	// if2_consequent
	// src/contracts/Arc200Token.algo.ts:147
	// return true;
	int 1
	retsub

if2_end:
	// src/contracts/Arc200Token.algo.ts:149
	// return false;
	int 0
	retsub

abi_route_arc200_allowance:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_allowance(address,address)uint256
	callsub arc200_allowance
	concat
	log
	int 1
	return

// arc200_allowance(address,address)uint256
//
// Returns the current allowance of the spender of the tokens of the owner
// @param owner
// @param spender
// @returns The remaining allowance
arc200_allowance:
	proto 2 1

	// if3_condition
	// src/contracts/Arc200Token.algo.ts:160
	// this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	bz if3_else

	// if3_consequent
	// src/contracts/Arc200Token.algo.ts:161
	// return this.allowances([owner, spender]).value;
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_get
	assert
	retsub
	b if3_end

if3_else:
	// src/contracts/Arc200Token.algo.ts:163
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

if3_end:
	retsub

abi_route_arc200_transfer:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// to: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_transfer(uint256,address)bool
	callsub arc200_transfer
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_transfer(uint256,address)bool
//
// Transfers tokens
// @param to The destination of the transfer
// @param value Amount of tokens to transfer
// @returns Success
arc200_transfer:
	proto 2 1

	// src/contracts/Arc200Token.algo.ts:198
	// return this.transfer(this.txn.sender, to, value);
	frame_dig -2 // value: uint256
	frame_dig -1 // to: Address
	txn Sender
	callsub transfer
	retsub

// transfer(uint256,address,address)bool
transfer:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// src/contracts/Arc200Token.algo.ts:202
	// senderBalance = this.arc200_balanceOf(from)
	frame_dig -1 // from: Address
	callsub arc200_balanceOf
	frame_bury 0 // senderBalance: uint256

	// src/contracts/Arc200Token.algo.ts:203
	// assert(senderBalance >= value)
	frame_dig 0 // senderBalance: uint256
	frame_dig -3 // value: uint256
	b>=
	assert

	// src/contracts/Arc200Token.algo.ts:205
	// senderBalanceAfter = <uint256>(senderBalance - value)
	frame_dig 0 // senderBalance: uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 1 // senderBalanceAfter: uint256

	// if4_condition
	// src/contracts/Arc200Token.algo.ts:206
	// senderBalanceAfter > <uint256>0
	frame_dig 1 // senderBalanceAfter: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if4_elseif1_condition

	// if4_consequent
	// src/contracts/Arc200Token.algo.ts:207
	// this.balances(from).value = senderBalanceAfter
	frame_dig -1 // from: Address
	frame_dig 1 // senderBalanceAfter: uint256
	box_put
	b if4_end

if4_elseif1_condition:
	// src/contracts/Arc200Token.algo.ts:208
	// this.balances(from).exists
	frame_dig -1 // from: Address
	box_len
	swap
	pop
	bz if4_end

	// if4_elseif1_consequent
	// src/contracts/Arc200Token.algo.ts:210
	// this.balances(from).delete()
	frame_dig -1 // from: Address
	box_del

if4_end:
	// src/contracts/Arc200Token.algo.ts:213
	// receiverBalanceAfter = <uint256>(this.arc200_balanceOf(to) + value)
	frame_dig -2 // to: Address
	callsub arc200_balanceOf
	frame_dig -3 // value: uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 2 // receiverBalanceAfter: uint256

	// if5_condition
	// src/contracts/Arc200Token.algo.ts:214
	// receiverBalanceAfter > <uint256>0
	frame_dig 2 // receiverBalanceAfter: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if5_end

	// if5_consequent
	// src/contracts/Arc200Token.algo.ts:215
	// this.balances(to).value = receiverBalanceAfter
	frame_dig -2 // to: Address
	frame_dig 2 // receiverBalanceAfter: uint256
	box_put

if5_end:
	// src/contracts/Arc200Token.algo.ts:218
	// this.arc200_Transfer.log({
	//             from: from,
	//             to: to,
	//             value: value
	//         })
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	frame_dig -1 // from: Address
	frame_dig -2 // to: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/Arc200Token.algo.ts:224
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

abi_route_arc200_approve:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// spender: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_approve(uint256,address)bool
	callsub arc200_approve
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_approve(uint256,address)bool
//
// Approve spender for a token
// @param spender
// @param value
// @returns Success
arc200_approve:
	proto 2 1

	// src/contracts/Arc200Token.algo.ts:234
	// return this.approve(this.txn.sender, spender, value);
	frame_dig -2 // value: uint256
	frame_dig -1 // spender: Address
	txn Sender
	callsub approve
	retsub

// approve(uint256,address,address)bool
approve:
	proto 3 1

	// if6_condition
	// src/contracts/Arc200Token.algo.ts:238
	// value > <uint256>0
	frame_dig -3 // value: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if6_elseif1_condition

	// if6_consequent
	// src/contracts/Arc200Token.algo.ts:239
	// this.allowances([owner, spender]).value = value
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	frame_dig -3 // value: uint256
	box_put
	b if6_end

if6_elseif1_condition:
	// src/contracts/Arc200Token.algo.ts:240
	// this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	bz if6_end

	// if6_elseif1_consequent
	// src/contracts/Arc200Token.algo.ts:241
	// this.allowances([owner, spender]).delete()
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_del

if6_end:
	// src/contracts/Arc200Token.algo.ts:244
	// this.arc200_Approval.log({
	//             owner: owner,
	//             spender: spender,
	//             value: value
	//         })
	byte 0x1969f865 // arc200_Approval(address,address,uint256)
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/Arc200Token.algo.ts:250
	// return true;
	int 1
	retsub

abi_route_arc200_transferFrom:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// to: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// from: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_transferFrom(uint256,address,address)bool
	callsub arc200_transferFrom
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_transferFrom(uint256,address,address)bool
//
// Transfers tokens from source to destination as approved spender
// @param from The source  of the transfer
// @param to The destination of the transfer
// @param value Amount of tokens to transfer
// @returns Success
arc200_transferFrom:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 5

	// src/contracts/Arc200Token.algo.ts:261
	// allowance = this.arc200_allowance(from, this.txn.sender)
	txn Sender
	frame_dig -1 // from: Address
	callsub arc200_allowance
	frame_bury 0 // allowance: uint256

	// src/contracts/Arc200Token.algo.ts:262
	// assert(allowance >= value)
	frame_dig 0 // allowance: uint256
	frame_dig -3 // value: uint256
	b>=
	assert

	// src/contracts/Arc200Token.algo.ts:264
	// ownerBalance = this.arc200_balanceOf(from)
	frame_dig -1 // from: Address
	callsub arc200_balanceOf
	frame_bury 1 // ownerBalance: uint256

	// src/contracts/Arc200Token.algo.ts:265
	// assert(ownerBalance >= value)
	frame_dig 1 // ownerBalance: uint256
	frame_dig -3 // value: uint256
	b>=
	assert

	// src/contracts/Arc200Token.algo.ts:267
	// allowanceAfter = <uint256>(allowance - value)
	frame_dig 0 // allowance: uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 2 // allowanceAfter: uint256

	// if7_condition
	// src/contracts/Arc200Token.algo.ts:268
	// allowanceAfter > <uint256>0
	frame_dig 2 // allowanceAfter: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if7_elseif1_condition

	// if7_consequent
	// src/contracts/Arc200Token.algo.ts:269
	// this.allowances([from, this.txn.sender]).value = allowanceAfter
	frame_dig -1 // from: Address
	txn Sender
	concat
	frame_dig 2 // allowanceAfter: uint256
	box_put
	b if7_end

if7_elseif1_condition:
	// src/contracts/Arc200Token.algo.ts:270
	// this.allowances([from, this.txn.sender]).exists
	frame_dig -1 // from: Address
	txn Sender
	concat
	box_len
	swap
	pop
	bz if7_end

	// if7_elseif1_consequent
	// src/contracts/Arc200Token.algo.ts:272
	// this.allowances([from, this.txn.sender]).delete()
	frame_dig -1 // from: Address
	txn Sender
	concat
	box_del

if7_end:
	// src/contracts/Arc200Token.algo.ts:275
	// ownerBalanceAfter = <uint256>(ownerBalance - value)
	frame_dig 1 // ownerBalance: uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 3 // ownerBalanceAfter: uint256

	// if8_condition
	// src/contracts/Arc200Token.algo.ts:276
	// ownerBalanceAfter > <uint256>0
	frame_dig 3 // ownerBalanceAfter: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if8_elseif1_condition

	// if8_consequent
	// src/contracts/Arc200Token.algo.ts:277
	// this.balances(from).value = ownerBalanceAfter
	frame_dig -1 // from: Address
	frame_dig 3 // ownerBalanceAfter: uint256
	box_put
	b if8_end

if8_elseif1_condition:
	// src/contracts/Arc200Token.algo.ts:278
	// this.balances(from).exists
	frame_dig -1 // from: Address
	box_len
	swap
	pop
	bz if8_end

	// if8_elseif1_consequent
	// src/contracts/Arc200Token.algo.ts:280
	// this.balances(from).delete()
	frame_dig -1 // from: Address
	box_del

if8_end:
	// src/contracts/Arc200Token.algo.ts:283
	// receiverBalanceAfter = <uint256>(this.arc200_balanceOf(to) + value)
	frame_dig -2 // to: Address
	callsub arc200_balanceOf
	frame_dig -3 // value: uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 4 // receiverBalanceAfter: uint256

	// if9_condition
	// src/contracts/Arc200Token.algo.ts:284
	// receiverBalanceAfter > <uint256>0
	frame_dig 4 // receiverBalanceAfter: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if9_end

	// if9_consequent
	// src/contracts/Arc200Token.algo.ts:285
	// this.balances(to).value = receiverBalanceAfter
	frame_dig -2 // to: Address
	frame_dig 4 // receiverBalanceAfter: uint256
	box_put

if9_end:
	// src/contracts/Arc200Token.algo.ts:288
	// this.arc200_Transfer.log({
	//             from: from,
	//             to: to,
	//             value: value
	//         })
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	frame_dig -1 // from: Address
	frame_dig -2 // to: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/Arc200Token.algo.ts:294
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication()void
//
// Delete the app if balance total supply has been burned
deleteApplication:
	proto 0 0

	// src/contracts/Arc200Token.algo.ts:301
	// assert(this.manager.value === this.txn.sender)
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	assert

	// src/contracts/Arc200Token.algo.ts:302
	// assert(this.arc200_balanceOf(globals.zeroAddress) === this.totalSupply.value)
	global ZeroAddress
	callsub arc200_balanceOf
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_get
	assert
	b==
	assert

	// src/contracts/Arc200Token.algo.ts:303
	// this.balances(globals.zeroAddress).delete()
	global ZeroAddress
	box_del

	// src/contracts/Arc200Token.algo.ts:304
	// this.metadata.delete()
	byte 0x6d65746164617461 // "metadata"
	box_del

	// src/contracts/Arc200Token.algo.ts:305
	// this.totalSupply.delete()
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_del

	// src/contracts/Arc200Token.algo.ts:306
	// this.manager.delete()
	byte 0x6d616e61676572 // "manager"
	app_global_del

	// src/contracts/Arc200Token.algo.ts:307
	// sendPayment({
	//             sender: this.app.address,
	//             receiver: this.txn.sender,
	//             amount: 0,
	//             closeRemainderTo: this.txn.sender,
	//             fee: globals.minTxnFee
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/contracts/Arc200Token.algo.ts:308
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/Arc200Token.algo.ts:309
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/contracts/Arc200Token.algo.ts:310
	// amount: 0
	int 0
	itxn_field Amount

	// src/contracts/Arc200Token.algo.ts:311
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// src/contracts/Arc200Token.algo.ts:312
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/contracts/Arc200Token.algo.ts:314
	// assert(this.app.address.balance === 0)
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	assert
	int 0
	==
	assert
	retsub

create_NoOp:
	method "createApplication(address)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "setManager(address)bool"
	method "initialize(byte[32],byte[8],uint8,uint256,address)void"
	method "arc200_name()byte[32]"
	method "arc200_symbol()byte[8]"
	method "arc200_decimals()uint8"
	method "arc200_totalSupply()uint256"
	method "arc200_balanceOf(address)uint256"
	method "hasBalance(address)bool"
	method "hasAllowance(address,address)bool"
	method "arc200_allowance(address,address)uint256"
	method "arc200_transfer(address,uint256)bool"
	method "arc200_approve(address,uint256)bool"
	method "arc200_transferFrom(address,address,uint256)bool"
	txna ApplicationArgs 0
	match abi_route_setManager abi_route_initialize abi_route_arc200_name abi_route_arc200_symbol abi_route_arc200_decimals abi_route_arc200_totalSupply abi_route_arc200_balanceOf abi_route_hasBalance abi_route_hasAllowance abi_route_arc200_allowance abi_route_arc200_transfer abi_route_arc200_approve abi_route_arc200_transferFrom
	err

call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match abi_route_updateApplication
	err

call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match abi_route_deleteApplication
	err