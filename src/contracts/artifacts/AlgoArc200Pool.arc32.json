{
  "hints": {
    "createApplication(address,address,application,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "create_pool_token(pay,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_admin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_governer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_fees(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_mint_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_burn_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_swap_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_online(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_offline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_ratio()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(pay,uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_to_arc200(pay,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_from_arc200(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "admin": {
          "type": "bytes",
          "key": "admin"
        },
        "governer": {
          "type": "bytes",
          "key": "governer"
        },
        "ratio": {
          "type": "uint64",
          "key": "ratio"
        },
        "swap_fee": {
          "type": "uint64",
          "key": "swap_fee"
        },
        "admin_fee": {
          "type": "uint64",
          "key": "admin_fee"
        },
        "lpt_asset": {
          "type": "uint64",
          "key": "lpt_asset"
        },
        "arc200_token": {
          "type": "uint64",
          "key": "arc200_token"
        },
        "mint_enabled": {
          "type": "bytes",
          "key": "mint_enabled"
        },
        "burn_enabled": {
          "type": "bytes",
          "key": "burn_enabled"
        },
        "swap_enabled": {
          "type": "bytes",
          "key": "swap_enabled"
        },
        "initialized": {
          "type": "bytes",
          "key": "initialized"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 6,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AlgoArc200Pool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "initialize values",
        "args": [
          {
            "name": "admin",
            "type": "address"
          },
          {
            "name": "governer",
            "type": "address"
          },
          {
            "name": "arc200_token",
            "type": "application"
          },
          {
            "name": "lp_fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "allows admin to update the application",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_pool_token",
        "args": [
          {
            "name": "algo_seed_txn",
            "type": "pay"
          },
          {
            "name": "lpt_name",
            "type": "string"
          },
          {
            "name": "lpt_unit",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "set_admin",
        "args": [
          {
            "name": "admin",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_governer",
        "args": [
          {
            "name": "governer",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_fees",
        "args": [
          {
            "name": "fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_mint_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_burn_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_swap_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "register_online",
        "args": [
          {
            "name": "selection_pk",
            "type": "byte[]"
          },
          {
            "name": "state_proof_pk",
            "type": "byte[]"
          },
          {
            "name": "vote_pk",
            "type": "byte[]"
          },
          {
            "name": "vote_first",
            "type": "uint64"
          },
          {
            "name": "vote_last",
            "type": "uint64"
          },
          {
            "name": "vote_key_dilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "register_offline",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_ratio",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mint",
        "desc": "*******************************************",
        "args": [
          {
            "name": "pay_txn",
            "type": "pay"
          },
          {
            "name": "arc200_amount",
            "type": "uint64"
          },
          {
            "name": "lpt_asset",
            "type": "asset"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Mint",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "algo_amount",
                "type": "uint64"
              },
              {
                "name": "arc200_amount",
                "type": "uint64"
              },
              {
                "name": "lpt_amount",
                "type": "uint64"
              }
            ],
            "desc": "Event Mint(sender, algo_amount, arc200_amount, lpt_amount_minted)"
          }
        ]
      },
      {
        "name": "burn",
        "desc": "Withdraw liquidity",
        "args": [
          {
            "name": "lpt_xfer_txn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Burn",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "algo_amount",
                "type": "uint64"
              },
              {
                "name": "arc200_amount",
                "type": "uint64"
              },
              {
                "name": "lpt_amount",
                "type": "uint64"
              }
            ],
            "desc": "Event Burn(sender, lpt_amount_burned, algo_amount, arc200_amount)"
          }
        ]
      },
      {
        "name": "swap_to_arc200",
        "desc": "Swap from Algos to Arc200",
        "args": [
          {
            "name": "pay_txn",
            "type": "pay",
            "desc": "Txn with an amount of algos sending to this app account"
          },
          {
            "name": "min_amount",
            "type": "uint64",
            "desc": "min arc200 for this swap to be successful"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "amount of algos returned"
        },
        "events": [
          {
            "name": "Swap",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "from_amount",
                "type": "uint64"
              },
              {
                "name": "to_amount",
                "type": "uint64"
              },
              {
                "name": "is_direction_from_arc200_to_algo",
                "type": "uint8"
              }
            ],
            "desc": "Event Swap(sender, from_amount, to_amount, is_direction_from_arc200_to_algo)"
          }
        ]
      },
      {
        "name": "swap_from_arc200",
        "desc": "Swap tokens from Arc200 to Algos",
        "args": [
          {
            "name": "arc200_amount",
            "type": "uint64",
            "desc": "amount of arc200 approved"
          },
          {
            "name": "min_amount",
            "type": "uint64",
            "desc": "min algo for this swap to be successful"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "amount of algos returned"
        },
        "events": [
          {
            "name": "Swap",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "from_amount",
                "type": "uint64"
              },
              {
                "name": "to_amount",
                "type": "uint64"
              },
              {
                "name": "is_direction_from_arc200_to_algo",
                "type": "uint8"
              }
            ],
            "desc": "Event Swap(sender, from_amount, to_amount, is_direction_from_arc200_to_algo)"
          }
        ]
      }
    ],
    "events": [
      {
        "name": "Swap",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "from_amount",
            "type": "uint64"
          },
          {
            "name": "to_amount",
            "type": "uint64"
          },
          {
            "name": "is_direction_from_arc200_to_algo",
            "type": "uint8"
          }
        ],
        "desc": "Event Swap(sender, from_amount, to_amount, is_direction_from_arc200_to_algo)"
      },
      {
        "name": "Mint",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "algo_amount",
            "type": "uint64"
          },
          {
            "name": "arc200_amount",
            "type": "uint64"
          },
          {
            "name": "lpt_amount",
            "type": "uint64"
          }
        ],
        "desc": "Event Mint(sender, algo_amount, arc200_amount, lpt_amount_minted)"
      },
      {
        "name": "Burn",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "algo_amount",
            "type": "uint64"
          },
          {
            "name": "arc200_amount",
            "type": "uint64"
          },
          {
            "name": "lpt_amount",
            "type": "uint64"
          }
        ],
        "desc": "Event Burn(sender, lpt_amount_burned, algo_amount, arc200_amount)"
      }
    ]
  }
}