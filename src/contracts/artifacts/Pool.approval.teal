#pragma version 10

// This TEAL was generated by TEALScript v0.102.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// arc200_name()byte[32]
*abi_route_arc200_name:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_name()byte[32]
	callsub arc200_name
	concat
	log
	int 1
	return

// arc200_name(): StaticBytes<32>
arc200_name:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:24
	// return this.name.value;
	byte 0x6e616d65 // "name"
	app_global_get
	retsub

// arc200_symbol()byte[8]
*abi_route_arc200_symbol:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_symbol()byte[8]
	callsub arc200_symbol
	concat
	log
	int 1
	return

// arc200_symbol(): StaticBytes<8>
arc200_symbol:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:29
	// return this.symbol.value;
	byte 0x73796d626f6c // "symbol"
	app_global_get
	retsub

// arc200_decimals()uint8
*abi_route_arc200_decimals:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_decimals()uint8
	callsub arc200_decimals
	itob
	dup
	bitlen
	int 8
	<=

	// arc200_decimals return value overflowed 8 bits
	assert
	extract 7 1
	concat
	log
	int 1
	return

// arc200_decimals(): uint8
arc200_decimals:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:34
	// return this.decimals.value;
	byte 0x646563696d616c73 // "decimals"
	app_global_get
	btoi
	retsub

// arc200_totalSupply()uint256
*abi_route_arc200_totalSupply:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_totalSupply()uint256
	callsub arc200_totalSupply
	dup
	bitlen
	int 256
	<=

	// arc200_totalSupply return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_totalSupply(): uint256
arc200_totalSupply:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:39
	// return this.totalSupply.value;
	byte 0x746f74616c5f737570706c79 // "total_supply"
	app_global_get
	retsub

// arc200_balanceOf(address)uint256
*abi_route_arc200_balanceOf:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (owner) for arc200_balanceOf must be a address
	assert

	// execute arc200_balanceOf(address)uint256
	callsub arc200_balanceOf
	dup
	bitlen
	int 256
	<=

	// arc200_balanceOf return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_balanceOf(owner: Address): uint256
arc200_balanceOf:
	proto 1 1

	// *if0_condition
	// src/contracts/lib/Arc200.algo.ts:44
	// this.balances(owner).exists
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// src/contracts/lib/Arc200.algo.ts:45
	// return this.balances(owner).value;
	frame_dig -1 // owner: Address
	box_get

	// box value does not exist: this.balances(owner).value
	assert
	retsub

*if0_end:
	// src/contracts/lib/Arc200.algo.ts:47
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

// arc200_allowance(address,address)uint256
*abi_route_arc200_allowance:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (spender) for arc200_allowance must be a address
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (owner) for arc200_allowance must be a address
	assert

	// execute arc200_allowance(address,address)uint256
	callsub arc200_allowance
	dup
	bitlen
	int 256
	<=

	// arc200_allowance return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_allowance(owner: Address, spender: Address): uint256
arc200_allowance:
	proto 2 1

	// *if1_condition
	// src/contracts/lib/Arc200.algo.ts:52
	// this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	bz *if1_end

	// *if1_consequent
	// src/contracts/lib/Arc200.algo.ts:53
	// return this.allowances([owner, spender]).value;
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_get

	// box value does not exist: this.allowances([owner, spender]).value
	assert
	retsub

*if1_end:
	// src/contracts/lib/Arc200.algo.ts:55
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

// transfer(from: Address, to: Address, value: uint256): boolean
transfer:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if2_condition
	// src/contracts/lib/Arc200.algo.ts:63
	// !this.balances(from).exists && from.balance >= globals.minBalance
	frame_dig -1 // from: Address
	box_len
	swap
	pop
	!
	dup
	bz *skip_and0
	frame_dig -1 // from: Address
	acct_params_get AcctBalance
	pop
	global MinBalance
	>=
	&&

*skip_and0:
	bz *if2_end

	// *if2_consequent
	// src/contracts/lib/Arc200.algo.ts:64
	// this.balances(from).value = <uint256>0
	frame_dig -1 // from: Address
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	box_put

*if2_end:
	// *if3_condition
	// src/contracts/lib/Arc200.algo.ts:66
	// !this.balances(to).exists && to.balance >= globals.minBalance
	frame_dig -2 // to: Address
	box_len
	swap
	pop
	!
	dup
	bz *skip_and1
	frame_dig -2 // to: Address
	acct_params_get AcctBalance
	pop
	global MinBalance
	>=
	&&

*skip_and1:
	bz *if3_end

	// *if3_consequent
	// src/contracts/lib/Arc200.algo.ts:67
	// this.balances(to).value = <uint256>0
	frame_dig -2 // to: Address
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	box_put

*if3_end:
	// src/contracts/lib/Arc200.algo.ts:70
	// assert(this.balances(from).exists, NOT_ENOUGH_BALANCE)
	frame_dig -1 // from: Address
	box_len
	swap
	pop

	// not enough balance
	assert

	// src/contracts/lib/Arc200.algo.ts:71
	// assert(this.balances(to).exists, EMPTY_WALLET)
	frame_dig -2 // to: Address
	box_len
	swap
	pop

	// empty wallet, must hold minBalance
	assert

	// src/contracts/lib/Arc200.algo.ts:73
	// senderBalance = this.balances(from).value
	frame_dig -1 // from: Address
	box_get

	// box value does not exist: this.balances(from).value
	assert
	frame_bury 0 // senderBalance: uint256

	// src/contracts/lib/Arc200.algo.ts:74
	// assert(senderBalance >= value, NOT_ENOUGH_BALANCE)
	frame_dig 0 // senderBalance: uint256
	frame_dig -3 // value: uint256
	b>=

	// not enough balance
	assert

	// src/contracts/lib/Arc200.algo.ts:76
	// this.balances(from).value = senderBalance - value
	frame_dig -1 // from: Address
	frame_dig 0 // senderBalance: uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// senderBalance - value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:77
	// this.balances(to).value = this.balances(to).value + value
	frame_dig -2 // to: Address
	frame_dig -2 // to: Address
	box_get

	// box value does not exist: this.balances(to).value
	assert
	frame_dig -3 // value: uint256
	b+
	dup
	bitlen
	int 256
	<=

	// this.balances(to).value + value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:79
	// this.arc200_Transfer.log({ from: from, to: to, value: value })
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	frame_dig -1 // from: Address
	frame_dig -2 // to: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/lib/Arc200.algo.ts:81
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0
	retsub

// arc200_transfer(address,uint256)bool
*abi_route_arc200_transfer:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (value) for arc200_transfer must be a uint256
	assert

	// to: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (to) for arc200_transfer must be a address
	assert

	// execute arc200_transfer(address,uint256)bool
	callsub arc200_transfer
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_transfer(to: Address, value: uint256): boolean
arc200_transfer:
	proto 2 1

	// src/contracts/lib/Arc200.algo.ts:85
	// return this.transfer(this.txn.sender, to, value);
	frame_dig -2 // value: uint256
	frame_dig -1 // to: Address
	txn Sender
	callsub transfer
	retsub

// approve(owner: Address, spender: Address, value: uint256): boolean
approve:
	proto 3 1

	// src/contracts/lib/Arc200.algo.ts:89
	// assert(this.allowances([owner, spender]).exists || spender.balance >= globals.minBalance, EMPTY_WALLET)
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	dup
	bnz *skip_or0
	frame_dig -2 // spender: Address
	acct_params_get AcctBalance
	pop
	global MinBalance
	>=
	||

*skip_or0:
	// empty wallet, must hold minBalance
	assert

	// src/contracts/lib/Arc200.algo.ts:91
	// this.allowances([owner, spender]).value = value
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	frame_dig -3 // value: uint256
	box_put

	// src/contracts/lib/Arc200.algo.ts:92
	// this.arc200_Approval.log({ owner: owner, spender: spender, value: value })
	byte 0x1969f865 // arc200_Approval(address,address,uint256)
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/lib/Arc200.algo.ts:94
	// return true;
	int 1
	retsub

// arc200_approve(address,uint256)bool
*abi_route_arc200_approve:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (value) for arc200_approve must be a uint256
	assert

	// spender: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (spender) for arc200_approve must be a address
	assert

	// execute arc200_approve(address,uint256)bool
	callsub arc200_approve
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_approve(spender: Address, value: uint256): boolean
arc200_approve:
	proto 2 1

	// src/contracts/lib/Arc200.algo.ts:98
	// return this.approve(this.txn.sender, spender, value);
	frame_dig -2 // value: uint256
	frame_dig -1 // spender: Address
	txn Sender
	callsub approve
	retsub

// arc200_transferFrom(address,address,uint256)bool
*abi_route_arc200_transferFrom:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 0 (value) for arc200_transferFrom must be a uint256
	assert

	// to: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (to) for arc200_transferFrom must be a address
	assert

	// from: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (from) for arc200_transferFrom must be a address
	assert

	// execute arc200_transferFrom(address,address,uint256)bool
	callsub arc200_transferFrom
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_transferFrom(from: Address, to: Address, value: uint256): boolean
arc200_transferFrom:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// *if4_condition
	// src/contracts/lib/Arc200.algo.ts:102
	// value === 0
	frame_dig -3 // value: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b==
	bz *if4_end

	// *if4_consequent
	// src/contracts/lib/Arc200.algo.ts:102
	// return true;
	int 1
	b *arc200_transferFrom*return

*if4_end:
	// src/contracts/lib/Arc200.algo.ts:104
	// allowance = this.arc200_allowance(from, this.txn.sender)
	txn Sender
	frame_dig -1 // from: Address
	callsub arc200_allowance
	frame_bury 0 // allowance: unsafe uint256

	// src/contracts/lib/Arc200.algo.ts:105
	// assert(allowance >= value, ALLOWANCE_INSUFFICIENT)
	frame_dig 0 // allowance: unsafe uint256
	frame_dig -3 // value: uint256
	b>=

	// can't spend more than allowed
	assert

	// src/contracts/lib/Arc200.algo.ts:107
	// ownerBalance = this.arc200_balanceOf(from)
	frame_dig -1 // from: Address
	callsub arc200_balanceOf
	frame_bury 1 // ownerBalance: unsafe uint256

	// src/contracts/lib/Arc200.algo.ts:108
	// assert(ownerBalance >= value, NOT_ENOUGH_BALANCE)
	frame_dig 1 // ownerBalance: unsafe uint256
	frame_dig -3 // value: uint256
	b>=

	// not enough balance
	assert

	// src/contracts/lib/Arc200.algo.ts:110
	// this.allowances([from, this.txn.sender]).value = allowance - value
	frame_dig -1 // from: Address
	txn Sender
	concat
	frame_dig 0 // allowance: unsafe uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// allowance - value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:111
	// this.balances(from).value = ownerBalance - value
	frame_dig -1 // from: Address
	frame_dig 1 // ownerBalance: unsafe uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// ownerBalance - value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:112
	// this.balances(to).value = this.arc200_balanceOf(to) + value
	frame_dig -2 // to: Address
	frame_dig -2 // to: Address
	callsub arc200_balanceOf
	frame_dig -3 // value: uint256
	b+
	dup
	bitlen
	int 256
	<=

	// this.arc200_balanceOf(to) + value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:114
	// this.arc200_Transfer.log({ from: from, to: to, value: value })
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	frame_dig -1 // from: Address
	frame_dig -2 // to: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/lib/Arc200.algo.ts:116
	// return true;
	int 1

*arc200_transferFrom*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// supportsInterface(byte[4])bool
*abi_route_supportsInterface:
	// The ABI return prefix
	byte 0x151f7c75

	// interfaceID: byte[4]
	txna ApplicationArgs 1
	dup
	len
	int 4
	==

	// argument 0 (interfaceID) for supportsInterface must be a byte[4]
	assert

	// execute supportsInterface(byte[4])bool
	callsub supportsInterface
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// supportsInterface(interfaceID: StaticArray<byte, 4>): boolean
supportsInterface:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/contracts/lib/Arc200.algo.ts:121
	// id = btoi(interfaceID)
	frame_dig -1 // interfaceID: StaticArray<byte, 4>
	btoi
	frame_bury 0 // id: uint64

	// src/contracts/lib/Arc200.algo.ts:123
	// return (
	//       id === 0x4e22a3ba ||
	//       id === 0xc7bea040 ||
	//       id === 0xda7025b9 ||
	//       id === 0x4a968f8f ||
	//       id === 0xb5422125 ||
	//       id === 0x657d13ec ||
	//       id === 0xb6ae1a25 ||
	//       id === 0x84ec13d5 ||
	//       id === 0xec996041 ||
	//       id === 0x82e573c4 ||
	//       id === 0xbbb319f3 ||
	//       id === 0x7983c35c ||
	//       id === 0x1969f865 ||
	//       id === 0xbc4a5400 ||
	//       id === 0xc98dd055 ||
	//       id === 0x663042fb
	//     );
	frame_dig 0 // id: uint64
	int 0x4e22a3ba
	==
	dup
	bnz *skip_or1
	frame_dig 0 // id: uint64
	int 0xc7bea040
	==
	||

*skip_or1:
	dup
	bnz *skip_or2
	frame_dig 0 // id: uint64
	int 0xda7025b9
	==
	||

*skip_or2:
	dup
	bnz *skip_or3
	frame_dig 0 // id: uint64
	int 0x4a968f8f
	==
	||

*skip_or3:
	dup
	bnz *skip_or4
	frame_dig 0 // id: uint64
	int 0xb5422125
	==
	||

*skip_or4:
	dup
	bnz *skip_or5
	frame_dig 0 // id: uint64
	int 0x657d13ec
	==
	||

*skip_or5:
	dup
	bnz *skip_or6
	frame_dig 0 // id: uint64
	int 0xb6ae1a25
	==
	||

*skip_or6:
	dup
	bnz *skip_or7
	frame_dig 0 // id: uint64
	int 0x84ec13d5
	==
	||

*skip_or7:
	dup
	bnz *skip_or8
	frame_dig 0 // id: uint64
	int 0xec996041
	==
	||

*skip_or8:
	dup
	bnz *skip_or9
	frame_dig 0 // id: uint64
	int 0x82e573c4
	==
	||

*skip_or9:
	dup
	bnz *skip_or10
	frame_dig 0 // id: uint64
	int 0xbbb319f3
	==
	||

*skip_or10:
	dup
	bnz *skip_or11
	frame_dig 0 // id: uint64
	int 0x7983c35c
	==
	||

*skip_or11:
	dup
	bnz *skip_or12
	frame_dig 0 // id: uint64
	int 0x1969f865
	==
	||

*skip_or12:
	dup
	bnz *skip_or13
	frame_dig 0 // id: uint64
	int 0xbc4a5400
	==
	||

*skip_or13:
	dup
	bnz *skip_or14
	frame_dig 0 // id: uint64
	int 0xc98dd055
	==
	||

*skip_or14:
	dup
	bnz *skip_or15
	frame_dig 0 // id: uint64
	int 0x663042fb
	==
	||

*skip_or15:
	// set the subroutine return value
	frame_bury 0
	retsub

// zeroAddress()address
*abi_route_zeroAddress:
	// The ABI return prefix
	byte 0x151f7c75

	// execute zeroAddress()address
	callsub zeroAddress
	concat
	log
	int 1
	return

// zeroAddress(): Address
zeroAddress:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:145
	// return globals.zeroAddress;
	global ZeroAddress
	retsub

// hasBox(address,address)bool
*abi_route_hasBox:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (spender) for hasBox must be a address
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (owner) for hasBox must be a address
	assert

	// execute hasBox(address,address)bool
	callsub hasBox
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// hasBox(owner: Address, spender: Address): boolean
hasBox:
	proto 2 1

	// *if5_condition
	// src/contracts/lib/Arc200.algo.ts:150
	// spender === globals.zeroAddress
	frame_dig -2 // spender: Address
	global ZeroAddress
	==
	bz *if5_end

	// *if5_consequent
	// src/contracts/lib/Arc200.algo.ts:151
	// return this.balances(owner).exists;
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	retsub

*if5_end:
	// src/contracts/lib/Arc200.algo.ts:153
	// return this.allowances([owner, spender]).exists;
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	retsub

// createBalanceBox(address)bool
*abi_route_createBalanceBox:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (owner) for createBalanceBox must be a address
	assert

	// execute createBalanceBox(address)bool
	callsub createBalanceBox
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// createBalanceBox(owner: Address): boolean
createBalanceBox:
	proto 1 1

	// *if6_condition
	// src/contracts/lib/Arc200.algo.ts:157
	// !this.balances(owner).exists
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	!
	bz *if6_end

	// *if6_consequent
	// src/contracts/lib/Arc200.algo.ts:158
	// this.balances(owner).value = <uint256>0
	frame_dig -1 // owner: Address
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	box_put

*if6_end:
	// src/contracts/lib/Arc200.algo.ts:160
	// return true;
	int 1
	retsub

// createAllowanceBox(address,address)bool
*abi_route_createAllowanceBox:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (spender) for createAllowanceBox must be a address
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (owner) for createAllowanceBox must be a address
	assert

	// execute createAllowanceBox(address,address)bool
	callsub createAllowanceBox
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// createAllowanceBox(owner: Address, spender: Address): boolean
createAllowanceBox:
	proto 2 1

	// *if7_condition
	// src/contracts/lib/Arc200.algo.ts:164
	// !this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	!
	bz *if7_end

	// *if7_consequent
	// src/contracts/lib/Arc200.algo.ts:165
	// this.allowances([owner, spender]).value = <uint256>0
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	box_put

*if7_end:
	// src/contracts/lib/Arc200.algo.ts:167
	// return true;
	int 1
	retsub

// noop(uint64)void
*abi_route_noop:
	// number: uint64
	txna ApplicationArgs 1
	btoi

	// execute noop(uint64)void
	callsub noop
	int 1
	return

// noop(number: uint64): void
noop:
	proto 1 0
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// src/contracts/lib/Ownable.algo.ts:7
	// assert(this.warden.exists, 'this app can not update')
	txna Applications 0
	byte 0x77617264656e // "warden"
	app_global_get_ex
	swap
	pop

	// this app can not update
	assert

	// src/contracts/lib/Ownable.algo.ts:8
	// assert(this.txn.sender === this.warden.value, 'only manager can update')
	txn Sender
	byte 0x77617264656e // "warden"
	app_global_get
	==

	// only manager can update
	assert
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// src/contracts/lib/Ownable.algo.ts:12
	// assert(this.warden.exists, 'this app can not be deleted')
	txna Applications 0
	byte 0x77617264656e // "warden"
	app_global_get_ex
	swap
	pop

	// this app can not be deleted
	assert

	// src/contracts/lib/Ownable.algo.ts:13
	// assert(this.txn.sender === this.warden.value, 'only manager can delete')
	txn Sender
	byte 0x77617264656e // "warden"
	app_global_get
	==

	// only manager can delete
	assert

	// src/contracts/lib/Ownable.algo.ts:14
	// sendPayment({
	//       amount: 0,
	//       sender: this.app.address,
	//       receiver: this.warden.value,
	//       closeRemainderTo: this.warden.value,
	//       rekeyTo: this.warden.value,
	//       fee: globals.minTxnFee,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/contracts/lib/Ownable.algo.ts:15
	// amount: 0
	int 0
	itxn_field Amount

	// src/contracts/lib/Ownable.algo.ts:16
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/lib/Ownable.algo.ts:17
	// receiver: this.warden.value
	byte 0x77617264656e // "warden"
	app_global_get
	itxn_field Receiver

	// src/contracts/lib/Ownable.algo.ts:18
	// closeRemainderTo: this.warden.value
	byte 0x77617264656e // "warden"
	app_global_get
	itxn_field CloseRemainderTo

	// src/contracts/lib/Ownable.algo.ts:19
	// rekeyTo: this.warden.value
	byte 0x77617264656e // "warden"
	app_global_get
	itxn_field RekeyTo

	// src/contracts/lib/Ownable.algo.ts:20
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// manager()address
*abi_route_manager:
	// The ABI return prefix
	byte 0x151f7c75

	// execute manager()address
	callsub manager
	concat
	log
	int 1
	return

// manager(): Address
manager:
	proto 0 1

	// *if8_condition
	// src/contracts/lib/Ownable.algo.ts:26
	// this.warden.exists
	txna Applications 0
	byte 0x77617264656e // "warden"
	app_global_get_ex
	swap
	pop
	bz *if8_end

	// *if8_consequent
	// src/contracts/lib/Ownable.algo.ts:27
	// return this.warden.value;
	byte 0x77617264656e // "warden"
	app_global_get
	retsub

*if8_end:
	// src/contracts/lib/Ownable.algo.ts:29
	// return globals.zeroAddress;
	global ZeroAddress
	retsub

// grant(address)void
*abi_route_grant:
	// manager: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (manager) for grant must be a address
	assert

	// execute grant(address)void
	callsub grant
	int 1
	return

// grant(manager: Address): void
grant:
	proto 1 0

	// src/contracts/lib/Ownable.algo.ts:33
	// assert(this.txn.sender === this.warden.value, 'only manager can grant')
	txn Sender
	byte 0x77617264656e // "warden"
	app_global_get
	==

	// only manager can grant
	assert

	// *if9_condition
	// src/contracts/lib/Ownable.algo.ts:34
	// manager === globals.zeroAddress
	frame_dig -1 // manager: Address
	global ZeroAddress
	==
	bz *if9_else

	// *if9_consequent
	// src/contracts/lib/Ownable.algo.ts:35
	// this.warden.delete()
	byte 0x77617264656e // "warden"
	app_global_del
	b *if9_end

*if9_else:
	// src/contracts/lib/Ownable.algo.ts:37
	// this.warden.value = manager
	byte 0x77617264656e // "warden"
	frame_dig -1 // manager: Address
	app_global_put

*if9_end:
	retsub

// setFees(uint256)bool
*abi_route_setFees:
	// The ABI return prefix
	byte 0x151f7c75

	// fee: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (fee) for setFees must be a uint256
	assert

	// execute setFees(uint256)bool
	callsub setFees
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// setFees(fee: uint256): boolean
setFees:
	proto 1 1

	// src/contracts/pool/1/Pool11.algo.ts:41
	// assert(this.warden.value === this.txn.sender)
	byte 0x77617264656e // "warden"
	app_global_get
	txn Sender
	==
	assert

	// src/contracts/pool/1/Pool11.algo.ts:42
	// this.swapFee.value = fee
	byte 0x737761705f666565 // "swap_fee"
	frame_dig -1 // fee: uint256
	app_global_put

	// src/contracts/pool/1/Pool11.algo.ts:43
	// return true;
	int 1
	retsub

// getAlgoBalance(address: Address): uint256
getAlgoBalance:
	proto 1 1

	// src/contracts/pool/1/Pool12.algo.ts:6
	// return <uint256>(address.balance - address.minBalance);
	frame_dig -1 // address: Address
	acct_params_get AcctBalance
	pop
	frame_dig -1 // address: Address
	acct_params_get AcctMinBalance
	pop
	-
	itob
	retsub

// getAsaBalance(address: Address, assetId: uint64): uint256
getAsaBalance:
	proto 2 1

	// src/contracts/pool/1/Pool12.algo.ts:10
	// return <uint256>address.assetBalance(assetId);
	frame_dig -1 // address: Address
	frame_dig -2 // assetId: uint64
	asset_holding_get AssetBalance
	pop
	itob
	retsub

// getSmartAssetBalance(address: Address, assetId: uint64): uint256
getSmartAssetBalance:
	proto 2 1

	// src/contracts/pool/1/Pool12.algo.ts:14
	// return sendMethodCall<[Address], uint256>({
	//             sender: this.app.address,
	//             name: 'arc200_balanceOf',
	//             applicationID: AppID.fromUint64(assetId),
	//             methodArgs: [address],
	//             fee: globals.minTxnFee,
	//         });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_balanceOf(address)uint256"
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:15
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/pool/1/Pool12.algo.ts:17
	// applicationID: AppID.fromUint64(assetId)
	frame_dig -2 // assetId: uint64
	itxn_field ApplicationID

	// src/contracts/pool/1/Pool12.algo.ts:18
	// methodArgs: [address]
	frame_dig -1 // address: Address
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:19
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	retsub

// transferAlgoTo(to: Address, amount: uint256): boolean
transferAlgoTo:
	proto 2 1

	// src/contracts/pool/1/Pool12.algo.ts:24
	// sendPayment({
	//             sender: this.app.address,
	//             receiver: to,
	//             amount: <uint64>amount,
	//             fee: globals.minTxnFee,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/contracts/pool/1/Pool12.algo.ts:25
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/pool/1/Pool12.algo.ts:26
	// receiver: to
	frame_dig -1 // to: Address
	itxn_field Receiver

	// src/contracts/pool/1/Pool12.algo.ts:27
	// amount: <uint64>amount
	frame_dig -2 // amount: uint256
	dup
	bitlen
	int 64
	<=

	// <uint64>amount overflowed 64 bits
	assert
	extract 24 8
	btoi
	itxn_field Amount

	// src/contracts/pool/1/Pool12.algo.ts:28
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/contracts/pool/1/Pool12.algo.ts:30
	// return true;
	int 1
	retsub

// transferAsaTo(to: Address, amount: uint256, assetId: uint64): boolean
transferAsaTo:
	proto 3 1

	// src/contracts/pool/1/Pool12.algo.ts:34
	// sendAssetTransfer({
	//             sender: this.app.address,
	//             assetAmount: <uint64>amount,
	//             assetReceiver: to,
	//             xferAsset: AssetID.fromUint64(assetId),
	//             fee: globals.minTxnFee,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/contracts/pool/1/Pool12.algo.ts:35
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/pool/1/Pool12.algo.ts:36
	// assetAmount: <uint64>amount
	frame_dig -2 // amount: uint256
	dup
	bitlen
	int 64
	<=

	// <uint64>amount overflowed 64 bits
	assert
	extract 24 8
	btoi
	itxn_field AssetAmount

	// src/contracts/pool/1/Pool12.algo.ts:37
	// assetReceiver: to
	frame_dig -1 // to: Address
	itxn_field AssetReceiver

	// src/contracts/pool/1/Pool12.algo.ts:38
	// xferAsset: AssetID.fromUint64(assetId)
	frame_dig -3 // assetId: uint64
	itxn_field XferAsset

	// src/contracts/pool/1/Pool12.algo.ts:39
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/contracts/pool/1/Pool12.algo.ts:41
	// return true;
	int 1
	retsub

// transferSmartAssetTo(to: Address, amount: uint256, assetId: uint64): boolean
transferSmartAssetTo:
	proto 3 1

	// src/contracts/pool/1/Pool12.algo.ts:45
	// return sendMethodCall<[Address, uint256], boolean>({
	//             sender: this.app.address,
	//             name: 'arc200_transfer',
	//             applicationID: AppID.fromUint64(assetId),
	//             methodArgs: [to, amount],
	//             fee: globals.minTxnFee,
	//         });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_transfer(address,uint256)bool"
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:46
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/pool/1/Pool12.algo.ts:48
	// applicationID: AppID.fromUint64(assetId)
	frame_dig -3 // assetId: uint64
	itxn_field ApplicationID

	// src/contracts/pool/1/Pool12.algo.ts:49
	// methodArgs: [to, amount]
	frame_dig -1 // to: Address
	itxn_field ApplicationArgs
	frame_dig -2 // amount: uint256
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:50
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	int 0
	getbit
	retsub

// getBalance(type: uint8, assetId: uint64): uint256
getBalance:
	proto 2 1

	// *if10_condition
	// src/contracts/pool/1/Pool12.algo.ts:55
	// ALGO === type
	int 0
	frame_dig -1 // type: uint8
	==
	bz *if10_end

	// *if10_consequent
	// src/contracts/pool/1/Pool12.algo.ts:55
	// return <uint256>(this.app.address.balance - this.app.address.minBalance);
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itob
	retsub

*if10_end:
	// *if11_condition
	// src/contracts/pool/1/Pool12.algo.ts:56
	// ASA === type
	int 1
	frame_dig -1 // type: uint8
	==
	bz *if11_end

	// *if11_consequent
	// src/contracts/pool/1/Pool12.algo.ts:56
	// return <uint256>this.app.address.assetBalance(assetId);
	global CurrentApplicationAddress
	frame_dig -2 // assetId: uint64
	asset_holding_get AssetBalance
	pop
	itob
	retsub

*if11_end:
	// *if12_condition
	// src/contracts/pool/1/Pool12.algo.ts:57
	// SMART === type
	int 2
	frame_dig -1 // type: uint8
	==
	bz *if12_end

	// *if12_consequent
	// src/contracts/pool/1/Pool12.algo.ts:58
	// return sendMethodCall<[Address], uint256>({
	//                 sender: this.app.address,
	//                 name: 'arc200_balanceOf',
	//                 applicationID: AppID.fromUint64(assetId),
	//                 methodArgs: [this.app.address],
	//                 fee: globals.minTxnFee,
	//             });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_balanceOf(address)uint256"
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:59
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/pool/1/Pool12.algo.ts:61
	// applicationID: AppID.fromUint64(assetId)
	frame_dig -2 // assetId: uint64
	itxn_field ApplicationID

	// src/contracts/pool/1/Pool12.algo.ts:62
	// methodArgs: [this.app.address]
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:63
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	retsub

*if12_end:
	// src/contracts/pool/1/Pool12.algo.ts:66
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

// getDecimals(type: uint8, assetId: uint64): uint8
getDecimals:
	proto 2 1

	// *if13_condition
	// src/contracts/pool/1/Pool12.algo.ts:70
	// ALGO === type
	int 0
	frame_dig -1 // type: uint8
	==
	bz *if13_end

	// *if13_consequent
	// src/contracts/pool/1/Pool12.algo.ts:70
	// return <uint8>6;
	int 6
	retsub

*if13_end:
	// *if14_condition
	// src/contracts/pool/1/Pool12.algo.ts:71
	// ASA === type
	int 1
	frame_dig -1 // type: uint8
	==
	bz *if14_end

	// *if14_consequent
	// src/contracts/pool/1/Pool12.algo.ts:71
	// return <uint8>AssetID.fromUint64(assetId).decimals;
	frame_dig -2 // assetId: uint64
	asset_params_get AssetDecimals
	pop
	retsub

*if14_end:
	// *if15_condition
	// src/contracts/pool/1/Pool12.algo.ts:72
	// SMART === type
	int 2
	frame_dig -1 // type: uint8
	==
	bz *if15_end

	// *if15_consequent
	// src/contracts/pool/1/Pool12.algo.ts:73
	// return sendMethodCall<[], uint8>({
	//                 sender: this.app.address,
	//                 name: 'arc200_decimals',
	//                 applicationID: AppID.fromUint64(assetId),
	//                 methodArgs: [],
	//                 fee: globals.minTxnFee,
	//             });
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_decimals()uint8"
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:74
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/pool/1/Pool12.algo.ts:76
	// applicationID: AppID.fromUint64(assetId)
	frame_dig -2 // assetId: uint64
	itxn_field ApplicationID

	// src/contracts/pool/1/Pool12.algo.ts:77
	// methodArgs: []
	// src/contracts/pool/1/Pool12.algo.ts:78
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	retsub

*if15_end:
	// src/contracts/pool/1/Pool12.algo.ts:80
	// return <uint8>0;
	int 0
	retsub

// alphaBalance(): uint256
alphaBalance:
	proto 0 1

	// src/contracts/pool/1/Pool12.algo.ts:84
	// return this.getBalance(this.alphaType.value, this.alphaId.value);
	byte 0x616c7068615f6964 // "alpha_id"
	app_global_get
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	callsub getBalance
	retsub

// betaBalance(): uint256
betaBalance:
	proto 0 1

	// src/contracts/pool/1/Pool12.algo.ts:88
	// return this.getBalance(this.betaType.value, this.betaId.value);
	byte 0x626574615f6964 // "beta_id"
	app_global_get
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	callsub getBalance
	retsub

// alphaDecimals(): uint8
alphaDecimals:
	proto 0 1

	// src/contracts/pool/1/Pool12.algo.ts:92
	// return this.getDecimals(this.alphaType.value, this.alphaId.value);
	byte 0x616c7068615f6964 // "alpha_id"
	app_global_get
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	callsub getDecimals
	retsub

// betaDecimals(): uint8
betaDecimals:
	proto 0 1

	// src/contracts/pool/1/Pool12.algo.ts:96
	// return this.getDecimals(this.betaType.value, this.betaId.value);
	byte 0x626574615f6964 // "beta_id"
	app_global_get
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	callsub getDecimals
	retsub

// alphaTransfer(to: Address, amount: uint256): boolean
alphaTransfer:
	proto 2 1

	// *if16_condition
	// src/contracts/pool/1/Pool12.algo.ts:100
	// this.alphaType.value === ALGO
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	int 0
	==
	bz *if16_end

	// *if16_consequent
	// src/contracts/pool/1/Pool12.algo.ts:101
	// return this.transferAlgoTo(to, amount);
	frame_dig -2 // amount: uint256
	frame_dig -1 // to: Address
	callsub transferAlgoTo
	retsub

*if16_end:
	// *if17_condition
	// src/contracts/pool/1/Pool12.algo.ts:103
	// this.alphaType.value === ASA
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	int 1
	==
	bz *if17_end

	// *if17_consequent
	// src/contracts/pool/1/Pool12.algo.ts:104
	// return this.transferAsaTo(to, amount, this.alphaId.value);
	byte 0x616c7068615f6964 // "alpha_id"
	app_global_get
	frame_dig -2 // amount: uint256
	frame_dig -1 // to: Address
	callsub transferAsaTo
	retsub

*if17_end:
	// *if18_condition
	// src/contracts/pool/1/Pool12.algo.ts:106
	// this.alphaType.value === SMART
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	int 2
	==
	bz *if18_end

	// *if18_consequent
	// src/contracts/pool/1/Pool12.algo.ts:107
	// return this.transferSmartAssetTo(to, amount, this.alphaId.value);
	byte 0x616c7068615f6964 // "alpha_id"
	app_global_get
	frame_dig -2 // amount: uint256
	frame_dig -1 // to: Address
	callsub transferSmartAssetTo
	retsub

*if18_end:
	// src/contracts/pool/1/Pool12.algo.ts:109
	// return false;
	int 0
	retsub

// betaTransfer(to: Address, amount: uint256): boolean
betaTransfer:
	proto 2 1

	// *if19_condition
	// src/contracts/pool/1/Pool12.algo.ts:113
	// this.betaType.value === ALGO
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	int 0
	==
	bz *if19_end

	// *if19_consequent
	// src/contracts/pool/1/Pool12.algo.ts:114
	// return this.transferAlgoTo(to, amount);
	frame_dig -2 // amount: uint256
	frame_dig -1 // to: Address
	callsub transferAlgoTo
	retsub

*if19_end:
	// *if20_condition
	// src/contracts/pool/1/Pool12.algo.ts:116
	// this.betaType.value === ASA
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	int 1
	==
	bz *if20_end

	// *if20_consequent
	// src/contracts/pool/1/Pool12.algo.ts:117
	// return this.transferAsaTo(to, amount, this.betaId.value);
	byte 0x626574615f6964 // "beta_id"
	app_global_get
	frame_dig -2 // amount: uint256
	frame_dig -1 // to: Address
	callsub transferAsaTo
	retsub

*if20_end:
	// *if21_condition
	// src/contracts/pool/1/Pool12.algo.ts:119
	// this.betaType.value === SMART
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	int 2
	==
	bz *if21_end

	// *if21_consequent
	// src/contracts/pool/1/Pool12.algo.ts:120
	// return this.transferSmartAssetTo(to, amount, this.betaId.value);
	byte 0x626574615f6964 // "beta_id"
	app_global_get
	frame_dig -2 // amount: uint256
	frame_dig -1 // to: Address
	callsub transferSmartAssetTo
	retsub

*if21_end:
	// src/contracts/pool/1/Pool12.algo.ts:122
	// return false;
	int 0
	retsub

// extendBudget(): void
extendBudget:
	proto 0 0

	// src/contracts/pool/1/Pool12.algo.ts:126
	// sendMethodCall<[uint64], void>({
	//             name: 'noop',
	//             methodArgs: [0],
	//             sender: this.app.address,
	//             applicationID: this.factory.value,
	//             fee: globals.minTxnFee
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "noop(uint64)void"
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:128
	// methodArgs: [0]
	byte 0x0000000000000000
	itxn_field ApplicationArgs

	// src/contracts/pool/1/Pool12.algo.ts:129
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/pool/1/Pool12.algo.ts:130
	// applicationID: this.factory.value
	byte 0x666163746f7279 // "factory"
	app_global_get
	itxn_field ApplicationID

	// src/contracts/pool/1/Pool12.algo.ts:131
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// powOfTen(pow: uint64): uint256
powOfTen:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/contracts/pool/2/Pool21.algo.ts:6
	// result: uint256 = 1
	byte 0x0000000000000000000000000000000000000000000000000000000000000001
	frame_bury 0 // result: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:8
	// for (let i: uint64 = 0; i < pow; i = i + 1)
	int 0
	frame_bury 1 // i: uint64

*for_0:
	// src/contracts/pool/2/Pool21.algo.ts:8
	// i < pow
	frame_dig 1 // i: uint64
	frame_dig -1 // pow: uint64
	<
	bz *for_0_end

	// src/contracts/pool/2/Pool21.algo.ts:9
	// result = result * <uint256>10
	frame_dig 0 // result: unsafe uint256
	byte 0x000000000000000000000000000000000000000000000000000000000000000a
	b*
	frame_bury 0 // result: unsafe uint256

*for_0_continue:
	// src/contracts/pool/2/Pool21.algo.ts:8
	// i = i + 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// src/contracts/pool/2/Pool21.algo.ts:12
	// return result;
	frame_dig 0 // result: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// handleAddLiquidity(alphaAmount: uint256, betaAmount: uint256): boolean
handleAddLiquidity:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 10

	// src/contracts/pool/2/Pool21.algo.ts:16
	// assert(alphaAmount > 0 && betaAmount > 0, 'amount must be > zero')
	frame_dig -1 // alphaAmount: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	dup
	bz *skip_and2
	frame_dig -2 // betaAmount: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	&&

*skip_and2:
	// amount must be > zero
	assert

	// src/contracts/pool/2/Pool21.algo.ts:18
	// alphaBalance = this.alphaBalance()
	callsub alphaBalance
	frame_bury 0 // alphaBalance: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:19
	// betaBalance = this.betaBalance()
	callsub betaBalance
	frame_bury 1 // betaBalance: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:20
	// issuedLptBefore = <uint256>(this.totalSupply.value - this.arc200_balanceOf(this.app.address))
	byte 0x746f74616c5f737570706c79 // "total_supply"
	app_global_get
	global CurrentApplicationAddress
	callsub arc200_balanceOf
	b-
	frame_bury 2 // issuedLptBefore: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:21
	// lptToMint = <uint256>0
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_bury 3 // lptToMint: unsafe uint256

	// *if22_condition
	// src/contracts/pool/2/Pool21.algo.ts:23
	// issuedLptBefore === <uint256>0
	frame_dig 2 // issuedLptBefore: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b==
	bz *if22_else

	// *if22_consequent
	// src/contracts/pool/2/Pool21.algo.ts:24
	// alphaDecimals = this.alphaDecimals()
	callsub alphaDecimals
	frame_bury 4 // alphaDecimals: unsafe uint8

	// src/contracts/pool/2/Pool21.algo.ts:25
	// betaDecimals = this.betaDecimals()
	callsub betaDecimals
	frame_bury 5 // betaDecimals: unsafe uint8

	// src/contracts/pool/2/Pool21.algo.ts:27
	// alphaNormalized = <uint64>((alphaAmount * this.powOfTen(DECIMALS)) / this.powOfTen(<uint64>alphaDecimals))
	frame_dig -1 // alphaAmount: uint256
	int 6
	callsub powOfTen
	b*
	frame_dig 4 // alphaDecimals: unsafe uint8
	callsub powOfTen
	b/
	dup
	bitlen
	int 64
	<=

	// <uint64>((alphaAmount * this.powOfTen(DECIMALS)) / this.powOfTen(<uint64>alphaDecimals)) overflowed 64 bits
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 6 // alphaNormalized: uint64

	// src/contracts/pool/2/Pool21.algo.ts:28
	// betaNormalized = <uint64>((betaAmount * this.powOfTen(DECIMALS)) / this.powOfTen(<uint64>betaDecimals))
	frame_dig -2 // betaAmount: uint256
	int 6
	callsub powOfTen
	b*
	frame_dig 5 // betaDecimals: unsafe uint8
	callsub powOfTen
	b/
	dup
	bitlen
	int 64
	<=

	// <uint64>((betaAmount * this.powOfTen(DECIMALS)) / this.powOfTen(<uint64>betaDecimals)) overflowed 64 bits
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 7 // betaNormalized: uint64

	// src/contracts/pool/2/Pool21.algo.ts:30
	// lptToMint = <uint256>sqrt(alphaNormalized * betaNormalized)
	frame_dig 6 // alphaNormalized: uint64
	frame_dig 7 // betaNormalized: uint64
	*
	sqrt
	itob
	frame_bury 3 // lptToMint: unsafe uint256
	b *if22_end

*if22_else:
	// src/contracts/pool/2/Pool21.algo.ts:32
	// ratioAlpha = <uint256>((alphaAmount * <uint256>SCALE) / (alphaBalance - alphaAmount))
	frame_dig -1 // alphaAmount: uint256
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b*
	frame_dig 0 // alphaBalance: unsafe uint256
	frame_dig -1 // alphaAmount: uint256
	b-
	b/
	frame_bury 8 // ratioAlpha: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:33
	// ratioBeta = <uint256>((betaAmount * <uint256>SCALE) / (betaBalance - betaAmount))
	frame_dig -2 // betaAmount: uint256
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b*
	frame_dig 1 // betaBalance: unsafe uint256
	frame_dig -2 // betaAmount: uint256
	b-
	b/
	frame_bury 9 // ratioBeta: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:34
	// ratio = ratioAlpha < ratioBeta ? ratioAlpha : ratioBeta
	frame_dig 8 // ratioAlpha: unsafe uint256
	frame_dig 9 // ratioBeta: unsafe uint256
	b<
	bz *ternary0_false
	frame_dig 8 // ratioAlpha: unsafe uint256
	b *ternary0_end

*ternary0_false:
	frame_dig 9 // ratioBeta: unsafe uint256

*ternary0_end:
	frame_bury 10 // ratio: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:36
	// lptToMint = (issuedLptBefore * ratio) / <uint256>SCALE
	frame_dig 2 // issuedLptBefore: unsafe uint256
	frame_dig 10 // ratio: unsafe uint256
	b*
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b/
	frame_bury 3 // lptToMint: unsafe uint256

*if22_end:
	// src/contracts/pool/2/Pool21.algo.ts:39
	// assert(lptToMint > <uint256>0)
	frame_dig 3 // lptToMint: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/pool/2/Pool21.algo.ts:40
	// assert(this.transfer(this.app.address, this.txn.sender, lptToMint))
	frame_dig 3 // lptToMint: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// lptToMint overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	txn Sender
	global CurrentApplicationAddress
	callsub transfer
	assert

	// src/contracts/pool/2/Pool21.algo.ts:42
	// this.Deposit.log({
	//       sender: this.txn.sender,
	//       inAmts: [alphaAmount, betaAmount],
	//       outLpt: lptToMint,
	//       poolBals: [alphaBalance, betaBalance],
	//     })
	byte 0x3d013e7d // Deposit(address,(uint256,uint256),uint256,(uint256,uint256))
	txn Sender
	frame_dig -1 // alphaAmount: uint256
	frame_dig -2 // betaAmount: uint256
	concat
	concat
	frame_dig 3 // lptToMint: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// lptToMint overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	frame_dig 0 // alphaBalance: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// alphaBalance overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 1 // betaBalance: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// betaBalance overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	concat
	concat
	log

	// src/contracts/pool/2/Pool21.algo.ts:49
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 10
	retsub

// removeLiquidity(uint256)bool
*abi_route_removeLiquidity:
	// The ABI return prefix
	byte 0x151f7c75

	// lptAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (lptAmount) for removeLiquidity must be a uint256
	assert

	// execute removeLiquidity(uint256)bool
	callsub removeLiquidity
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// removeLiquidity(lptAmount: uint256): boolean
removeLiquidity:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// src/contracts/pool/2/Pool21.algo.ts:53
	// alphaBalance: uint256 = this.alphaBalance()
	callsub alphaBalance
	dup
	bitlen
	int 256
	<=

	// this.alphaBalance() overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 0 // alphaBalance: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:54
	// betaBalance: uint256 = this.betaBalance()
	callsub betaBalance
	dup
	bitlen
	int 256
	<=

	// this.betaBalance() overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 1 // betaBalance: unsafe uint256

	// src/contracts/pool/2/Pool21.algo.ts:56
	// assert(alphaBalance > <uint256>0 && betaBalance > <uint256>0, 'balance must be > zero')
	frame_dig 0 // alphaBalance: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	dup
	bz *skip_and3
	frame_dig 1 // betaBalance: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	&&

*skip_and3:
	// balance must be > zero
	assert

	// src/contracts/pool/2/Pool21.algo.ts:58
	// txnFees = <uint256>(4 * globals.minTxnFee)
	int 4
	global MinTxnFee
	*
	itob
	frame_bury 2 // txnFees: unsafe uint256

	// *if23_condition
	// src/contracts/pool/2/Pool21.algo.ts:59
	// this.alphaType.value === ALGO
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	int 0
	==
	bz *if23_elseif1_condition

	// *if23_consequent
	// src/contracts/pool/2/Pool21.algo.ts:60
	// alphaBalance = alphaBalance - txnFees
	frame_dig 0 // alphaBalance: unsafe uint256
	frame_dig 2 // txnFees: unsafe uint256
	b-
	frame_bury 0 // alphaBalance: unsafe uint256
	b *if23_end

*if23_elseif1_condition:
	// src/contracts/pool/2/Pool21.algo.ts:61
	// this.betaType.value === ALGO
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	int 0
	==
	bz *if23_end

	// *if23_elseif1_consequent
	// src/contracts/pool/2/Pool21.algo.ts:62
	// betaBalance = betaBalance - txnFees
	frame_dig 1 // betaBalance: unsafe uint256
	frame_dig 2 // txnFees: unsafe uint256
	b-
	frame_bury 1 // betaBalance: unsafe uint256

*if23_end:
	// src/contracts/pool/2/Pool21.algo.ts:65
	// issuedLptBefore: uint256 = this.totalSupply.value - this.arc200_balanceOf(this.app.address)
	byte 0x746f74616c5f737570706c79 // "total_supply"
	app_global_get
	global CurrentApplicationAddress
	callsub arc200_balanceOf
	b-
	dup
	bitlen
	int 256
	<=

	// this.totalSupply.value - this.arc200_balanceOf(this.app.address) overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 3 // issuedLptBefore: uint256

	// src/contracts/pool/2/Pool21.algo.ts:66
	// alphaAmount: uint256 = (alphaBalance * lptAmount) / issuedLptBefore
	frame_dig 0 // alphaBalance: unsafe uint256
	frame_dig -1 // lptAmount: uint256
	b*
	frame_dig 3 // issuedLptBefore: uint256
	b/
	dup
	bitlen
	int 256
	<=

	// (alphaBalance * lptAmount) / issuedLptBefore overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 4 // alphaAmount: uint256

	// src/contracts/pool/2/Pool21.algo.ts:67
	// betaAmount: uint256 = (betaBalance * lptAmount) / issuedLptBefore
	frame_dig 1 // betaBalance: unsafe uint256
	frame_dig -1 // lptAmount: uint256
	b*
	frame_dig 3 // issuedLptBefore: uint256
	b/
	dup
	bitlen
	int 256
	<=

	// (betaBalance * lptAmount) / issuedLptBefore overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 5 // betaAmount: uint256

	// src/contracts/pool/2/Pool21.algo.ts:69
	// assert(alphaAmount > 0 && betaAmount > 0, 'amount must be > zero')
	frame_dig 4 // alphaAmount: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	dup
	bz *skip_and4
	frame_dig 5 // betaAmount: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	&&

*skip_and4:
	// amount must be > zero
	assert

	// src/contracts/pool/2/Pool21.algo.ts:71
	// assert(this.transfer(this.txn.sender, this.app.address, lptAmount))
	frame_dig -1 // lptAmount: uint256
	global CurrentApplicationAddress
	txn Sender
	callsub transfer
	assert

	// src/contracts/pool/2/Pool21.algo.ts:72
	// assert(this.alphaTransfer(this.txn.sender, alphaAmount))
	frame_dig 4 // alphaAmount: uint256
	txn Sender
	callsub alphaTransfer
	assert

	// src/contracts/pool/2/Pool21.algo.ts:73
	// assert(this.betaTransfer(this.txn.sender, betaAmount))
	frame_dig 5 // betaAmount: uint256
	txn Sender
	callsub betaTransfer
	assert

	// src/contracts/pool/2/Pool21.algo.ts:75
	// finalBalanceX: uint256 = alphaBalance - alphaAmount
	frame_dig 0 // alphaBalance: unsafe uint256
	frame_dig 4 // alphaAmount: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// alphaBalance - alphaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 6 // finalBalanceX: uint256

	// src/contracts/pool/2/Pool21.algo.ts:76
	// finalBalanceY: uint256 = betaBalance - betaAmount
	frame_dig 1 // betaBalance: unsafe uint256
	frame_dig 5 // betaAmount: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// betaBalance - betaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 7 // finalBalanceY: uint256

	// src/contracts/pool/2/Pool21.algo.ts:78
	// this.Withdraw.log({
	//       sender: this.txn.sender,
	//       inLpt: lptAmount,
	//       outAmts: [alphaAmount, betaAmount],
	//       poolBals: [finalBalanceX, finalBalanceY],
	//     })
	byte 0xa68e655c // Withdraw(address,uint256,(uint256,uint256),(uint256,uint256))
	txn Sender
	frame_dig -1 // lptAmount: uint256
	concat
	frame_dig 4 // alphaAmount: uint256
	frame_dig 5 // betaAmount: uint256
	concat
	concat
	frame_dig 6 // finalBalanceX: uint256
	frame_dig 7 // finalBalanceY: uint256
	concat
	concat
	concat
	log

	// src/contracts/pool/2/Pool21.algo.ts:85
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// verifyDepositTxn(txn: Txn, assetType: uint8, assetId: uint64): uint256
verifyDepositTxn:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if24_condition
	// src/contracts/pool/2/Pool22.algo.ts:7
	// assetType === ALGO
	frame_dig -2 // assetType: uint8
	int 0
	==
	bz *if24_elseif1_condition

	// *if24_consequent
	// src/contracts/pool/2/Pool22.algo.ts:9
	// verifyTxn(txn, {
	//         typeEnum: TransactionType.Payment,
	//         sender: this.txn.sender,
	//         receiver: this.app.address,
	//         amount: { greaterThan: 0 },
	//         rekeyTo: globals.zeroAddress,
	//         closeRemainderTo: globals.zeroAddress,
	//       })
	// verify typeEnum
	frame_dig -1 // txn: Txn
	gtxns TypeEnum
	int pay
	==

	// transaction verification failed: {"txn":"txn","field":"typeEnum","expected":"TransactionType.Payment"}
	assert

	// verify sender
	frame_dig -1 // txn: Txn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"txn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // txn: Txn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"txn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // txn: Txn
	gtxns Amount
	int 0
	>

	// transaction verification failed: {"txn":"txn","field":"amount","condition":"greaterThan","expected":">0"}
	assert

	// verify rekeyTo
	frame_dig -1 // txn: Txn
	gtxns RekeyTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"txn","field":"rekeyTo","expected":"globals.zeroAddress"}
	assert

	// verify closeRemainderTo
	frame_dig -1 // txn: Txn
	gtxns CloseRemainderTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"txn","field":"closeRemainderTo","expected":"globals.zeroAddress"}
	assert

	// src/contracts/pool/2/Pool22.algo.ts:18
	// return <uint256>txn.amount;
	frame_dig -1 // txn: Txn
	gtxns Amount
	itob
	b *verifyDepositTxn*return
	b *if24_end

*if24_elseif1_condition:
	// src/contracts/pool/2/Pool22.algo.ts:20
	// assetType === ASA
	frame_dig -2 // assetType: uint8
	int 1
	==
	bz *if24_elseif2_condition

	// *if24_elseif1_consequent
	// src/contracts/pool/2/Pool22.algo.ts:22
	// verifyTxn(txn, {
	//         typeEnum: TransactionType.AssetTransfer,
	//         xferAsset: AssetID.fromUint64(assetId),
	//         sender: this.txn.sender,
	//         assetReceiver: this.app.address,
	//         assetAmount: { greaterThan: 0 },
	//         rekeyTo: globals.zeroAddress,
	//         assetCloseTo: globals.zeroAddress,
	//       })
	// verify typeEnum
	frame_dig -1 // txn: Txn
	gtxns TypeEnum
	int axfer
	==

	// transaction verification failed: {"txn":"txn","field":"typeEnum","expected":"TransactionType.AssetTransfer"}
	assert

	// verify xferAsset
	frame_dig -1 // txn: Txn
	gtxns XferAsset
	frame_dig -3 // assetId: uint64
	==

	// transaction verification failed: {"txn":"txn","field":"xferAsset","expected":"AssetID.fromUint64(assetId)"}
	assert

	// verify sender
	frame_dig -1 // txn: Txn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"txn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // txn: Txn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"txn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -1 // txn: Txn
	gtxns AssetAmount
	int 0
	>

	// transaction verification failed: {"txn":"txn","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// verify rekeyTo
	frame_dig -1 // txn: Txn
	gtxns RekeyTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"txn","field":"rekeyTo","expected":"globals.zeroAddress"}
	assert

	// verify assetCloseTo
	frame_dig -1 // txn: Txn
	gtxns AssetCloseTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"txn","field":"assetCloseTo","expected":"globals.zeroAddress"}
	assert

	// src/contracts/pool/2/Pool22.algo.ts:32
	// return <uint256>txn.assetAmount;
	frame_dig -1 // txn: Txn
	gtxns AssetAmount
	itob
	b *verifyDepositTxn*return
	b *if24_end

*if24_elseif2_condition:
	// src/contracts/pool/2/Pool22.algo.ts:34
	// assetType === SMART
	frame_dig -2 // assetType: uint8
	int 2
	==
	bz *if24_end

	// *if24_elseif2_consequent
	// src/contracts/pool/2/Pool22.algo.ts:36
	// verifyTxn(txn, {
	//         typeEnum: TransactionType.ApplicationCall,
	//         onCompletion: OnCompletion.NoOp,
	//         applicationID: AppID.fromUint64(assetId),
	//         sender: this.txn.sender,
	//         lastLog: hex('0x151f7c7580')
	//       })
	// verify typeEnum
	frame_dig -1 // txn: Txn
	gtxns TypeEnum
	int appl
	==

	// transaction verification failed: {"txn":"txn","field":"typeEnum","expected":"TransactionType.ApplicationCall"}
	assert

	// verify onCompletion
	frame_dig -1 // txn: Txn
	gtxns OnCompletion
	int 0 // NoOp
	==

	// transaction verification failed: {"txn":"txn","field":"onCompletion","expected":"OnCompletion.NoOp"}
	assert

	// verify applicationID
	frame_dig -1 // txn: Txn
	gtxns ApplicationID
	frame_dig -3 // assetId: uint64
	==

	// transaction verification failed: {"txn":"txn","field":"applicationID","expected":"AppID.fromUint64(assetId)"}
	assert

	// verify sender
	frame_dig -1 // txn: Txn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"txn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify lastLog
	frame_dig -1 // txn: Txn
	gtxns LastLog
	byte 0x151f7c7580
	==

	// transaction verification failed: {"txn":"txn","field":"lastLog","expected":"hex('0x151f7c7580')"}
	assert

	// src/contracts/pool/2/Pool22.algo.ts:43
	// amount: uint256 = castBytes<uint256>(txn.applicationArgs[2])
	frame_dig -1 // txn: Txn
	gtxns ApplicationArgs 2
	frame_bury 0 // amount: uint256

	// src/contracts/pool/2/Pool22.algo.ts:44
	// assert(txn.applicationArgs[0] === method('arc200_transfer(address,uint256)bool'))
	frame_dig -1 // txn: Txn
	gtxns ApplicationArgs 0
	method "arc200_transfer(address,uint256)bool"
	==
	assert

	// src/contracts/pool/2/Pool22.algo.ts:45
	// assert(txn.applicationArgs[1] === rawBytes(this.app.address))
	frame_dig -1 // txn: Txn
	gtxns ApplicationArgs 1
	global CurrentApplicationAddress
	==
	assert

	// src/contracts/pool/2/Pool22.algo.ts:46
	// assert(amount > <uint256>0)
	frame_dig 0 // amount: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/pool/2/Pool22.algo.ts:48
	// return amount;
	frame_dig 0 // amount: uint256
	b *verifyDepositTxn*return

*if24_end:
	// src/contracts/pool/2/Pool22.algo.ts:51
	// assert(0)
	int 0
	assert

	// src/contracts/pool/2/Pool22.algo.ts:52
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000

*verifyDepositTxn*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// addLiquidity(txn,txn)bool
*abi_route_addLiquidity:
	// The ABI return prefix
	byte 0x151f7c75

	// betaTxn: txn
	txn GroupIndex
	int 1
	-

	// alphaTxn: txn
	txn GroupIndex
	int 2
	-

	// execute addLiquidity(txn,txn)bool
	callsub addLiquidity
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// addLiquidity(alphaTxn: Txn, betaTxn: Txn): boolean
addLiquidity:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// *if25_condition
	// src/contracts/pool/2/Pool22.algo.ts:56
	// alphaTxn.typeEnum !== TransactionType.ApplicationCall
	frame_dig -1 // alphaTxn: Txn
	gtxns TypeEnum
	int appl
	!=
	bz *if25_end

	// *if25_consequent
	// src/contracts/pool/2/Pool22.algo.ts:57
	// this.extendBudget()
	callsub extendBudget

*if25_end:
	// *if26_condition
	// src/contracts/pool/2/Pool22.algo.ts:60
	// betaTxn.typeEnum !== TransactionType.ApplicationCall
	frame_dig -2 // betaTxn: Txn
	gtxns TypeEnum
	int appl
	!=
	bz *if26_end

	// *if26_consequent
	// src/contracts/pool/2/Pool22.algo.ts:61
	// this.extendBudget()
	callsub extendBudget

*if26_end:
	// src/contracts/pool/2/Pool22.algo.ts:64
	// alphaAmount = this.verifyDepositTxn(alphaTxn, this.alphaType.value, this.alphaId.value)
	byte 0x616c7068615f6964 // "alpha_id"
	app_global_get
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	frame_dig -1 // alphaTxn: Txn
	callsub verifyDepositTxn
	frame_bury 0 // alphaAmount: unsafe uint256

	// src/contracts/pool/2/Pool22.algo.ts:65
	// betaAmount = this.verifyDepositTxn(betaTxn, this.betaType.value, this.betaId.value)
	byte 0x626574615f6964 // "beta_id"
	app_global_get
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	frame_dig -2 // betaTxn: Txn
	callsub verifyDepositTxn
	frame_bury 1 // betaAmount: unsafe uint256

	// src/contracts/pool/2/Pool22.algo.ts:67
	// assert(alphaAmount > <uint256>0 && betaAmount > <uint256>0)
	frame_dig 0 // alphaAmount: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	dup
	bz *skip_and5
	frame_dig 1 // betaAmount: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	&&

*skip_and5:
	assert

	// src/contracts/pool/2/Pool22.algo.ts:69
	// return this.handleAddLiquidity(alphaAmount, betaAmount);
	frame_dig 1 // betaAmount: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// betaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 0 // alphaAmount: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// alphaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub handleAddLiquidity

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// computeOutTokens(alphaAmount: uint256, alphaSupply: uint256, betaSupply: uint256, fee: uint256): uint256
computeOutTokens:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// src/contracts/pool/3/Pool31.algo.ts:7
	// factor = <uint256>SCALE - fee
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	frame_dig -4 // fee: uint256
	b-
	frame_bury 0 // factor: unsafe uint256

	// src/contracts/pool/3/Pool31.algo.ts:9
	// numerator = <uint<512>>alphaAmount * <uint<512>>betaSupply * <uint<512>>factor
	frame_dig -1 // alphaAmount: uint256
	frame_dig -3 // betaSupply: uint256
	b*
	frame_dig 0 // factor: unsafe uint256
	b*
	frame_bury 1 // numerator: unsafe uint512

	// src/contracts/pool/3/Pool31.algo.ts:10
	// denominator = (<uint<512>>alphaAmount + <uint<512>>alphaSupply) * <uint<512>>SCALE
	frame_dig -1 // alphaAmount: uint256
	frame_dig -2 // alphaSupply: uint256
	b+
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000
	b*
	frame_bury 2 // denominator: unsafe uint512

	// src/contracts/pool/3/Pool31.algo.ts:12
	// return <uint256>(numerator / denominator);
	frame_dig 1 // numerator: unsafe uint512
	frame_dig 2 // denominator: unsafe uint512
	b/

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// handleSwapAlphaToBeta(alphaAmount: uint256, minBetaAmount: uint256): uint256
handleSwapAlphaToBeta:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 5

	// src/contracts/pool/3/Pool31.algo.ts:16
	// alphaBalance: uint256 = this.alphaBalance()
	callsub alphaBalance
	dup
	bitlen
	int 256
	<=

	// this.alphaBalance() overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 0 // alphaBalance: uint256

	// src/contracts/pool/3/Pool31.algo.ts:17
	// betaBalance: uint256 = this.betaBalance()
	callsub betaBalance
	dup
	bitlen
	int 256
	<=

	// this.betaBalance() overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 1 // betaBalance: uint256

	// src/contracts/pool/3/Pool31.algo.ts:18
	// assert(alphaBalance > 0)
	frame_dig 0 // alphaBalance: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/pool/3/Pool31.algo.ts:19
	// assert(betaBalance > minBetaAmount)
	frame_dig 1 // betaBalance: uint256
	frame_dig -2 // minBetaAmount: uint256
	b>
	assert

	// src/contracts/pool/3/Pool31.algo.ts:21
	// platformFee = this.factory.value.globalState('platform_fee') as uint256
	byte 0x666163746f7279 // "factory"
	app_global_get
	byte 0x706c6174666f726d5f666565 // "platform_fee"
	app_global_get_ex

	// global state value does not exist: this.factory.value.globalState('platform_fee')
	assert
	frame_bury 2 // platformFee: uint256

	// src/contracts/pool/3/Pool31.algo.ts:22
	// amountOut: uint256 = this.computeOutTokens(
	//       alphaAmount,
	//       alphaBalance - alphaAmount,
	//       betaBalance,
	//       this.swapFee.value + platformFee
	//     )
	byte 0x737761705f666565 // "swap_fee"
	app_global_get
	frame_dig 2 // platformFee: uint256
	b+
	dup
	bitlen
	int 256
	<=

	// this.swapFee.value + platformFee overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 1 // betaBalance: uint256
	frame_dig 0 // alphaBalance: uint256
	frame_dig -1 // alphaAmount: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// alphaBalance - alphaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig -1 // alphaAmount: uint256
	callsub computeOutTokens
	dup
	bitlen
	int 256
	<=

	// this.computeOutTokens(\n      alphaAmount,\n      alphaBalance - alphaAmount,\n      betaBalance,\n      this.swapFee.value + platformFee\n    ) overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 3 // amountOut: uint256

	// src/contracts/pool/3/Pool31.algo.ts:28
	// amountWOPFee: uint256 = this.computeOutTokens(
	//       alphaAmount,
	//       alphaBalance - alphaAmount,
	//       betaBalance,
	//       this.swapFee.value
	//     )
	byte 0x737761705f666565 // "swap_fee"
	app_global_get
	frame_dig 1 // betaBalance: uint256
	frame_dig 0 // alphaBalance: uint256
	frame_dig -1 // alphaAmount: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// alphaBalance - alphaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig -1 // alphaAmount: uint256
	callsub computeOutTokens
	dup
	bitlen
	int 256
	<=

	// this.computeOutTokens(\n      alphaAmount,\n      alphaBalance - alphaAmount,\n      betaBalance,\n      this.swapFee.value\n    ) overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 4 // amountWOPFee: uint256

	// src/contracts/pool/3/Pool31.algo.ts:34
	// platformFeeAmt = <uint256>(<uint256>amountWOPFee - <uint256>amountOut)
	frame_dig 4 // amountWOPFee: uint256
	frame_dig 3 // amountOut: uint256
	b-
	frame_bury 5 // platformFeeAmt: unsafe uint256

	// src/contracts/pool/3/Pool31.algo.ts:35
	// assert(amountOut >= minBetaAmount)
	frame_dig 3 // amountOut: uint256
	frame_dig -2 // minBetaAmount: uint256
	b>=
	assert

	// src/contracts/pool/3/Pool31.algo.ts:36
	// assert(amountOut < betaBalance)
	frame_dig 3 // amountOut: uint256
	frame_dig 1 // betaBalance: uint256
	b<
	assert

	// src/contracts/pool/3/Pool31.algo.ts:37
	// assert(this.betaTransfer(this.txn.sender, amountOut))
	frame_dig 3 // amountOut: uint256
	txn Sender
	callsub betaTransfer
	assert

	// src/contracts/pool/3/Pool31.algo.ts:38
	// assert(this.betaTransfer(this.factory.value.address, platformFeeAmt))
	frame_dig 5 // platformFeeAmt: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// platformFeeAmt overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x666163746f7279 // "factory"
	app_global_get
	app_params_get AppAddress
	pop
	callsub betaTransfer
	assert

	// src/contracts/pool/3/Pool31.algo.ts:39
	// this.Swap.log({
	//       sender: this.txn.sender,
	//       inAmts: [alphaAmount, 0],
	//       outAmts: [0, amountOut],
	//       poolBals: [alphaBalance, <uint256>(betaBalance - amountWOPFee)],
	//     })
	byte 0x7048d0ea // Swap(address,(uint256,uint256),(uint256,uint256),(uint256,uint256))
	txn Sender
	frame_dig -1 // alphaAmount: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_dig 3 // amountOut: uint256
	concat
	concat
	frame_dig 0 // alphaBalance: uint256
	frame_dig 1 // betaBalance: uint256
	frame_dig 4 // amountWOPFee: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// <uint256>(betaBalance - amountWOPFee) overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	concat
	concat
	log

	// src/contracts/pool/3/Pool31.algo.ts:45
	// return amountOut;
	frame_dig 3 // amountOut: uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// handleSwapBetaToAlpha(betaAmount: uint256, minAlphaAmount: uint256): uint256
handleSwapBetaToAlpha:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 5

	// src/contracts/pool/3/Pool31.algo.ts:49
	// alphaBalance: uint256 = this.alphaBalance()
	callsub alphaBalance
	dup
	bitlen
	int 256
	<=

	// this.alphaBalance() overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 0 // alphaBalance: uint256

	// src/contracts/pool/3/Pool31.algo.ts:50
	// betaBalance: uint256 = this.betaBalance()
	callsub betaBalance
	dup
	bitlen
	int 256
	<=

	// this.betaBalance() overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 1 // betaBalance: uint256

	// src/contracts/pool/3/Pool31.algo.ts:51
	// assert(alphaBalance > minAlphaAmount)
	frame_dig 0 // alphaBalance: uint256
	frame_dig -2 // minAlphaAmount: uint256
	b>
	assert

	// src/contracts/pool/3/Pool31.algo.ts:52
	// assert(betaBalance > 0)
	frame_dig 1 // betaBalance: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/pool/3/Pool31.algo.ts:54
	// platformFee = this.factory.value.globalState('platform_fee') as uint256
	byte 0x666163746f7279 // "factory"
	app_global_get
	byte 0x706c6174666f726d5f666565 // "platform_fee"
	app_global_get_ex

	// global state value does not exist: this.factory.value.globalState('platform_fee')
	assert
	frame_bury 2 // platformFee: uint256

	// src/contracts/pool/3/Pool31.algo.ts:55
	// amountOut: uint256 = this.computeOutTokens(
	//       betaAmount,
	//       betaBalance - betaAmount,
	//       alphaBalance,
	//       this.swapFee.value + platformFee
	//     )
	byte 0x737761705f666565 // "swap_fee"
	app_global_get
	frame_dig 2 // platformFee: uint256
	b+
	dup
	bitlen
	int 256
	<=

	// this.swapFee.value + platformFee overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 0 // alphaBalance: uint256
	frame_dig 1 // betaBalance: uint256
	frame_dig -1 // betaAmount: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// betaBalance - betaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig -1 // betaAmount: uint256
	callsub computeOutTokens
	dup
	bitlen
	int 256
	<=

	// this.computeOutTokens(\n      betaAmount,\n      betaBalance - betaAmount,\n      alphaBalance,\n      this.swapFee.value + platformFee\n    ) overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 3 // amountOut: uint256

	// src/contracts/pool/3/Pool31.algo.ts:61
	// amountWOPFee: uint256 = this.computeOutTokens(
	//       betaAmount,
	//       betaBalance - betaAmount,
	//       alphaBalance,
	//       this.swapFee.value
	//     )
	byte 0x737761705f666565 // "swap_fee"
	app_global_get
	frame_dig 0 // alphaBalance: uint256
	frame_dig 1 // betaBalance: uint256
	frame_dig -1 // betaAmount: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// betaBalance - betaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig -1 // betaAmount: uint256
	callsub computeOutTokens
	dup
	bitlen
	int 256
	<=

	// this.computeOutTokens(\n      betaAmount,\n      betaBalance - betaAmount,\n      alphaBalance,\n      this.swapFee.value\n    ) overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_bury 4 // amountWOPFee: uint256

	// src/contracts/pool/3/Pool31.algo.ts:67
	// platformFeeAmt = <uint256>(<uint256>amountWOPFee - <uint256>amountOut)
	frame_dig 4 // amountWOPFee: uint256
	frame_dig 3 // amountOut: uint256
	b-
	frame_bury 5 // platformFeeAmt: unsafe uint256

	// src/contracts/pool/3/Pool31.algo.ts:68
	// assert(amountOut >= minAlphaAmount)
	frame_dig 3 // amountOut: uint256
	frame_dig -2 // minAlphaAmount: uint256
	b>=
	assert

	// src/contracts/pool/3/Pool31.algo.ts:69
	// assert(amountOut < alphaBalance)
	frame_dig 3 // amountOut: uint256
	frame_dig 0 // alphaBalance: uint256
	b<
	assert

	// src/contracts/pool/3/Pool31.algo.ts:70
	// assert(this.alphaTransfer(this.txn.sender, amountOut))
	frame_dig 3 // amountOut: uint256
	txn Sender
	callsub alphaTransfer
	assert

	// src/contracts/pool/3/Pool31.algo.ts:71
	// assert(this.alphaTransfer(this.factory.value.address, platformFeeAmt))
	frame_dig 5 // platformFeeAmt: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// platformFeeAmt overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x666163746f7279 // "factory"
	app_global_get
	app_params_get AppAddress
	pop
	callsub alphaTransfer
	assert

	// src/contracts/pool/3/Pool31.algo.ts:72
	// this.Swap.log({
	//       sender: this.txn.sender,
	//       inAmts: [0, betaAmount],
	//       outAmts: [amountOut, 0],
	//       poolBals: [<uint256>(alphaBalance - amountWOPFee), betaBalance],
	//     })
	byte 0x7048d0ea // Swap(address,(uint256,uint256),(uint256,uint256),(uint256,uint256))
	txn Sender
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_dig -1 // betaAmount: uint256
	concat
	concat
	frame_dig 3 // amountOut: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	concat
	frame_dig 0 // alphaBalance: uint256
	frame_dig 4 // amountWOPFee: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// <uint256>(alphaBalance - amountWOPFee) overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 1 // betaBalance: uint256
	concat
	concat
	concat
	log

	// src/contracts/pool/3/Pool31.algo.ts:78
	// return amountOut;
	frame_dig 3 // amountOut: uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// swapAlphaToBeta(txn,uint256)uint256
*abi_route_swapAlphaToBeta:
	// The ABI return prefix
	byte 0x151f7c75

	// minBetaAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (minBetaAmount) for swapAlphaToBeta must be a uint256
	assert

	// alphaTxn: txn
	txn GroupIndex
	int 1
	-

	// execute swapAlphaToBeta(txn,uint256)uint256
	callsub swapAlphaToBeta
	dup
	bitlen
	int 256
	<=

	// swapAlphaToBeta return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// swapAlphaToBeta(alphaTxn: Txn, minBetaAmount: uint256): uint256
swapAlphaToBeta:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if27_condition
	// src/contracts/pool/3/Pool32.algo.ts:6
	// alphaTxn.typeEnum !== TransactionType.ApplicationCall
	frame_dig -1 // alphaTxn: Txn
	gtxns TypeEnum
	int appl
	!=
	bz *if27_end

	// *if27_consequent
	// src/contracts/pool/3/Pool32.algo.ts:6
	// this.extendBudget()
	callsub extendBudget

*if27_end:
	// src/contracts/pool/3/Pool32.algo.ts:7
	// alphaAmount = this.verifyDepositTxn(alphaTxn, this.alphaType.value, this.alphaId.value)
	byte 0x616c7068615f6964 // "alpha_id"
	app_global_get
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	frame_dig -1 // alphaTxn: Txn
	callsub verifyDepositTxn
	frame_bury 0 // alphaAmount: unsafe uint256

	// src/contracts/pool/3/Pool32.algo.ts:9
	// return this.handleSwapAlphaToBeta(alphaAmount, minBetaAmount);
	frame_dig -2 // minBetaAmount: uint256
	frame_dig 0 // alphaAmount: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// alphaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub handleSwapAlphaToBeta

	// set the subroutine return value
	frame_bury 0
	retsub

// swapBetaToAlpha(txn,uint256)uint256
*abi_route_swapBetaToAlpha:
	// The ABI return prefix
	byte 0x151f7c75

	// minAlphaAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (minAlphaAmount) for swapBetaToAlpha must be a uint256
	assert

	// betaTxn: txn
	txn GroupIndex
	int 1
	-

	// execute swapBetaToAlpha(txn,uint256)uint256
	callsub swapBetaToAlpha
	dup
	bitlen
	int 256
	<=

	// swapBetaToAlpha return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// swapBetaToAlpha(betaTxn: Txn, minAlphaAmount: uint256): uint256
swapBetaToAlpha:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if28_condition
	// src/contracts/pool/3/Pool32.algo.ts:13
	// betaTxn.typeEnum !== TransactionType.ApplicationCall
	frame_dig -1 // betaTxn: Txn
	gtxns TypeEnum
	int appl
	!=
	bz *if28_end

	// *if28_consequent
	// src/contracts/pool/3/Pool32.algo.ts:13
	// this.extendBudget()
	callsub extendBudget

*if28_end:
	// src/contracts/pool/3/Pool32.algo.ts:14
	// betaAmount = this.verifyDepositTxn(betaTxn, this.betaType.value, this.betaId.value)
	byte 0x626574615f6964 // "beta_id"
	app_global_get
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	frame_dig -1 // betaTxn: Txn
	callsub verifyDepositTxn
	frame_bury 0 // betaAmount: unsafe uint256

	// src/contracts/pool/3/Pool32.algo.ts:16
	// return this.handleSwapBetaToAlpha(betaAmount, minAlphaAmount);
	frame_dig -2 // minAlphaAmount: uint256
	frame_dig 0 // betaAmount: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// betaAmount overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub handleSwapBetaToAlpha

	// set the subroutine return value
	frame_bury 0
	retsub

// createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void
*abi_route_createApplication:
	// swapFee: uint256
	txna ApplicationArgs 9
	dup
	len
	int 32
	==

	// argument 0 (swapFee) for createApplication must be a uint256
	assert

	// betaType: uint8
	txna ApplicationArgs 8
	dup
	len
	int 1
	==

	// argument 1 (betaType) for createApplication must be a uint8
	assert
	btoi

	// betaId: uint64
	txna ApplicationArgs 7
	btoi

	// alphaType: uint8
	txna ApplicationArgs 6
	dup
	len
	int 1
	==

	// argument 3 (alphaType) for createApplication must be a uint8
	assert
	btoi

	// alphaId: uint64
	txna ApplicationArgs 5
	btoi

	// symbol: byte[8]
	txna ApplicationArgs 4
	dup
	len
	int 8
	==

	// argument 5 (symbol) for createApplication must be a byte[8]
	assert

	// name: byte[32]
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 6 (name) for createApplication must be a byte[32]
	assert

	// manager: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 7 (manager) for createApplication must be a address
	assert

	// factory: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void
	callsub createApplication
	int 1
	return

// createApplication(factory: AppID, manager: Address, name: StaticBytes<32>, symbol: StaticBytes<8>, alphaId: uint64, alphaType: uint8, betaId: uint64, betaType: uint8, swapFee: uint256): void
createApplication:
	proto 9 0

	// src/contracts/Pool.algo.ts:16
	// this.warden.value = manager
	byte 0x77617264656e // "warden"
	frame_dig -2 // manager: Address
	app_global_put

	// src/contracts/Pool.algo.ts:17
	// this.name.value = name
	byte 0x6e616d65 // "name"
	frame_dig -3 // name: StaticBytes<32>
	app_global_put

	// src/contracts/Pool.algo.ts:18
	// this.symbol.value = symbol
	byte 0x73796d626f6c // "symbol"
	frame_dig -4 // symbol: StaticBytes<8>
	app_global_put

	// src/contracts/Pool.algo.ts:19
	// this.decimals.value = <uint8>DECIMALS
	byte 0x646563696d616c73 // "decimals"
	byte 0x06
	app_global_put

	// src/contracts/Pool.algo.ts:20
	// this.totalSupply.value = <uint256>SCALE * <uint256>(10 ** DECIMALS)
	byte 0x746f74616c5f737570706c79 // "total_supply"
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	int 10
	int 6
	exp
	itob
	b*
	dup
	bitlen
	int 256
	<=

	// <uint256>SCALE * <uint256>(10 ** DECIMALS) overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// src/contracts/Pool.algo.ts:21
	// this.initialized.value = false
	byte 0x696e697469616c697a6564 // "initialized"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put

	// src/contracts/Pool.algo.ts:23
	// this.factory.value = factory
	byte 0x666163746f7279 // "factory"
	frame_dig -1 // factory: AppID
	app_global_put

	// src/contracts/Pool.algo.ts:24
	// this.alphaId.value = alphaId
	byte 0x616c7068615f6964 // "alpha_id"
	frame_dig -5 // alphaId: uint64
	app_global_put

	// src/contracts/Pool.algo.ts:25
	// this.betaId.value = betaId
	byte 0x626574615f6964 // "beta_id"
	frame_dig -7 // betaId: uint64
	app_global_put

	// src/contracts/Pool.algo.ts:26
	// this.alphaType.value = alphaType
	byte 0x616c7068615f74797065 // "alpha_type"
	frame_dig -6 // alphaType: uint8
	itob
	extract 7 1
	app_global_put

	// src/contracts/Pool.algo.ts:27
	// this.betaType.value = betaType
	byte 0x626574615f74797065 // "beta_type"
	frame_dig -8 // betaType: uint8
	itob
	extract 7 1
	app_global_put

	// src/contracts/Pool.algo.ts:28
	// this.swapFee.value = swapFee
	byte 0x737761705f666565 // "swap_fee"
	frame_dig -9 // swapFee: uint256
	app_global_put
	retsub

// bootstrap()void
*abi_route_bootstrap:
	// execute bootstrap()void
	callsub bootstrap
	int 1
	return

// bootstrap(): void
bootstrap:
	proto 0 0

	// src/contracts/Pool.algo.ts:32
	// assert(this.txn.sender === this.warden.value, 'only manager can call bootstrap')
	txn Sender
	byte 0x77617264656e // "warden"
	app_global_get
	==

	// only manager can call bootstrap
	assert

	// src/contracts/Pool.algo.ts:33
	// assert(this.initialized.value !== true, 'already initialized')
	byte 0x696e697469616c697a6564 // "initialized"
	app_global_get
	int 0
	getbit
	int 1
	!=

	// already initialized
	assert

	// src/contracts/Pool.algo.ts:34
	// this.initialized.value = true
	byte 0x696e697469616c697a6564 // "initialized"
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put

	// src/contracts/Pool.algo.ts:35
	// this.balances(this.app.address).value = this.totalSupply.value
	global CurrentApplicationAddress
	byte 0x746f74616c5f737570706c79 // "total_supply"
	app_global_get
	box_put

	// *if29_condition
	// src/contracts/Pool.algo.ts:37
	// this.alphaType.value === ASA
	byte 0x616c7068615f74797065 // "alpha_type"
	app_global_get
	btoi
	int 1
	==
	bz *if29_end

	// *if29_consequent
	// src/contracts/Pool.algo.ts:38
	// assert(this.transferAsaTo(this.app.address, <uint256>0, this.alphaId.value), 'optin failed')
	byte 0x616c7068615f6964 // "alpha_id"
	app_global_get
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	global CurrentApplicationAddress
	callsub transferAsaTo

	// optin failed
	assert

*if29_end:
	// *if30_condition
	// src/contracts/Pool.algo.ts:40
	// this.betaType.value === ASA
	byte 0x626574615f74797065 // "beta_type"
	app_global_get
	btoi
	int 1
	==
	bz *if30_end

	// *if30_consequent
	// src/contracts/Pool.algo.ts:41
	// assert(this.transferAsaTo(this.app.address, <uint256>0, this.betaId.value), 'optin failed')
	byte 0x626574615f6964 // "beta_id"
	app_global_get
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	global CurrentApplicationAddress
	callsub transferAsaTo

	// optin failed
	assert

*if30_end:
	retsub

*create_NoOp:
	method "createApplication(uint64,address,byte[32],byte[8],uint64,uint8,uint64,uint8,uint256)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "arc200_name()byte[32]"
	method "arc200_symbol()byte[8]"
	method "arc200_decimals()uint8"
	method "arc200_totalSupply()uint256"
	method "arc200_balanceOf(address)uint256"
	method "arc200_allowance(address,address)uint256"
	method "arc200_transfer(address,uint256)bool"
	method "arc200_approve(address,uint256)bool"
	method "arc200_transferFrom(address,address,uint256)bool"
	method "supportsInterface(byte[4])bool"
	method "zeroAddress()address"
	method "hasBox(address,address)bool"
	method "createBalanceBox(address)bool"
	method "createAllowanceBox(address,address)bool"
	method "noop(uint64)void"
	method "manager()address"
	method "grant(address)void"
	method "setFees(uint256)bool"
	method "removeLiquidity(uint256)bool"
	method "addLiquidity(txn,txn)bool"
	method "swapAlphaToBeta(txn,uint256)uint256"
	method "swapBetaToAlpha(txn,uint256)uint256"
	method "bootstrap()void"
	txna ApplicationArgs 0
	match *abi_route_arc200_name *abi_route_arc200_symbol *abi_route_arc200_decimals *abi_route_arc200_totalSupply *abi_route_arc200_balanceOf *abi_route_arc200_allowance *abi_route_arc200_transfer *abi_route_arc200_approve *abi_route_arc200_transferFrom *abi_route_supportsInterface *abi_route_zeroAddress *abi_route_hasBox *abi_route_createBalanceBox *abi_route_createAllowanceBox *abi_route_noop *abi_route_manager *abi_route_grant *abi_route_setFees *abi_route_removeLiquidity *abi_route_addLiquidity *abi_route_swapAlphaToBeta *abi_route_swapBetaToAlpha *abi_route_bootstrap

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err