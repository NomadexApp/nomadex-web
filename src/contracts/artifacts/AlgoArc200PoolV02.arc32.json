{
  "hints": {
    "createApplication(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "setManager(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initialize(byte[32],byte[8],uint8,uint256,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_name()byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_symbol()byte[8]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_decimals()uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_totalSupply()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_balanceOf(address)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hasBalance(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hasAllowance(address,address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_allowance(address,address)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transfer(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_approve(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transferFrom(address,address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "poolInitialize(byte[32],byte[8],application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFeeController(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFees(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPlatformFees(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ratio()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(pay,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidity(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swapXtoY(pay,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swapYtoX(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "feeController": {
          "type": "bytes",
          "key": "fee_controller"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNzIuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCBjYWxsX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9VcGRhdGVBcHBsaWNhdGlvbiBjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQKCk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gbWFuYWdlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAxIDAKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MTgKCS8vIHRoaXMubWFuYWdlci52YWx1ZSA9IG1hbmFnZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWZyYW1lX2RpZyAtMSAvLyBtYW5hZ2VyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIHVwZGF0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIHVwZGF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAp1cGRhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMgoJLy8gYXNzZXJ0KHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCXJldHN1YgoKYWJpX3JvdXRlX3NldE1hbmFnZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIG1hbmFnZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldE1hbmFnZXIoYWRkcmVzcylib29sCgljYWxsc3ViIHNldE1hbmFnZXIKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gc2V0TWFuYWdlcihhZGRyZXNzKWJvb2wKc2V0TWFuYWdlcjoKCXByb3RvIDEgMQoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNgoJLy8gYXNzZXJ0KHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjcKCS8vIHRoaXMubWFuYWdlci52YWx1ZSA9IG1hbmFnZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWZyYW1lX2RpZyAtMSAvLyBtYW5hZ2VyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyOAoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgovLyBhcmMyMDBJbml0aWFsaXplKGFkZHJlc3MsdWludDI1Nix1aW50OCxieXRlWzhdLGJ5dGVbMzJdKXZvaWQKYXJjMjAwSW5pdGlhbGl6ZToKCXByb3RvIDUgMAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czozOAoJLy8gdGhpcy5tZXRhZGF0YS52YWx1ZSA9IHsKCS8vICAgICAgICAgICAgIG5hbWU6IG5hbWUsCgkvLyAgICAgICAgICAgICBzeW1ib2w6IHN5bWJvbCwKCS8vICAgICAgICAgICAgIGRlY2ltYWxzOiBkZWNpbWFscwoJLy8gICAgICAgICB9CglieXRlIDB4NmQ2NTc0NjE2NDYxNzQ2MSAvLyAibWV0YWRhdGEiCglmcmFtZV9kaWcgLTEgLy8gbmFtZTogU3RhdGljQXJyYXk8Ynl0ZSwgMzI+CglmcmFtZV9kaWcgLTIgLy8gc3ltYm9sOiBTdGF0aWNBcnJheTxieXRlLCA4PgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gZGVjaW1hbHM6IHVpbnQ4CglpdG9iCglleHRyYWN0IDcgMQoJY29uY2F0Cglib3hfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjQzCgkvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gdG90YWxTdXBwbHkKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NTcwNzA2Yzc5IC8vICJ0b3RhbFN1cHBseSIKCWZyYW1lX2RpZyAtNCAvLyB0b3RhbFN1cHBseTogdWludDI1NgoJYm94X3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czo0NQoJLy8gdGhpcy5iYWxhbmNlcyhtaW50VG8pLnZhbHVlID0gdG90YWxTdXBwbHkKCWZyYW1lX2RpZyAtNSAvLyBtaW50VG86IEFkZHJlc3MKCWZyYW1lX2RpZyAtNCAvLyB0b3RhbFN1cHBseTogdWludDI1NgoJYm94X3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czo0NwoJLy8gdGhpcy5hcmMyMDBfVHJhbnNmZXIubG9nKHsKCS8vICAgICAgICAgICAgIGZyb206IGdsb2JhbHMuemVyb0FkZHJlc3MsCgkvLyAgICAgICAgICAgICB0bzogbWludFRvLAoJLy8gICAgICAgICAgICAgdmFsdWU6IHRvdGFsU3VwcGx5CgkvLyAgICAgICAgIH0pCglieXRlIDB4Nzk4M2MzNWMgLy8gYXJjMjAwX1RyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KQoJZ2xvYmFsIFplcm9BZGRyZXNzCglmcmFtZV9kaWcgLTUgLy8gbWludFRvOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtNCAvLyB0b3RhbFN1cHBseTogdWludDI1NgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfaW5pdGlhbGl6ZToKCS8vIG1pbnRUbzogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHRvdGFsU3VwcGx5OiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZGVjaW1hbHM6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyBzeW1ib2w6IGJ5dGVbOF0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgOAoJPT0KCWFzc2VydAoKCS8vIG5hbWU6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBpbml0aWFsaXplKGFkZHJlc3MsdWludDI1Nix1aW50OCxieXRlWzhdLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgaW5pdGlhbGl6ZQoJaW50IDEKCXJldHVybgoKLy8gaW5pdGlhbGl6ZShhZGRyZXNzLHVpbnQyNTYsdWludDgsYnl0ZVs4XSxieXRlWzMyXSl2b2lkCi8vCi8vIEluaXRpYWxpemUgQVJDMjAwCi8vIEBwYXJhbSBuYW1lIHRva2VuIG5hbWUKLy8gQHBhcmFtIHN5bWJvbCB0b2tlbiBzeW1ib2wKLy8gQHBhcmFtIGRlY2ltYWxzIG51bWJlciBvZiBkZWNpbWFscwovLyBAcGFyYW0gdG90YWxTdXBwbHkgdG90YWwgc3VwcGx5IG9mIHRva2VucwovLyBAcGFyYW0gbWludFRvIGluaXRpYWwgbWludCB0bwppbml0aWFsaXplOgoJcHJvdG8gNSAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjY5CgkvLyBhc3NlcnQodGhpcy5hcHAuY3JlYXRvciA9PT0gdGhpcy50eG4uc2VuZGVyIHx8IHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJYXNzZXJ0Cgl0eG4gU2VuZGVyCgk9PQoJZHVwCglibnogc2tpcF9vcjAKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCgk9PQoJfHwKCnNraXBfb3IwOgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjcwCgkvLyBhc3NlcnQoIXRoaXMudG90YWxTdXBwbHkuZXhpc3RzKQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6NzIKCS8vIHRoaXMuYXJjMjAwSW5pdGlhbGl6ZShuYW1lLCBzeW1ib2wsIGRlY2ltYWxzLCB0b3RhbFN1cHBseSwgbWludFRvKQoJZnJhbWVfZGlnIC01IC8vIG1pbnRUbzogQWRkcmVzcwoJZnJhbWVfZGlnIC00IC8vIHRvdGFsU3VwcGx5OiB1aW50MjU2CglmcmFtZV9kaWcgLTMgLy8gZGVjaW1hbHM6IHVpbnQ4CglmcmFtZV9kaWcgLTIgLy8gc3ltYm9sOiBTdGF0aWNBcnJheTxieXRlLCA4PgoJZnJhbWVfZGlnIC0xIC8vIG5hbWU6IFN0YXRpY0FycmF5PGJ5dGUsIDMyPgoJY2FsbHN1YiBhcmMyMDBJbml0aWFsaXplCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmMyMDBfbmFtZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBhcmMyMDBfbmFtZSgpYnl0ZVszMl0KCWNhbGxzdWIgYXJjMjAwX25hbWUKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfbmFtZSgpYnl0ZVszMl0KLy8KLy8gVGhlIG5hbWUgb2YgdGhlIHRva2VuCi8vIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSB0b2tlbgphcmMyMDBfbmFtZToKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czo4MQoJLy8gcmV0dXJuIHRoaXMubWV0YWRhdGEudmFsdWUubmFtZTsKCWJ5dGUgMHg2ZDY1NzQ2MTY0NjE3NDYxIC8vICJtZXRhZGF0YSIKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDMyCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmMyMDBfc3ltYm9sOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGFyYzIwMF9zeW1ib2woKWJ5dGVbOF0KCWNhbGxzdWIgYXJjMjAwX3N5bWJvbAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF9zeW1ib2woKWJ5dGVbOF0KLy8KLy8gUmV0dXJucyB0aGUgc3ltYm9sIG9mIHRoZSB0b2tlbgovLyBAcmV0dXJucyBUaGUgc3ltYm9sIG9mIHRoZSB0b2tlbgphcmMyMDBfc3ltYm9sOgoJcHJvdG8gMCAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjkwCgkvLyByZXR1cm4gdGhpcy5tZXRhZGF0YS52YWx1ZS5zeW1ib2w7CglieXRlIDB4NmQ2NTc0NjE2NDYxNzQ2MSAvLyAibWV0YWRhdGEiCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMzIgOAoJcmV0c3ViCgphYmlfcm91dGVfYXJjMjAwX2RlY2ltYWxzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGFyYzIwMF9kZWNpbWFscygpdWludDgKCWNhbGxzdWIgYXJjMjAwX2RlY2ltYWxzCglpdG9iCglkdXAKCWJpdGxlbgoJaW50IDgKCTw9Cglhc3NlcnQKCWV4dHJhY3QgNyAxCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gYXJjMjAwX2RlY2ltYWxzKCl1aW50OAovLwovLyBSZXR1cm5zIHRoZSBkZWNpbWFscyBvZiB0aGUgdG9rZW4KLy8gQHJldHVybnMgVGhlIGRlY2ltYWxzIG9mIHRoZSB0b2tlbgphcmMyMDBfZGVjaW1hbHM6Cglwcm90byAwIDEKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6OTkKCS8vIHJldHVybiB0aGlzLm1ldGFkYXRhLnZhbHVlLmRlY2ltYWxzOwoJYnl0ZSAweDZkNjU3NDYxNjQ2MTc0NjEgLy8gIm1ldGFkYXRhIgoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDQwIDEKCWJ0b2kKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzIwMF90b3RhbFN1cHBseToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBhcmMyMDBfdG90YWxTdXBwbHkoKXVpbnQyNTYKCWNhbGxzdWIgYXJjMjAwX3RvdGFsU3VwcGx5CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfdG90YWxTdXBwbHkoKXVpbnQyNTYKLy8KLy8gUmV0dXJucyB0aGUgdG90YWwgc3VwcGx5IG9mIHRoZSB0b2tlbgovLyBAcmV0dXJucyBUaGUgdG90YWwgc3VwcGx5IG9mIHRoZSB0b2tlbgphcmMyMDBfdG90YWxTdXBwbHk6Cglwcm90byAwIDEKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MTA4CgkvLyByZXR1cm4gdGhpcy50b3RhbFN1cHBseS52YWx1ZSAtIHRoaXMuYXJjMjAwX2JhbGFuY2VPZihnbG9iYWxzLnplcm9BZGRyZXNzKSAtIHRoaXMuYXJjMjAwX2JhbGFuY2VPZih0aGlzLmFwcC5hZGRyZXNzKTsKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NTcwNzA2Yzc5IC8vICJ0b3RhbFN1cHBseSIKCWJveF9nZXQKCWFzc2VydAoJZ2xvYmFsIFplcm9BZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWItCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJY2FsbHN1YiBhcmMyMDBfYmFsYW5jZU9mCgliLQoJcmV0c3ViCgphYmlfcm91dGVfYXJjMjAwX2JhbGFuY2VPZjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gb3duZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2CgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2Ci8vCi8vIFJldHVybnMgdGhlIGN1cnJlbnQgYmFsYW5jZSBvZiB0aGUgb3duZXIgb2YgdGhlIHRva2VuCi8vIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgb3duZXIgb2YgdGhlIHRva2VuCi8vIEByZXR1cm5zIFRoZSBjdXJyZW50IGJhbGFuY2Ugb2YgdGhlIGhvbGRlciBvZiB0aGUgdG9rZW4KYXJjMjAwX2JhbGFuY2VPZjoKCXByb3RvIDEgMQoKCS8vIGlmMF9jb25kaXRpb24KCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxMTgKCS8vIHRoaXMuYmFsYW5jZXMob3duZXIpLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmMF9lbHNlCgoJLy8gaWYwX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxMTkKCS8vIHJldHVybiB0aGlzLmJhbGFuY2VzKG93bmVyKS52YWx1ZTsKCWZyYW1lX2RpZyAtMSAvLyBvd25lcjogQWRkcmVzcwoJYm94X2dldAoJYXNzZXJ0CglyZXRzdWIKCWIgaWYwX2VuZAoKaWYwX2Vsc2U6CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MTIxCgkvLyByZXR1cm4gPHVpbnQyNTY+MDsKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCglyZXRzdWIKCmlmMF9lbmQ6CglyZXRzdWIKCmFiaV9yb3V0ZV9oYXNCYWxhbmNlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgaGFzQmFsYW5jZShhZGRyZXNzKWJvb2wKCWNhbGxzdWIgaGFzQmFsYW5jZQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBoYXNCYWxhbmNlKGFkZHJlc3MpYm9vbAovLwovLyBDaGVjayBpZiBiYWxhbmNlIGJveCBleGlzdHMKLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lcgovLyBAcmV0dXJucyBgdHJ1ZWAgaWYgYmFsYW5jZSBib3ggZXhpc3RzCmhhc0JhbGFuY2U6Cglwcm90byAxIDEKCgkvLyBpZjFfY29uZGl0aW9uCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MTMyCgkvLyB0aGlzLmJhbGFuY2VzKG93bmVyKS5leGlzdHMKCWZyYW1lX2RpZyAtMSAvLyBvd25lcjogQWRkcmVzcwoJYm94X2xlbgoJc3dhcAoJcG9wCglieiBpZjFfZW5kCgoJLy8gaWYxX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxMzMKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCXJldHN1YgoKaWYxX2VuZDoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxMzUKCS8vIHJldHVybiBmYWxzZTsKCWludCAwCglyZXRzdWIKCmFiaV9yb3V0ZV9oYXNBbGxvd2FuY2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHNwZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgaGFzQWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcylib29sCgljYWxsc3ViIGhhc0FsbG93YW5jZQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBoYXNBbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKWJvb2wKLy8KLy8gQ2hlY2sgaWYgYWxsb3dhbmNlIGJveCBleGlzdHMKLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lcgovLyBAcGFyYW0gc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgc3BlbmRlcgovLyBAcmV0dXJucyBgdHJ1ZWAgaWYgYWxsb3dhbmNlIGJveCBleGlzdHMKaGFzQWxsb3dhbmNlOgoJcHJvdG8gMiAxCgoJLy8gaWYyX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE0NgoJLy8gdGhpcy5hbGxvd2FuY2VzKFtvd25lciwgc3BlbmRlcl0pLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gc3BlbmRlcjogQWRkcmVzcwoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmMl9lbmQKCgkvLyBpZjJfY29uc2VxdWVudAoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE0NwoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgppZjJfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE0OQoJLy8gcmV0dXJuIGZhbHNlOwoJaW50IDAKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzIwMF9hbGxvd2FuY2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHNwZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYXJjMjAwX2FsbG93YW5jZShhZGRyZXNzLGFkZHJlc3MpdWludDI1NgoJY2FsbHN1YiBhcmMyMDBfYWxsb3dhbmNlCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcyl1aW50MjU2Ci8vCi8vIFJldHVybnMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIG9mIHRoZSBzcGVuZGVyIG9mIHRoZSB0b2tlbnMgb2YgdGhlIG93bmVyCi8vIEBwYXJhbSBvd25lcgovLyBAcGFyYW0gc3BlbmRlcgovLyBAcmV0dXJucyBUaGUgcmVtYWluaW5nIGFsbG93YW5jZQphcmMyMDBfYWxsb3dhbmNlOgoJcHJvdG8gMiAxCgoJLy8gaWYzX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE2MAoJLy8gdGhpcy5hbGxvd2FuY2VzKFtvd25lciwgc3BlbmRlcl0pLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gc3BlbmRlcjogQWRkcmVzcwoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmM19lbHNlCgoJLy8gaWYzX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoxNjEKCS8vIHJldHVybiB0aGlzLmFsbG93YW5jZXMoW293bmVyLCBzcGVuZGVyXSkudmFsdWU7CglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJcmV0c3ViCgliIGlmM19lbmQKCmlmM19lbHNlOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE2MwoJLy8gcmV0dXJuIDx1aW50MjU2PjA7CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJcmV0c3ViCgppZjNfZW5kOgoJcmV0c3ViCgphYmlfcm91dGVfYXJjMjAwX3RyYW5zZmVyOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyB2YWx1ZTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHRvOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfdHJhbnNmZXIodWludDI1NixhZGRyZXNzKWJvb2wKCWNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzIwMF90cmFuc2Zlcih1aW50MjU2LGFkZHJlc3MpYm9vbAovLwovLyBUcmFuc2ZlcnMgdG9rZW5zCi8vIEBwYXJhbSB0byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyCi8vIEBwYXJhbSB2YWx1ZSBBbW91bnQgb2YgdG9rZW5zIHRvIHRyYW5zZmVyCi8vIEByZXR1cm5zIFN1Y2Nlc3MKYXJjMjAwX3RyYW5zZmVyOgoJcHJvdG8gMiAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjE5OAoJLy8gcmV0dXJuIHRoaXMudHJhbnNmZXIodGhpcy50eG4uc2VuZGVyLCB0bywgdmFsdWUpOwoJZnJhbWVfZGlnIC0yIC8vIHZhbHVlOiB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gdG86IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNhbGxzdWIgdHJhbnNmZXIKCXJldHN1YgoKLy8gdHJhbnNmZXIodWludDI1NixhZGRyZXNzLGFkZHJlc3MpYm9vbAp0cmFuc2ZlcjoKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDMKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjAyCgkvLyBzZW5kZXJCYWxhbmNlID0gdGhpcy5hcmMyMDBfYmFsYW5jZU9mKGZyb20pCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJY2FsbHN1YiBhcmMyMDBfYmFsYW5jZU9mCglmcmFtZV9idXJ5IDAgLy8gc2VuZGVyQmFsYW5jZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjAzCgkvLyBhc3NlcnQoc2VuZGVyQmFsYW5jZSA+PSB2YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIHNlbmRlckJhbGFuY2U6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWI+PQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIwNQoJLy8gc2VuZGVyQmFsYW5jZUFmdGVyID0gPHVpbnQyNTY+KHNlbmRlckJhbGFuY2UgLSB2YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIHNlbmRlckJhbGFuY2U6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWItCglmcmFtZV9idXJ5IDEgLy8gc2VuZGVyQmFsYW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoKCS8vIGlmNF9jb25kaXRpb24KCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMDYKCS8vIHNlbmRlckJhbGFuY2VBZnRlciA+IDx1aW50MjU2PjAKCWZyYW1lX2RpZyAxIC8vIHNlbmRlckJhbGFuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYnogaWY0X2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gaWY0X2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMDcKCS8vIHRoaXMuYmFsYW5jZXMoZnJvbSkudmFsdWUgPSBzZW5kZXJCYWxhbmNlQWZ0ZXIKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9kaWcgMSAvLyBzZW5kZXJCYWxhbmNlQWZ0ZXI6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWJveF9wdXQKCWIgaWY0X2VuZAoKaWY0X2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIwOAoJLy8gdGhpcy5iYWxhbmNlcyhmcm9tKS5leGlzdHMKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmNF9lbmQKCgkvLyBpZjRfZWxzZWlmMV9jb25zZXF1ZW50CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjEwCgkvLyB0aGlzLmJhbGFuY2VzKGZyb20pLmRlbGV0ZSgpCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJYm94X2RlbAoKaWY0X2VuZDoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMTMKCS8vIHJlY2VpdmVyQmFsYW5jZUFmdGVyID0gPHVpbnQyNTY+KHRoaXMuYXJjMjAwX2JhbGFuY2VPZih0bykgKyB2YWx1ZSkKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJY2FsbHN1YiBhcmMyMDBfYmFsYW5jZU9mCglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWIrCglmcmFtZV9idXJ5IDIgLy8gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXI6IHVuc2FmZSB1aW50MjU2CgoJLy8gaWY1X2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIxNAoJLy8gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXIgPiA8dWludDI1Nj4wCglmcmFtZV9kaWcgMiAvLyByZWNlaXZlckJhbGFuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYnogaWY1X2VuZAoKCS8vIGlmNV9jb25zZXF1ZW50CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjE1CgkvLyB0aGlzLmJhbGFuY2VzKHRvKS52YWx1ZSA9IHJlY2VpdmVyQmFsYW5jZUFmdGVyCglmcmFtZV9kaWcgLTIgLy8gdG86IEFkZHJlc3MKCWZyYW1lX2RpZyAyIC8vIHJlY2VpdmVyQmFsYW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglib3hfcHV0CgppZjVfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIxOAoJLy8gdGhpcy5hcmMyMDBfVHJhbnNmZXIubG9nKHsKCS8vICAgICAgICAgICAgIGZyb206IGZyb20sCgkvLyAgICAgICAgICAgICB0bzogdG8sCgkvLyAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKCS8vICAgICAgICAgfSkKCWJ5dGUgMHg3OTgzYzM1YyAvLyBhcmMyMDBfVHJhbnNmZXIoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMjQKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmMyMDBfYXBwcm92ZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gdmFsdWU6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBzcGVuZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfYXBwcm92ZSh1aW50MjU2LGFkZHJlc3MpYm9vbAoJY2FsbHN1YiBhcmMyMDBfYXBwcm92ZQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfYXBwcm92ZSh1aW50MjU2LGFkZHJlc3MpYm9vbAovLwovLyBBcHByb3ZlIHNwZW5kZXIgZm9yIGEgdG9rZW4KLy8gQHBhcmFtIHNwZW5kZXIKLy8gQHBhcmFtIHZhbHVlCi8vIEByZXR1cm5zIFN1Y2Nlc3MKYXJjMjAwX2FwcHJvdmU6Cglwcm90byAyIDEKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjM0CgkvLyByZXR1cm4gdGhpcy5hcHByb3ZlKHRoaXMudHhuLnNlbmRlciwgc3BlbmRlciwgdmFsdWUpOwoJZnJhbWVfZGlnIC0yIC8vIHZhbHVlOiB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gc3BlbmRlcjogQWRkcmVzcwoJdHhuIFNlbmRlcgoJY2FsbHN1YiBhcHByb3ZlCglyZXRzdWIKCi8vIGFwcHJvdmUodWludDI1NixhZGRyZXNzLGFkZHJlc3MpYm9vbAphcHByb3ZlOgoJcHJvdG8gMyAxCgoJLy8gaWY2X2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjIzOAoJLy8gdmFsdWUgPiA8dWludDI1Nj4wCglmcmFtZV9kaWcgLTMgLy8gdmFsdWU6IHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYnogaWY2X2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gaWY2X2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyMzkKCS8vIHRoaXMuYWxsb3dhbmNlcyhbb3duZXIsIHNwZW5kZXJdKS52YWx1ZSA9IHZhbHVlCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYm94X3B1dAoJYiBpZjZfZW5kCgppZjZfZWxzZWlmMV9jb25kaXRpb246CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjQwCgkvLyB0aGlzLmFsbG93YW5jZXMoW293bmVyLCBzcGVuZGVyXSkuZXhpc3RzCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogaWY2X2VuZAoKCS8vIGlmNl9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNDEKCS8vIHRoaXMuYWxsb3dhbmNlcyhbb3duZXIsIHNwZW5kZXJdKS5kZWxldGUoKQoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gc3BlbmRlcjogQWRkcmVzcwoJY29uY2F0Cglib3hfZGVsCgppZjZfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI0NAoJLy8gdGhpcy5hcmMyMDBfQXBwcm92YWwubG9nKHsKCS8vICAgICAgICAgICAgIG93bmVyOiBvd25lciwKCS8vICAgICAgICAgICAgIHNwZW5kZXI6IHNwZW5kZXIsCgkvLyAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKCS8vICAgICAgICAgfSkKCWJ5dGUgMHgxOTY5Zjg2NSAvLyBhcmMyMDBfQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBzcGVuZGVyOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNTAKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzIwMF90cmFuc2ZlckZyb206CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHZhbHVlOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gdG86IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBmcm9tOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcmMyMDBfdHJhbnNmZXJGcm9tKHVpbnQyNTYsYWRkcmVzcyxhZGRyZXNzKWJvb2wKCWNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyRnJvbQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmMyMDBfdHJhbnNmZXJGcm9tKHVpbnQyNTYsYWRkcmVzcyxhZGRyZXNzKWJvb2wKLy8KLy8gVHJhbnNmZXJzIHRva2VucyBmcm9tIHNvdXJjZSB0byBkZXN0aW5hdGlvbiBhcyBhcHByb3ZlZCBzcGVuZGVyCi8vIEBwYXJhbSBmcm9tIFRoZSBzb3VyY2UgIG9mIHRoZSB0cmFuc2ZlcgovLyBAcGFyYW0gdG8gVGhlIGRlc3RpbmF0aW9uIG9mIHRoZSB0cmFuc2ZlcgovLyBAcGFyYW0gdmFsdWUgQW1vdW50IG9mIHRva2VucyB0byB0cmFuc2ZlcgovLyBAcmV0dXJucyBTdWNjZXNzCmFyYzIwMF90cmFuc2ZlckZyb206Cglwcm90byAzIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiA1CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI2MQoJLy8gYWxsb3dhbmNlID0gdGhpcy5hcmMyMDBfYWxsb3dhbmNlKGZyb20sIHRoaXMudHhuLnNlbmRlcikKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9hbGxvd2FuY2UKCWZyYW1lX2J1cnkgMCAvLyBhbGxvd2FuY2U6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI2MgoJLy8gYXNzZXJ0KGFsbG93YW5jZSA+PSB2YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIGFsbG93YW5jZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYj49Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjY0CgkvLyBvd25lckJhbGFuY2UgPSB0aGlzLmFyYzIwMF9iYWxhbmNlT2YoZnJvbSkKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWZyYW1lX2J1cnkgMSAvLyBvd25lckJhbGFuY2U6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI2NQoJLy8gYXNzZXJ0KG93bmVyQmFsYW5jZSA+PSB2YWx1ZSkKCWZyYW1lX2RpZyAxIC8vIG93bmVyQmFsYW5jZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYj49Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjY3CgkvLyBhbGxvd2FuY2VBZnRlciA9IDx1aW50MjU2PihhbGxvd2FuY2UgLSB2YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIGFsbG93YW5jZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYi0KCWZyYW1lX2J1cnkgMiAvLyBhbGxvd2FuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCgkvLyBpZjdfY29uZGl0aW9uCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjY4CgkvLyBhbGxvd2FuY2VBZnRlciA+IDx1aW50MjU2PjAKCWZyYW1lX2RpZyAyIC8vIGFsbG93YW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+CglieiBpZjdfZWxzZWlmMV9jb25kaXRpb24KCgkvLyBpZjdfY29uc2VxdWVudAoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI2OQoJLy8gdGhpcy5hbGxvd2FuY2VzKFtmcm9tLCB0aGlzLnR4bi5zZW5kZXJdKS52YWx1ZSA9IGFsbG93YW5jZUFmdGVyCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9kaWcgMiAvLyBhbGxvd2FuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYm94X3B1dAoJYiBpZjdfZW5kCgppZjdfZWxzZWlmMV9jb25kaXRpb246CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MjcwCgkvLyB0aGlzLmFsbG93YW5jZXMoW2Zyb20sIHRoaXMudHhuLnNlbmRlcl0pLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2xlbgoJc3dhcAoJcG9wCglieiBpZjdfZW5kCgoJLy8gaWY3X2Vsc2VpZjFfY29uc2VxdWVudAoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI3MgoJLy8gdGhpcy5hbGxvd2FuY2VzKFtmcm9tLCB0aGlzLnR4bi5zZW5kZXJdKS5kZWxldGUoKQoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNvbmNhdAoJYm94X2RlbAoKaWY3X2VuZDoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNzUKCS8vIG93bmVyQmFsYW5jZUFmdGVyID0gPHVpbnQyNTY+KG93bmVyQmFsYW5jZSAtIHZhbHVlKQoJZnJhbWVfZGlnIDEgLy8gb3duZXJCYWxhbmNlOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIC0zIC8vIHZhbHVlOiB1aW50MjU2CgliLQoJZnJhbWVfYnVyeSAzIC8vIG93bmVyQmFsYW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoKCS8vIGlmOF9jb25kaXRpb24KCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyNzYKCS8vIG93bmVyQmFsYW5jZUFmdGVyID4gPHVpbnQyNTY+MAoJZnJhbWVfZGlnIDMgLy8gb3duZXJCYWxhbmNlQWZ0ZXI6IHVuc2FmZSB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj4KCWJ6IGlmOF9lbHNlaWYxX2NvbmRpdGlvbgoKCS8vIGlmOF9jb25zZXF1ZW50CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6Mjc3CgkvLyB0aGlzLmJhbGFuY2VzKGZyb20pLnZhbHVlID0gb3duZXJCYWxhbmNlQWZ0ZXIKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9kaWcgMyAvLyBvd25lckJhbGFuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYm94X3B1dAoJYiBpZjhfZW5kCgppZjhfZWxzZWlmMV9jb25kaXRpb246CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6Mjc4CgkvLyB0aGlzLmJhbGFuY2VzKGZyb20pLmV4aXN0cwoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFkZHJlc3MKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogaWY4X2VuZAoKCS8vIGlmOF9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyODAKCS8vIHRoaXMuYmFsYW5jZXMoZnJvbSkuZGVsZXRlKCkKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglib3hfZGVsCgppZjhfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI4MwoJLy8gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXIgPSA8dWludDI1Nj4odGhpcy5hcmMyMDBfYmFsYW5jZU9mKHRvKSArIHZhbHVlKQoJZnJhbWVfZGlnIC0yIC8vIHRvOiBBZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWZyYW1lX2RpZyAtMyAvLyB2YWx1ZTogdWludDI1NgoJYisKCWZyYW1lX2J1cnkgNCAvLyByZWNlaXZlckJhbGFuY2VBZnRlcjogdW5zYWZlIHVpbnQyNTYKCgkvLyBpZjlfY29uZGl0aW9uCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6Mjg0CgkvLyByZWNlaXZlckJhbGFuY2VBZnRlciA+IDx1aW50MjU2PjAKCWZyYW1lX2RpZyA0IC8vIHJlY2VpdmVyQmFsYW5jZUFmdGVyOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+CglieiBpZjlfZW5kCgoJLy8gaWY5X2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czoyODUKCS8vIHRoaXMuYmFsYW5jZXModG8pLnZhbHVlID0gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXIKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJZnJhbWVfZGlnIDQgLy8gcmVjZWl2ZXJCYWxhbmNlQWZ0ZXI6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWJveF9wdXQKCmlmOV9lbmQ6CgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6Mjg4CgkvLyB0aGlzLmFyYzIwMF9UcmFuc2Zlci5sb2coewoJLy8gICAgICAgICAgICAgZnJvbTogZnJvbSwKCS8vICAgICAgICAgICAgIHRvOiB0bywKCS8vICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQoJLy8gICAgICAgICB9KQoJYnl0ZSAweDc5ODNjMzVjIC8vIGFyYzIwMF9UcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NikKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gdG86IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIHZhbHVlOiB1aW50MjU2Cgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjI5NAoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDQKCXJldHN1YgoKYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBkZWxldGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKXZvaWQKLy8KLy8gRGVsZXRlIHRoZSBhcHAgaWYgYmFsYW5jZSB0b3RhbCBzdXBwbHkgaGFzIGJlZW4gYnVybmVkCmRlbGV0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjMwMQoJLy8gYXNzZXJ0KHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzAyCgkvLyBhc3NlcnQodGhpcy5hcmMyMDBfYmFsYW5jZU9mKGdsb2JhbHMuemVyb0FkZHJlc3MpID09PSB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlKQoJZ2xvYmFsIFplcm9BZGRyZXNzCgljYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NTcwNzA2Yzc5IC8vICJ0b3RhbFN1cHBseSIKCWJveF9nZXQKCWFzc2VydAoJYj09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzAzCgkvLyB0aGlzLmJhbGFuY2VzKGdsb2JhbHMuemVyb0FkZHJlc3MpLmRlbGV0ZSgpCglnbG9iYWwgWmVyb0FkZHJlc3MKCWJveF9kZWwKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzA0CgkvLyB0aGlzLm1ldGFkYXRhLmRlbGV0ZSgpCglieXRlIDB4NmQ2NTc0NjE2NDYxNzQ2MSAvLyAibWV0YWRhdGEiCglib3hfZGVsCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjMwNQoJLy8gdGhpcy50b3RhbFN1cHBseS5kZWxldGUoKQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYm94X2RlbAoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czozMDYKCS8vIHRoaXMubWFuYWdlci5kZWxldGUoKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9kZWwKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzA3CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiAwLAoJLy8gICAgICAgICAgICAgY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czozMDgKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjMwOQoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9jb250cmFjdHMvQXJjMjAwVG9rZW4uYWxnby50czozMTAKCS8vIGFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gc3JjL2NvbnRyYWN0cy9BcmMyMDBUb2tlbi5hbGdvLnRzOjMxMQoJLy8gY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzEyCgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvY29udHJhY3RzL0FyYzIwMFRva2VuLmFsZ28udHM6MzE0CgkvLyBhc3NlcnQodGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlID09PSAwKQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQoJYXNzZXJ0CglpbnQgMAoJPT0KCWFzc2VydAoJcmV0c3ViCgphYmlfcm91dGVfcG9vbEluaXRpYWxpemU6CgkvLyB0b2tlbllBcHBJZDogYXBwbGljYXRpb24KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCXR4bmFzIEFwcGxpY2F0aW9ucwoKCS8vIHN5bWJvbDogYnl0ZVs4XQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCA4Cgk9PQoJYXNzZXJ0CgoJLy8gbmFtZTogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHBvb2xJbml0aWFsaXplKGFwcGxpY2F0aW9uLGJ5dGVbOF0sYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBwb29sSW5pdGlhbGl6ZQoJaW50IDEKCXJldHVybgoKLy8gcG9vbEluaXRpYWxpemUoYXBwbGljYXRpb24sYnl0ZVs4XSxieXRlWzMyXSl2b2lkCnBvb2xJbml0aWFsaXplOgoJcHJvdG8gMyAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQ0CgkvLyBhc3NlcnQodGhpcy5hcHAuY3JlYXRvciA9PT0gdGhpcy50eG4uc2VuZGVyIHx8IHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJYXNzZXJ0Cgl0eG4gU2VuZGVyCgk9PQoJZHVwCglibnogc2tpcF9vcjEKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCgk9PQoJfHwKCnNraXBfb3IxOgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjQ1CgkvLyBhc3NlcnQoIXRoaXMudG90YWxTdXBwbHkuZXhpc3RzKQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NDcKCS8vIHRoaXMuYXJjMjAwSW5pdGlhbGl6ZSgKCS8vICAgICAgICAgICAgIG5hbWUsCgkvLyAgICAgICAgICAgICBzeW1ib2wsCgkvLyAgICAgICAgICAgICA8dWludDg+REVDSU1BTFMsCgkvLyAgICAgICAgICAgICAoPHVpbnQyNTY+U0NBTEUgKiA8dWludDI1Nj4oMTAgKiogREVDSU1BTFMpKSwKCS8vICAgICAgICAgICAgIHRoaXMuYXBwLmFkZHJlc3MKCS8vICAgICAgICAgKQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCglpbnQgMTAKCWludCA2CglleHAKCWl0b2IKCWIqCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDA2CglkdXAKCWJpdGxlbgoJaW50IDgKCTw9Cglhc3NlcnQKCWV4dHJhY3QgNyAxCglmcmFtZV9kaWcgLTIgLy8gc3ltYm9sOiBTdGF0aWNBcnJheTxieXRlLCA4PgoJZnJhbWVfZGlnIC0xIC8vIG5hbWU6IFN0YXRpY0FycmF5PGJ5dGUsIDMyPgoJY2FsbHN1YiBhcmMyMDBJbml0aWFsaXplCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjU1CgkvLyB0aGlzLmZlZUNvbnRyb2xsZXIudmFsdWUgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGUgMHg2NjY1NjU1ZjYzNmY2ZTc0NzI2ZjZjNmM2NTcyIC8vICJmZWVfY29udHJvbGxlciIKCXR4biBTZW5kZXIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjU2CgkvLyB0aGlzLmZlZS52YWx1ZSA9IHsKCS8vICAgICAgICAgICAgIHN3YXBGZWU6IDx1aW50MjU2PklOSVRJQUxfRkVFLAoJLy8gICAgICAgICAgICAgcGxhdGZvcm1GZWU6IDx1aW50MjU2PklOSVRJQUxfTUFOQUdFUl9GRUUKCS8vICAgICAgICAgfQoJYnl0ZSAweDY2NjU2NSAvLyAiZmVlIgoJYnl0ZSAweDAwMDAwMGU4ZDRhNTEwMDAKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYnl0ZSAweDAwMDAyZDc5ODgzZDIwMDAKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cglib3hfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjYwCgkvLyB0aGlzLnRva2VuWUFwcElkLnZhbHVlID0gdG9rZW5ZQXBwSWQKCWJ5dGUgMHg3NDZmNmI2NTZlNWY3OTVmNjE3MDcwNWY2OTY0IC8vICJ0b2tlbl95X2FwcF9pZCIKCWZyYW1lX2RpZyAtMyAvLyB0b2tlbllBcHBJZDogQXBwbGljYXRpb24KCWl0b2IKCWJveF9wdXQKCXJldHN1YgoKYWJpX3JvdXRlX3NldEZlZUNvbnRyb2xsZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGZlZUNvbnRyb2xsZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldEZlZUNvbnRyb2xsZXIoYWRkcmVzcylib29sCgljYWxsc3ViIHNldEZlZUNvbnRyb2xsZXIKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gc2V0RmVlQ29udHJvbGxlcihhZGRyZXNzKWJvb2wKc2V0RmVlQ29udHJvbGxlcjoKCXByb3RvIDEgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo2NAoJLy8gYXNzZXJ0KHRoaXMubWFuYWdlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyIHx8IHRoaXMuZmVlQ29udHJvbGxlci52YWx1ZSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09CglkdXAKCWJueiBza2lwX29yMgoJYnl0ZSAweDY2NjU2NTVmNjM2ZjZlNzQ3MjZmNmM2YzY1NzIgLy8gImZlZV9jb250cm9sbGVyIgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCT09Cgl8fAoKc2tpcF9vcjI6Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NjUKCS8vIHRoaXMuZmVlQ29udHJvbGxlci52YWx1ZSA9IGZlZUNvbnRyb2xsZXIKCWJ5dGUgMHg2NjY1NjU1ZjYzNmY2ZTc0NzI2ZjZjNmM2NTcyIC8vICJmZWVfY29udHJvbGxlciIKCWZyYW1lX2RpZyAtMSAvLyBmZWVDb250cm9sbGVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo2NgoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgphYmlfcm91dGVfc2V0RmVlczoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZmVlOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRGZWVzKHVpbnQyNTYpYm9vbAoJY2FsbHN1YiBzZXRGZWVzCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHNldEZlZXModWludDI1Nilib29sCnNldEZlZXM6Cglwcm90byAxIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6NzAKCS8vIGFzc2VydCh0aGlzLmZlZUNvbnRyb2xsZXIudmFsdWUgPT09IHRoaXMudHhuLnNlbmRlcikKCWJ5dGUgMHg2NjY1NjU1ZjYzNmY2ZTc0NzI2ZjZjNmM2NTcyIC8vICJmZWVfY29udHJvbGxlciIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjcxCgkvLyB0aGlzLmZlZS52YWx1ZSA9IHsKCS8vICAgICAgICAgICAgIHN3YXBGZWU6IGZlZSwKCS8vICAgICAgICAgICAgIHBsYXRmb3JtRmVlOiB0aGlzLmZlZS52YWx1ZS5wbGF0Zm9ybUZlZQoJLy8gICAgICAgICB9CglieXRlIDB4NjY2NTY1IC8vICJmZWUiCglmcmFtZV9kaWcgLTEgLy8gZmVlOiB1aW50MjU2CglieXRlIDB4NjY2NTY1IC8vICJmZWUiCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMzIgMzIKCWNvbmNhdAoJYm94X3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo3NQoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgphYmlfcm91dGVfc2V0UGxhdGZvcm1GZWVzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBmZWU6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldFBsYXRmb3JtRmVlcyh1aW50MjU2KWJvb2wKCWNhbGxzdWIgc2V0UGxhdGZvcm1GZWVzCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHNldFBsYXRmb3JtRmVlcyh1aW50MjU2KWJvb2wKc2V0UGxhdGZvcm1GZWVzOgoJcHJvdG8gMSAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjc5CgkvLyBhc3NlcnQodGhpcy5tYW5hZ2VyLnZhbHVlID09PSB0aGlzLnR4bi5zZW5kZXIpCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo4MAoJLy8gdGhpcy5mZWUudmFsdWUgPSB7CgkvLyAgICAgICAgICAgICBzd2FwRmVlOiB0aGlzLmZlZS52YWx1ZS5zd2FwRmVlLAoJLy8gICAgICAgICAgICAgcGxhdGZvcm1GZWU6IGZlZQoJLy8gICAgICAgICB9CglieXRlIDB4NjY2NTY1IC8vICJmZWUiCglkdXAKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDMyCglmcmFtZV9kaWcgLTEgLy8gZmVlOiB1aW50MjU2Cgljb25jYXQKCWJveF9wdXQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6ODQKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCXJldHN1YgoKYWJpX3JvdXRlX3JlZ2lzdGVyT25saW5lOgoJLy8gdm90ZUtleURpbHV0aW9uOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDYKCWJ0b2kKCgkvLyB2b3RlTGFzdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglidG9pCgoJLy8gdm90ZUZpcnN0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyB2b3RlUGs6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBzdGF0ZVByb29mUGs6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBzZWxlY3Rpb25QazogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgcmVnaXN0ZXJPbmxpbmUodWludDY0LHVpbnQ2NCx1aW50NjQsYnl0ZVtdLGJ5dGVbXSxieXRlW10pdm9pZAoJY2FsbHN1YiByZWdpc3Rlck9ubGluZQoJaW50IDEKCXJldHVybgoKLy8gcmVnaXN0ZXJPbmxpbmUodWludDY0LHVpbnQ2NCx1aW50NjQsYnl0ZVtdLGJ5dGVbXSxieXRlW10pdm9pZApyZWdpc3Rlck9ubGluZToKCXByb3RvIDYgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo4OAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6OTAKCS8vIHNlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb24oewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgc2VsZWN0aW9uUEs6IHNlbGVjdGlvblBrLAoJLy8gICAgICAgICAgICAgc3RhdGVQcm9vZlBLOiBzdGF0ZVByb29mUGssCgkvLyAgICAgICAgICAgICB2b3RlUEs6IHZvdGVQaywKCS8vICAgICAgICAgICAgIHZvdGVGaXJzdDogdm90ZUZpcnN0LAoJLy8gICAgICAgICAgICAgdm90ZUxhc3Q6IHZvdGVMYXN0LAoJLy8gICAgICAgICAgICAgdm90ZUtleURpbHV0aW9uOiB2b3RlS2V5RGlsdXRpb24sCgkvLyAgICAgICAgICAgICBmZWU6IGdsb2JhbHMubWluVHhuRmVlLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGtleXJlZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo5MQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6OTIKCS8vIHNlbGVjdGlvblBLOiBzZWxlY3Rpb25QawoJZnJhbWVfZGlnIC0xIC8vIHNlbGVjdGlvblBrOiBieXRlcwoJaXR4bl9maWVsZCBTZWxlY3Rpb25QSwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo5MwoJLy8gc3RhdGVQcm9vZlBLOiBzdGF0ZVByb29mUGsKCWZyYW1lX2RpZyAtMiAvLyBzdGF0ZVByb29mUGs6IGJ5dGVzCglpdHhuX2ZpZWxkIFN0YXRlUHJvb2ZQSwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo5NAoJLy8gdm90ZVBLOiB2b3RlUGsKCWZyYW1lX2RpZyAtMyAvLyB2b3RlUGs6IGJ5dGVzCglpdHhuX2ZpZWxkIFZvdGVQSwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czo5NQoJLy8gdm90ZUZpcnN0OiB2b3RlRmlyc3QKCWZyYW1lX2RpZyAtNCAvLyB2b3RlRmlyc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlRmlyc3QKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6OTYKCS8vIHZvdGVMYXN0OiB2b3RlTGFzdAoJZnJhbWVfZGlnIC01IC8vIHZvdGVMYXN0OiB1aW50NjQKCWl0eG5fZmllbGQgVm90ZUxhc3QKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6OTcKCS8vIHZvdGVLZXlEaWx1dGlvbjogdm90ZUtleURpbHV0aW9uCglmcmFtZV9kaWcgLTYgLy8gdm90ZUtleURpbHV0aW9uOiB1aW50NjQKCWl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjk4CgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKYWJpX3JvdXRlX3JlZ2lzdGVyT2ZmbGluZToKCS8vIGV4ZWN1dGUgcmVnaXN0ZXJPZmZsaW5lKCl2b2lkCgljYWxsc3ViIHJlZ2lzdGVyT2ZmbGluZQoJaW50IDEKCXJldHVybgoKLy8gcmVnaXN0ZXJPZmZsaW5lKCl2b2lkCnJlZ2lzdGVyT2ZmbGluZToKCXByb3RvIDAgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMDMKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjEwNQoJLy8gc2VuZE9mZmxpbmVLZXlSZWdpc3RyYXRpb24oewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGtleXJlZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMDYKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjEwNwoJLy8gZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJZ2xvYmFsIE1pblR4bkZlZQoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGdldFRva2VuWEJhbGFuY2UoKXVpbnQyNTYKZ2V0VG9rZW5YQmFsYW5jZToKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMTIKCS8vIHJldHVybiA8dWludDI1Nj4odGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlIC0gdGhpcy5hcHAuYWRkcmVzcy5taW5CYWxhbmNlKTsKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCWFzc2VydAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQoJYXNzZXJ0CgktCglpdG9iCglyZXRzdWIKCi8vIGdldFRva2VuWUJhbGFuY2UoKXVpbnQyNTYKZ2V0VG9rZW5ZQmFsYW5jZToKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMTYKCS8vIHJldHVybiBzZW5kTWV0aG9kQ2FsbDxbQWRkcmVzc10sIHVpbnQyNTY+KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIG5hbWU6ICdhcmMyMDBfYmFsYW5jZU9mJywKCS8vICAgICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUsCgkvLyAgICAgICAgICAgICBtZXRob2RBcmdzOiBbdGhpcy5hcHAuYWRkcmVzc10sCgkvLyAgICAgICAgICAgICBmZWU6IGdsb2JhbHMubWluVHhuRmVlLAoJLy8gICAgICAgICB9KTsKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgImFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTE3CgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMTkKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUKCWJ5dGUgMHg3NDZmNmI2NTZlNWY3OTVmNjE3MDcwNWY2OTY0IC8vICJ0b2tlbl95X2FwcF9pZCIKCWJveF9nZXQKCWFzc2VydAoJYnRvaQoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjEyMAoJLy8gbWV0aG9kQXJnczogW3RoaXMuYXBwLmFkZHJlc3NdCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTIxCgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJcmV0c3ViCgovLyBnZXRUb2tlblhEZWNpbWFscygpdWludDgKZ2V0VG9rZW5YRGVjaW1hbHM6Cglwcm90byAwIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTI2CgkvLyByZXR1cm4gPHVpbnQ4PjY7CglpbnQgNgoJcmV0c3ViCgovLyBnZXRUb2tlbllEZWNpbWFscygpdWludDgKZ2V0VG9rZW5ZRGVjaW1hbHM6Cglwcm90byAwIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTMwCgkvLyByZXR1cm4gc2VuZE1ldGhvZENhbGw8W10sIHVpbnQ4Pih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBuYW1lOiAnYXJjMjAwX2RlY2ltYWxzJywKCS8vICAgICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUsCgkvLyAgICAgICAgICAgICBtZXRob2RBcmdzOiBbXSwKCS8vICAgICAgICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgICAgIH0pOwoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAiYXJjMjAwX2RlY2ltYWxzKCl1aW50OCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjEzMQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTMzCgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLnRva2VuWUFwcElkLnZhbHVlCglieXRlIDB4NzQ2ZjZiNjU2ZTVmNzk1ZjYxNzA3MDVmNjk2NCAvLyAidG9rZW5feV9hcHBfaWQiCglib3hfZ2V0Cglhc3NlcnQKCWJ0b2kKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxMzQKCS8vIG1ldGhvZEFyZ3M6IFtdCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTM1CgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJYnRvaQoJcmV0c3ViCgovLyB0cmFuc2ZlclhUbyh1aW50MjU2LGFkZHJlc3MpYm9vbAp0cmFuc2ZlclhUbzoKCXByb3RvIDIgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNDAKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0bywKCS8vICAgICAgICAgICAgIGFtb3VudDogPHVpbnQ2ND5hbW91bnQsCgkvLyAgICAgICAgICAgICBmZWU6IGdsb2JhbHMubWluVHhuRmVlCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE0MQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTQyCgkvLyByZWNlaXZlcjogdG8KCWZyYW1lX2RpZyAtMSAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNDMKCS8vIGFtb3VudDogPHVpbnQ2ND5hbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgNjQKCTw9Cglhc3NlcnQKCWV4dHJhY3QgMjQgOAoJYnRvaQoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTQ0CgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTQ2CgkvLyByZXR1cm4gdHJ1ZTsKCWludCAxCglyZXRzdWIKCi8vIHRyYW5zZmVyWVRvKHVpbnQyNTYsYWRkcmVzcylib29sCnRyYW5zZmVyWVRvOgoJcHJvdG8gMiAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE1MAoJLy8gcmV0dXJuIHNlbmRNZXRob2RDYWxsPFtBZGRyZXNzLCB1aW50MjU2XSwgYm9vbGVhbj4oewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgbmFtZTogJ2FyYzIwMF90cmFuc2ZlcicsCgkvLyAgICAgICAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLnRva2VuWUFwcElkLnZhbHVlLAoJLy8gICAgICAgICAgICAgbWV0aG9kQXJnczogW3RvLCBhbW91bnRdLAoJLy8gICAgICAgICAgICAgZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJLy8gICAgICAgICB9KTsKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgImFyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE1MQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTUzCgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLnRva2VuWUFwcElkLnZhbHVlCglieXRlIDB4NzQ2ZjZiNjU2ZTVmNzk1ZjYxNzA3MDVmNjk2NCAvLyAidG9rZW5feV9hcHBfaWQiCglib3hfZ2V0Cglhc3NlcnQKCWJ0b2kKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNTQKCS8vIG1ldGhvZEFyZ3M6IFt0bywgYW1vdW50XQoJZnJhbWVfZGlnIC0xIC8vIHRvOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDI1NgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTU1CgkvLyBmZWU6IGdsb2JhbHMubWluVHhuRmVlCglnbG9iYWwgTWluVHhuRmVlCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJaW50IDAKCWdldGJpdAoJcmV0c3ViCgovLyB0cmFuc2ZlcllGcm9tKHVpbnQyNTYsYWRkcmVzcyxhZGRyZXNzKWJvb2wKdHJhbnNmZXJZRnJvbToKCXByb3RvIDMgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNjAKCS8vIHJldHVybiBzZW5kTWV0aG9kQ2FsbDxbQWRkcmVzcywgQWRkcmVzcywgdWludDI1Nl0sIGJvb2xlYW4+KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIG5hbWU6ICdhcmMyMDBfdHJhbnNmZXJGcm9tJywKCS8vICAgICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUsCgkvLyAgICAgICAgICAgICBtZXRob2RBcmdzOiBbZnJvbSwgdG8sIGFtb3VudF0sCgkvLyAgICAgICAgICAgICBmZWU6IGdsb2JhbHMubWluVHhuRmVlCgkvLyAgICAgICAgIH0pOwoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1Nilib29sIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTYxCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNjMKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMudG9rZW5ZQXBwSWQudmFsdWUKCWJ5dGUgMHg3NDZmNmI2NTZlNWY3OTVmNjE3MDcwNWY2OTY0IC8vICJ0b2tlbl95X2FwcF9pZCIKCWJveF9nZXQKCWFzc2VydAoJYnRvaQoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE2NAoJLy8gbWV0aG9kQXJnczogW2Zyb20sIHRvLCBhbW91bnRdCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQyNTYKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE2NQoJLy8gZmVlOiBnbG9iYWxzLm1pblR4bkZlZQoJZ2xvYmFsIE1pblR4bkZlZQoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWludCAwCglnZXRiaXQKCXJldHN1YgoKYWJpX3JvdXRlX3JhdGlvOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIHJhdGlvKCl1aW50MjU2CgljYWxsc3ViIHJhdGlvCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyByYXRpbygpdWludDI1NgpyYXRpbzoKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxNzEKCS8vIHJldHVybiAodGhpcy5nZXRUb2tlblhCYWxhbmNlKCkgKiA8dWludDI1Nj5TQ0FMRSkgLyB0aGlzLmdldFRva2VuWUJhbGFuY2UoKTsKCWNhbGxzdWIgZ2V0VG9rZW5YQmFsYW5jZQoJYnl0ZSAweDAwMDA1YWYzMTA3YTQwMDAKCWIqCgljYWxsc3ViIGdldFRva2VuWUJhbGFuY2UKCWIvCglyZXRzdWIKCi8vIGdldERlY2ltYWxQbGFjZXModWludDY0KXVpbnQyNTYKLy8KLy8gRXhhbXBsZTogYGdldERlY2ltYWxQbGFjZXMoNilgIHJldHVybnMgYDEsMDAwLDAwMGAKLy8gQHBhcmFtIHBvdyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMKLy8gQHJldHVybnMKZ2V0RGVjaW1hbFBsYWNlczoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTgwCgkvLyByZXN1bHQ6IHVpbnQyNTYgPSAxCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMQoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxODIKCS8vIGkgPSAwCglpbnQgMAoJZnJhbWVfYnVyeSAxIC8vIGk6IHVpbnQ2NAoKZm9yXzA6CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTgyCgkvLyBpIDwgZGVjaW1hbHMKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGRlY2ltYWxzOiB1aW50NjQKCTwKCWJ6IGZvcl8wX2VuZAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxODMKCS8vIHJlc3VsdCA9IHJlc3VsdCAqIDx1aW50MjU2PjEwCglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhCgliKgoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoxODIKCS8vIGkgPSBpICsgMQoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnQgMQoJKwoJZnJhbWVfYnVyeSAxIC8vIGk6IHVpbnQ2NAoJYiBmb3JfMAoKZm9yXzBfZW5kOgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjE4NgoJLy8gcmV0dXJuIHJlc3VsdDsKCWZyYW1lX2RpZyAwIC8vIHJlc3VsdDogdWludDI1NgoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKYWJpX3JvdXRlX2FkZExpcXVpZGl0eToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gYW1vdW50WTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHBheVR4blg6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhZGRMaXF1aWRpdHkodWludDI1NixwYXkpYm9vbAoJY2FsbHN1YiBhZGRMaXF1aWRpdHkKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gYWRkTGlxdWlkaXR5KHVpbnQyNTYscGF5KWJvb2wKYWRkTGlxdWlkaXR5OgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMTUKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTkwCgkvLyB2ZXJpZnlQYXlUeG4ocGF5VHhuWCwgewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogeyBncmVhdGVyVGhhbjogMCB9LAoJLy8gICAgICAgICAgICAgcmVrZXlUbzogZ2xvYmFscy56ZXJvQWRkcmVzcywKCS8vICAgICAgICAgICAgIGNsb3NlUmVtYWluZGVyVG86IGdsb2JhbHMuemVyb0FkZHJlc3MKCS8vICAgICAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHBheVR4blg6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBheVR4blg6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJla2V5VG8KCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIFJla2V5VG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBjbG9zZVJlbWFpbmRlclRvCglmcmFtZV9kaWcgLTEgLy8gcGF5VHhuWDogUGF5VHhuCglndHhucyBDbG9zZVJlbWFpbmRlclRvCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MTk4CgkvLyBhbW91bnRYID0gPHVpbnQyNTY+cGF5VHhuWC5hbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaXRvYgoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIwMAoJLy8gYXNzZXJ0KGFtb3VudFkgPiA8dWludDI1Nj4wKQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudFk6IHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIwMgoJLy8gYmFsYW5jZVkgPSB0aGlzLmdldFRva2VuWUJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlbllCYWxhbmNlCglmcmFtZV9idXJ5IDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIwMwoJLy8gYmFsYW5jZVggPSB0aGlzLmdldFRva2VuWEJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlblhCYWxhbmNlCglmcmFtZV9idXJ5IDIgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIwNAoJLy8gaXNzdWVkTHB0QmVmb3JlID0gdGhpcy50b3RhbFN1cHBseS52YWx1ZSAtIHRoaXMuYXJjMjAwX2JhbGFuY2VPZih0aGlzLmFwcC5hZGRyZXNzKQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc1NzA3MDZjNzkgLy8gInRvdGFsU3VwcGx5IgoJYm94X2dldAoJYXNzZXJ0CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJY2FsbHN1YiBhcmMyMDBfYmFsYW5jZU9mCgliLQoJZnJhbWVfYnVyeSAzIC8vIGlzc3VlZExwdEJlZm9yZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBpZjEwX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIwNgoJLy8gYmFsYW5jZVkgPiA8dWludDI1Nj4wICYmIGJhbGFuY2VYID4gPHVpbnQyNTY+MCAmJiBpc3N1ZWRMcHRCZWZvcmUgPiA8dWludDI1Nj4wCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJZHVwCglieiBza2lwX2FuZDAKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+CgkmJgoKc2tpcF9hbmQwOgoJZHVwCglieiBza2lwX2FuZDEKCWZyYW1lX2RpZyAzIC8vIGlzc3VlZExwdEJlZm9yZTogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJJiYKCnNraXBfYW5kMToKCWJ6IGlmMTBfZW5kCgoJLy8gaWYxMF9jb25zZXF1ZW50CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjA3CgkvLyBsaXF1ZGl0eVJhdGlvQmVmb3JlID0gKCgoYmFsYW5jZVggLSBhbW91bnRYKSAqIDx1aW50MjU2PlNDQUxFKSAvIGJhbGFuY2VZKQoJZnJhbWVfZGlnIDIgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMCAvLyBhbW91bnRYOiB1bnNhZmUgdWludDI1NgoJYi0KCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCgliKgoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgliLwoJZnJhbWVfYnVyeSA0IC8vIGxpcXVkaXR5UmF0aW9CZWZvcmU6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIwOAoJLy8gbGlxdWRpdHlSYXRpb09mQ3VycmVudFR4biA9ICgoYW1vdW50WCAqIDx1aW50MjU2PlNDQUxFKSAvIGFtb3VudFkpCglmcmFtZV9kaWcgMCAvLyBhbW91bnRYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDA1YWYzMTA3YTQwMDAKCWIqCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50WTogdWludDI1NgoJYi8KCWZyYW1lX2J1cnkgNSAvLyBsaXF1ZGl0eVJhdGlvT2ZDdXJyZW50VHhuOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMDkKCS8vIHJhdGlvRGl2ZXJnZW5jZUFsbG93ZWQgPSAobGlxdWRpdHlSYXRpb0JlZm9yZSAvIDx1aW50MjU2PjQwKQoJZnJhbWVfZGlnIDQgLy8gbGlxdWRpdHlSYXRpb0JlZm9yZTogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI4CgliLwoJZnJhbWVfYnVyeSA2IC8vIHJhdGlvRGl2ZXJnZW5jZUFsbG93ZWQ6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIxMQoJLy8gYXNzZXJ0KChsaXF1ZGl0eVJhdGlvQmVmb3JlIC0gcmF0aW9EaXZlcmdlbmNlQWxsb3dlZCkgPCBsaXF1ZGl0eVJhdGlvT2ZDdXJyZW50VHhuKQoJZnJhbWVfZGlnIDQgLy8gbGlxdWRpdHlSYXRpb0JlZm9yZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyA2IC8vIHJhdGlvRGl2ZXJnZW5jZUFsbG93ZWQ6IHVuc2FmZSB1aW50MjU2CgliLQoJZnJhbWVfZGlnIDUgLy8gbGlxdWRpdHlSYXRpb09mQ3VycmVudFR4bjogdW5zYWZlIHVpbnQyNTYKCWI8Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjEyCgkvLyBhc3NlcnQobGlxdWRpdHlSYXRpb09mQ3VycmVudFR4biA8IChsaXF1ZGl0eVJhdGlvQmVmb3JlICsgcmF0aW9EaXZlcmdlbmNlQWxsb3dlZCkpCglmcmFtZV9kaWcgNSAvLyBsaXF1ZGl0eVJhdGlvT2ZDdXJyZW50VHhuOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDQgLy8gbGlxdWRpdHlSYXRpb0JlZm9yZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyA2IC8vIHJhdGlvRGl2ZXJnZW5jZUFsbG93ZWQ6IHVuc2FmZSB1aW50MjU2CgliKwoJYjwKCWFzc2VydAoKaWYxMF9lbmQ6CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjE1CgkvLyBhc3NlcnQodGhpcy50cmFuc2ZlcllGcm9tKHRoaXMudHhuLnNlbmRlciwgdGhpcy5hcHAuYWRkcmVzcywgYW1vdW50WSkpCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50WTogdWludDI1NgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCXR4biBTZW5kZXIKCWNhbGxzdWIgdHJhbnNmZXJZRnJvbQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIxNwoJLy8gbHB0VG9NaW50ID0gPHVpbnQyNTY+MAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWZyYW1lX2J1cnkgNyAvLyBscHRUb01pbnQ6IHVpbnQyNTYKCgkvLyBpZjExX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIxOQoJLy8gaXNzdWVkTHB0QmVmb3JlID09PSA8dWludDI1Nj4wCglmcmFtZV9kaWcgMyAvLyBpc3N1ZWRMcHRCZWZvcmU6IHVuc2FmZSB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj09CglieiBpZjExX2Vsc2UKCgkvLyBpZjExX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMjEKCS8vIGRlY2ltYWxzT2ZYID0gdGhpcy5nZXRUb2tlblhEZWNpbWFscygpCgljYWxsc3ViIGdldFRva2VuWERlY2ltYWxzCglmcmFtZV9idXJ5IDggLy8gZGVjaW1hbHNPZlg6IHVuc2FmZSB1aW50OAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMjIKCS8vIGRlY2ltYWxzT2ZZID0gdGhpcy5nZXRUb2tlbllEZWNpbWFscygpCgljYWxsc3ViIGdldFRva2VuWURlY2ltYWxzCglmcmFtZV9idXJ5IDkgLy8gZGVjaW1hbHNPZlk6IHVuc2FmZSB1aW50OAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMjQKCS8vIGFtb3VudFhOb3JtYWxpemVkID0gKGFtb3VudFggKiAodGhpcy5nZXREZWNpbWFsUGxhY2VzKDx1aW50NjQ+REVDSU1BTFMpKSkgLyB0aGlzLmdldERlY2ltYWxQbGFjZXMoPHVpbnQ2ND5kZWNpbWFsc09mWCkKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CglpbnQgNgoJY2FsbHN1YiBnZXREZWNpbWFsUGxhY2VzCgliKgoJZnJhbWVfZGlnIDggLy8gZGVjaW1hbHNPZlg6IHVuc2FmZSB1aW50OAoJZHVwCgliaXRsZW4KCWludCA2NAoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgOAoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY2FsbHN1YiBnZXREZWNpbWFsUGxhY2VzCgliLwoJZnJhbWVfYnVyeSAxMCAvLyBhbW91bnRYTm9ybWFsaXplZDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjI1CgkvLyBhbW91bnRZTm9ybWFsaXplZCA9IChhbW91bnRZICogKHRoaXMuZ2V0RGVjaW1hbFBsYWNlcyg8dWludDY0PkRFQ0lNQUxTKSkpIC8gdGhpcy5nZXREZWNpbWFsUGxhY2VzKDx1aW50NjQ+ZGVjaW1hbHNPZlkpCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50WTogdWludDI1NgoJaW50IDYKCWNhbGxzdWIgZ2V0RGVjaW1hbFBsYWNlcwoJYioKCWZyYW1lX2RpZyA5IC8vIGRlY2ltYWxzT2ZZOiB1bnNhZmUgdWludDgKCWR1cAoJYml0bGVuCglpbnQgNjQKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDgKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNhbGxzdWIgZ2V0RGVjaW1hbFBsYWNlcwoJYi8KCWZyYW1lX2J1cnkgMTEgLy8gYW1vdW50WU5vcm1hbGl6ZWQ6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjIyNwoJLy8gbHB0VG9NaW50ID0gc3FydChhbW91bnRYTm9ybWFsaXplZCAqIGFtb3VudFlOb3JtYWxpemVkKQoJZnJhbWVfZGlnIDEwIC8vIGFtb3VudFhOb3JtYWxpemVkOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDExIC8vIGFtb3VudFlOb3JtYWxpemVkOiB1bnNhZmUgdWludDI1NgoJYioKCWJzcXJ0CglmcmFtZV9idXJ5IDcgLy8gbHB0VG9NaW50OiB1aW50MjU2CgliIGlmMTFfZW5kCgppZjExX2Vsc2U6CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjMwCgkvLyByYXRpb1ggPSAoYW1vdW50WCAqIDx1aW50MjU2PlNDQUxFKSAvIChiYWxhbmNlWCAtIGFtb3VudFgpCglmcmFtZV9kaWcgMCAvLyBhbW91bnRYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDA1YWYzMTA3YTQwMDAKCWIqCglmcmFtZV9kaWcgMiAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CgliLQoJYi8KCWZyYW1lX2J1cnkgMTIgLy8gcmF0aW9YOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMzEKCS8vIHJhdGlvWSA9IChhbW91bnRZICogPHVpbnQyNTY+U0NBTEUpIC8gYmFsYW5jZVkKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnRZOiB1aW50MjU2CglieXRlIDB4MDAwMDVhZjMxMDdhNDAwMAoJYioKCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoJYi8KCWZyYW1lX2J1cnkgMTMgLy8gcmF0aW9ZOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMzIKCS8vIHJhdGlvID0gcmF0aW9YIDwgcmF0aW9ZID8gcmF0aW9YIDogcmF0aW9ZCglmcmFtZV9kaWcgMTIgLy8gcmF0aW9YOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDEzIC8vIHJhdGlvWTogdW5zYWZlIHVpbnQyNTYKCWI8CglieiB0ZXJuYXJ5MV9mYWxzZQoJZnJhbWVfZGlnIDEyIC8vIHJhdGlvWDogdW5zYWZlIHVpbnQyNTYKCWIgdGVybmFyeTFfZW5kCgp0ZXJuYXJ5MV9mYWxzZToKCWZyYW1lX2RpZyAxMyAvLyByYXRpb1k6IHVuc2FmZSB1aW50MjU2Cgp0ZXJuYXJ5MV9lbmQ6CglmcmFtZV9idXJ5IDE0IC8vIHJhdGlvOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyMzQKCS8vIGxwdFRvTWludCA9IChpc3N1ZWRMcHRCZWZvcmUgKiByYXRpbykgLyA8dWludDI1Nj5TQ0FMRQoJZnJhbWVfZGlnIDMgLy8gaXNzdWVkTHB0QmVmb3JlOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDE0IC8vIHJhdGlvOiB1bnNhZmUgdWludDI1NgoJYioKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCgliLwoJZnJhbWVfYnVyeSA3IC8vIGxwdFRvTWludDogdWludDI1NgoKaWYxMV9lbmQ6CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjM3CgkvLyBhc3NlcnQobHB0VG9NaW50ID4gPHVpbnQyNTY+MCkKCWZyYW1lX2RpZyA3IC8vIGxwdFRvTWludDogdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjM4CgkvLyBhc3NlcnQodGhpcy50cmFuc2Zlcih0aGlzLmFwcC5hZGRyZXNzLCB0aGlzLnR4bi5zZW5kZXIsIGxwdFRvTWludCkpCglmcmFtZV9kaWcgNyAvLyBscHRUb01pbnQ6IHVpbnQyNTYKCXR4biBTZW5kZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgljYWxsc3ViIHRyYW5zZmVyCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjQwCgkvLyB0aGlzLkFkZExpcXVpZGl0eS5sb2coCgkvLyAgICAgICAgICAgICB7CgkvLyAgICAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICAgICAgYW1vdW50WDogYW1vdW50WCwKCS8vICAgICAgICAgICAgICAgICBhbW91bnRZOiBhbW91bnRZLAoJLy8gICAgICAgICAgICAgICAgIGxwdEFtb3VudDogbHB0VG9NaW50CgkvLyAgICAgICAgICAgICB9CgkvLyAgICAgICAgICkKCWJ5dGUgMHgxMjAwNjdkOSAvLyBBZGRMaXF1aWRpdHkoYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYsdWludDI1NikKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudFk6IHVpbnQyNTYKCWNvbmNhdAoJZnJhbWVfZGlnIDcgLy8gbHB0VG9NaW50OiB1aW50MjU2Cgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI0OQoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDE0CglyZXRzdWIKCmFiaV9yb3V0ZV9yZW1vdmVMaXF1aWRpdHk6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGxwdEFtb3VudDogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgcmVtb3ZlTGlxdWlkaXR5KHVpbnQyNTYpYm9vbAoJY2FsbHN1YiByZW1vdmVMaXF1aWRpdHkKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gcmVtb3ZlTGlxdWlkaXR5KHVpbnQyNTYpYm9vbApyZW1vdmVMaXF1aWRpdHk6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiA1CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI1MwoJLy8gYmFsYW5jZVkgPSB0aGlzLmdldFRva2VuWUJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlbllCYWxhbmNlCglmcmFtZV9idXJ5IDAgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI1NAoJLy8gYmFsYW5jZVggPSB0aGlzLmdldFRva2VuWEJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlblhCYWxhbmNlCglmcmFtZV9idXJ5IDEgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI1NgoJLy8gYXNzZXJ0KGJhbGFuY2VYID4gPHVpbnQyNTY+MCkKCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjU3CgkvLyBhc3NlcnQoYmFsYW5jZVkgPiA8dWludDI1Nj4wKQoJZnJhbWVfZGlnIDAgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj4KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyNTkKCS8vIGlzc3VlZExwdEJlZm9yZSA9IHRoaXMudG90YWxTdXBwbHkudmFsdWUgLSB0aGlzLmFyYzIwMF9iYWxhbmNlT2YodGhpcy5hcHAuYWRkcmVzcykKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NTcwNzA2Yzc5IC8vICJ0b3RhbFN1cHBseSIKCWJveF9nZXQKCWFzc2VydAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWNhbGxzdWIgYXJjMjAwX2JhbGFuY2VPZgoJYi0KCWZyYW1lX2J1cnkgMiAvLyBpc3N1ZWRMcHRCZWZvcmU6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI2MAoJLy8gd2l0aGRyYXdBbW91bnRYID0gKGJhbGFuY2VYICogbHB0QW1vdW50KSAvIGlzc3VlZExwdEJlZm9yZQoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gbHB0QW1vdW50OiB1aW50MjU2CgliKgoJZnJhbWVfZGlnIDIgLy8gaXNzdWVkTHB0QmVmb3JlOiB1bnNhZmUgdWludDI1NgoJYi8KCWZyYW1lX2J1cnkgMyAvLyB3aXRoZHJhd0Ftb3VudFg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI2MQoJLy8gd2l0aGRyYXdBbW91bnRZID0gKGJhbGFuY2VZICogbHB0QW1vdW50KSAvIGlzc3VlZExwdEJlZm9yZQoJZnJhbWVfZGlnIDAgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gbHB0QW1vdW50OiB1aW50MjU2CgliKgoJZnJhbWVfZGlnIDIgLy8gaXNzdWVkTHB0QmVmb3JlOiB1bnNhZmUgdWludDI1NgoJYi8KCWZyYW1lX2J1cnkgNCAvLyB3aXRoZHJhd0Ftb3VudFk6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI2MwoJLy8gYXNzZXJ0KHdpdGhkcmF3QW1vdW50WCA+IDx1aW50MjU2PjApCglmcmFtZV9kaWcgMyAvLyB3aXRoZHJhd0Ftb3VudFg6IHVuc2FmZSB1aW50MjU2CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj4KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyNjQKCS8vIGFzc2VydCh3aXRoZHJhd0Ftb3VudFkgPiA8dWludDI1Nj4wKQoJZnJhbWVfZGlnIDQgLy8gd2l0aGRyYXdBbW91bnRZOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjY2CgkvLyBhc3NlcnQodGhpcy50cmFuc2Zlcih0aGlzLnR4bi5zZW5kZXIsIHRoaXMuYXBwLmFkZHJlc3MsIGxwdEFtb3VudCkpCglmcmFtZV9kaWcgLTEgLy8gbHB0QW1vdW50OiB1aW50MjU2CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJdHhuIFNlbmRlcgoJY2FsbHN1YiB0cmFuc2ZlcgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI2NwoJLy8gYXNzZXJ0KHRoaXMudHJhbnNmZXJYVG8odGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd0Ftb3VudFgpKQoJZnJhbWVfZGlnIDMgLy8gd2l0aGRyYXdBbW91bnRYOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgl0eG4gU2VuZGVyCgljYWxsc3ViIHRyYW5zZmVyWFRvCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjY4CgkvLyBhc3NlcnQodGhpcy50cmFuc2ZlcllUbyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3QW1vdW50WSkpCglmcmFtZV9kaWcgNCAvLyB3aXRoZHJhd0Ftb3VudFk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCXR4biBTZW5kZXIKCWNhbGxzdWIgdHJhbnNmZXJZVG8KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyNzAKCS8vIHRoaXMuUmVtb3ZlTGlxdWlkaXR5LmxvZygKCS8vICAgICAgICAgICAgIHsKCS8vICAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgICAgICBhbW91bnRYOiB3aXRoZHJhd0Ftb3VudFgsCgkvLyAgICAgICAgICAgICAgICAgYW1vdW50WTogd2l0aGRyYXdBbW91bnRZLAoJLy8gICAgICAgICAgICAgICAgIGxwdEFtb3VudDogbHB0QW1vdW50CgkvLyAgICAgICAgICAgICB9CgkvLyAgICAgICAgICkKCWJ5dGUgMHgyODE3YTY1NyAvLyBSZW1vdmVMaXF1aWRpdHkoYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYsdWludDI1NikKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAzIC8vIHdpdGhkcmF3QW1vdW50WDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0CglmcmFtZV9kaWcgNCAvLyB3aXRoZHJhd0Ftb3VudFk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJZnJhbWVfZGlnIC0xIC8vIGxwdEFtb3VudDogdWludDI1NgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyNzkKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiA0CglyZXRzdWIKCi8vIGNvbXB1dGVPdXRUb2tlbnModWludDI1Nix1aW50MjU2LHVpbnQyNTYsdWludDI1Nil1aW50MjU2CmNvbXB1dGVPdXRUb2tlbnM6Cglwcm90byA0IDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiAzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI4MwoJLy8gZmFjdG9yID0gPHVpbnQyNTY+U0NBTEUgLSBmZWUKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCglmcmFtZV9kaWcgLTQgLy8gZmVlOiB1aW50MjU2CgliLQoJZnJhbWVfYnVyeSAwIC8vIGZhY3RvcjogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mjg1CgkvLyBudW1lcmF0b3IgPSAoCgkvLyAgICAgICAgICAgICA8dWludDw1MTI+PmFtb3VudEEgKiA8dWludDw1MTI+PnN1cHBseUIgKiA8dWludDw1MTI+PmZhY3RvcgoJLy8gICAgICAgICApCglmcmFtZV9kaWcgLTEgLy8gYW1vdW50QTogdWludDI1NgoJZnJhbWVfZGlnIC0zIC8vIHN1cHBseUI6IHVpbnQyNTYKCWIqCglmcmFtZV9kaWcgMCAvLyBmYWN0b3I6IHVuc2FmZSB1aW50MjU2CgliKgoJZnJhbWVfYnVyeSAxIC8vIG51bWVyYXRvcjogdW5zYWZlIHVpbnQ1MTIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mjg4CgkvLyBkZW5vbWluYXRvciA9ICgKCS8vICAgICAgICAgICAgICg8dWludDw1MTI+PmFtb3VudEEgKyA8dWludDw1MTI+PnN1cHBseUEpICogPHVpbnQ8NTEyPj5TQ0FMRQoJLy8gICAgICAgICApCglmcmFtZV9kaWcgLTEgLy8gYW1vdW50QTogdWludDI1NgoJZnJhbWVfZGlnIC0yIC8vIHN1cHBseUE6IHVpbnQyNTYKCWIrCglieXRlIDB4MDAwMDVhZjMxMDdhNDAwMAoJYioKCWZyYW1lX2J1cnkgMiAvLyBkZW5vbWluYXRvcjogdW5zYWZlIHVpbnQ1MTIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MjkyCgkvLyByZXR1cm4gPHVpbnQyNTY+KG51bWVyYXRvciAvIGRlbm9taW5hdG9yKTsKCWZyYW1lX2RpZyAxIC8vIG51bWVyYXRvcjogdW5zYWZlIHVpbnQ1MTIKCWZyYW1lX2RpZyAyIC8vIGRlbm9taW5hdG9yOiB1bnNhZmUgdWludDUxMgoJYi8KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIGNvbXB1dGVQbGF0Zm9ybUZlZSh1aW50MjU2LHVpbnQyNTYsdWludDI1Nil1aW50MjU2CmNvbXB1dGVQbGF0Zm9ybUZlZToKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mjk2CgkvLyBhbW91bnRfd2l0aG91dF9mZWUgPSB0aGlzLmNvbXB1dGVPdXRUb2tlbnMoYW1vdW50QSwgc3VwcGx5QSwgc3VwcGx5QiwgMCkKCWludCAwCglmcmFtZV9kaWcgLTMgLy8gc3VwcGx5QjogdWludDI1NgoJZnJhbWVfZGlnIC0yIC8vIHN1cHBseUE6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRBOiB1aW50MjU2CgljYWxsc3ViIGNvbXB1dGVPdXRUb2tlbnMKCWZyYW1lX2J1cnkgMCAvLyBhbW91bnRfd2l0aG91dF9mZWU6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjI5NwoJLy8gYW1vdW50X3dpdGhfZmVlID0gdGhpcy5jb21wdXRlT3V0VG9rZW5zKGFtb3VudEEsIHN1cHBseUEsIHN1cHBseUIsIHRoaXMuZmVlLnZhbHVlLnN3YXBGZWUpCglieXRlIDB4NjY2NTY1IC8vICJmZWUiCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIC0zIC8vIHN1cHBseUI6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBzdXBwbHlBOiB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gYW1vdW50QTogdWludDI1NgoJY2FsbHN1YiBjb21wdXRlT3V0VG9rZW5zCglmcmFtZV9idXJ5IDEgLy8gYW1vdW50X3dpdGhfZmVlOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czoyOTkKCS8vIHJldHVybiAoKGFtb3VudF93aXRob3V0X2ZlZSAtIGFtb3VudF93aXRoX2ZlZSkgKiB0aGlzLmZlZS52YWx1ZS5wbGF0Zm9ybUZlZSkgLyA8dWludDI1Nj5TQ0FMRTsKCWZyYW1lX2RpZyAwIC8vIGFtb3VudF93aXRob3V0X2ZlZTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAxIC8vIGFtb3VudF93aXRoX2ZlZTogdW5zYWZlIHVpbnQyNTYKCWItCglieXRlIDB4NjY2NTY1IC8vICJmZWUiCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMzIgMzIKCWIqCglieXRlIDB4MDAwMDVhZjMxMDdhNDAwMAoJYi8KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCmFiaV9yb3V0ZV9zd2FwWHRvWToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gbWluQW1vdW50WTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHBheVR4blg6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzd2FwWHRvWSh1aW50MjU2LHBheSl1aW50MjU2CgljYWxsc3ViIHN3YXBYdG9ZCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBzd2FwWHRvWSh1aW50MjU2LHBheSl1aW50MjU2CnN3YXBYdG9ZOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gNQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozMDMKCS8vIHZlcmlmeVBheVR4bihwYXlUeG5YLCB7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAgICAgICAgICAgICByZWtleVRvOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICAgICAgY2xvc2VSZW1haW5kZXJUbzogZ2xvYmFscy56ZXJvQWRkcmVzcywKCS8vICAgICAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHBheVR4blg6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBheVR4blg6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJla2V5VG8KCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIFJla2V5VG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBjbG9zZVJlbWFpbmRlclRvCglmcmFtZV9kaWcgLTEgLy8gcGF5VHhuWDogUGF5VHhuCglndHhucyBDbG9zZVJlbWFpbmRlclRvCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzExCgkvLyBhbW91bnRYID0gPHVpbnQyNTY+cGF5VHhuWC5hbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG5YOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaXRvYgoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMxMgoJLy8gYmFsYW5jZVkgPSB0aGlzLmdldFRva2VuWUJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlbllCYWxhbmNlCglmcmFtZV9idXJ5IDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMxMwoJLy8gYmFsYW5jZVggPSB0aGlzLmdldFRva2VuWEJhbGFuY2UoKQoJY2FsbHN1YiBnZXRUb2tlblhCYWxhbmNlCglmcmFtZV9idXJ5IDIgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMxNQoJLy8gYXNzZXJ0KGJhbGFuY2VYID4gPHVpbnQyNTY+MCkKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzE2CgkvLyBhc3NlcnQoYmFsYW5jZVkgPiA8dWludDI1Nj4wLCBiYWxhbmNlWSA+IG1pbkFtb3VudFkpCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYXNzZXJ0CglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBtaW5BbW91bnRZOiB1aW50MjU2CgliPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMxOAoJLy8gYW1vdW50T3V0ID0gdGhpcy5jb21wdXRlT3V0VG9rZW5zKAoJLy8gICAgICAgICAgICAgYW1vdW50WCwKCS8vICAgICAgICAgICAgIGJhbGFuY2VYIC0gYW1vdW50WCwKCS8vICAgICAgICAgICAgIGJhbGFuY2VZLAoJLy8gICAgICAgICAgICAgdGhpcy5mZWUudmFsdWUuc3dhcEZlZQoJLy8gICAgICAgICApCglieXRlIDB4NjY2NTY1IC8vICJmZWUiCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDAgLy8gYW1vdW50WDogdW5zYWZlIHVpbnQyNTYKCWItCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNhbGxzdWIgY29tcHV0ZU91dFRva2VucwoJZnJhbWVfYnVyeSAzIC8vIGFtb3VudE91dDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzI1CgkvLyBhc3NlcnQoYW1vdW50T3V0ID4gPHVpbnQyNTY+MCwgYW1vdW50T3V0ID49IG1pbkFtb3VudFksIGFtb3VudE91dCA8IGJhbGFuY2VZKQoJZnJhbWVfZGlnIDMgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCWZyYW1lX2RpZyAzIC8vIGFtb3VudE91dDogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBtaW5BbW91bnRZOiB1aW50MjU2CgliPj0KCWFzc2VydAoJZnJhbWVfZGlnIDMgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CgliPAoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMyNwoJLy8gcGxhdGZvcm1GZWUgPSB0aGlzLmNvbXB1dGVQbGF0Zm9ybUZlZSgKCS8vICAgICAgICAgICAgIGFtb3VudFgsCgkvLyAgICAgICAgICAgICBiYWxhbmNlWCAtIGFtb3VudFgsCgkvLyAgICAgICAgICAgICBiYWxhbmNlWSwKCS8vICAgICAgICAgKQoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAyIC8vIGJhbGFuY2VYOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDAgLy8gYW1vdW50WDogdW5zYWZlIHVpbnQyNTYKCWItCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFg6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNhbGxzdWIgY29tcHV0ZVBsYXRmb3JtRmVlCglmcmFtZV9idXJ5IDQgLy8gcGxhdGZvcm1GZWU6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMzMwoJLy8gYXNzZXJ0KHRoaXMudHJhbnNmZXJZVG8odGhpcy50eG4uc2VuZGVyLCBhbW91bnRPdXQpKQoJZnJhbWVfZGlnIDMgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgl0eG4gU2VuZGVyCgljYWxsc3ViIHRyYW5zZmVyWVRvCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzM0CgkvLyBhc3NlcnQodGhpcy50cmFuc2ZlcllUbyh0aGlzLm1hbmFnZXIudmFsdWUsIHBsYXRmb3JtRmVlKSkKCWZyYW1lX2RpZyA0IC8vIHBsYXRmb3JtRmVlOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglieXRlIDB4NmQ2MTZlNjE2NzY1NzIgLy8gIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJY2FsbHN1YiB0cmFuc2ZlcllUbwoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjMzNgoJLy8gdGhpcy5Td2FwLmxvZygKCS8vICAgICAgICAgICAgIHsKCS8vICAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgICAgICBhbW91bnRYOiBhbW91bnRYLAoJLy8gICAgICAgICAgICAgICAgIGFtb3VudFk6IGFtb3VudE91dCwKCS8vICAgICAgICAgICAgICAgICBkaXJlY3Rpb25ZdG9YOiBmYWxzZQoJLy8gICAgICAgICAgICAgfQoJLy8gICAgICAgICApCglieXRlIDB4MDAyYThlYTEgLy8gU3dhcChhZGRyZXNzLHVpbnQyNTYsdWludDI1Nixib29sKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIDAgLy8gYW1vdW50WDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0CglmcmFtZV9kaWcgMyAvLyBhbW91bnRPdXQ6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJYnl0ZSAweDAwCglpbnQgMAoJZHVwCglzZXRiaXQKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzQ1CgkvLyByZXR1cm4gYW1vdW50T3V0OwoJZnJhbWVfZGlnIDMgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDQKCXJldHN1YgoKYWJpX3JvdXRlX3N3YXBZdG9YOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBtaW5BbW91bnRYOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gYW1vdW50WTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgc3dhcFl0b1godWludDI1Nix1aW50MjU2KXVpbnQyNTYKCWNhbGxzdWIgc3dhcFl0b1gKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHN3YXBZdG9YKHVpbnQyNTYsdWludDI1Nil1aW50MjU2CnN3YXBZdG9YOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gNAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozNDkKCS8vIGFzc2VydCh0aGlzLnRyYW5zZmVyWUZyb20odGhpcy50eG4uc2VuZGVyLCB0aGlzLmFwcC5hZGRyZXNzLCBhbW91bnRZKSkKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRZOiB1aW50MjU2CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJdHhuIFNlbmRlcgoJY2FsbHN1YiB0cmFuc2ZlcllGcm9tCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzUxCgkvLyBiYWxhbmNlWSA9IHRoaXMuZ2V0VG9rZW5ZQmFsYW5jZSgpCgljYWxsc3ViIGdldFRva2VuWUJhbGFuY2UKCWZyYW1lX2J1cnkgMCAvLyBiYWxhbmNlWTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzUyCgkvLyBiYWxhbmNlWCA9IHRoaXMuZ2V0VG9rZW5YQmFsYW5jZSgpCgljYWxsc3ViIGdldFRva2VuWEJhbGFuY2UKCWZyYW1lX2J1cnkgMSAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzU0CgkvLyBhc3NlcnQoYmFsYW5jZVggPiA8dWludDI1Nj4wLCBiYWxhbmNlWCA+IG1pbkFtb3VudFgpCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgliPgoJYXNzZXJ0CglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBtaW5BbW91bnRYOiB1aW50MjU2CgliPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM1NQoJLy8gYXNzZXJ0KGJhbGFuY2VZID4gPHVpbnQyNTY+MCkKCWZyYW1lX2RpZyAwIC8vIGJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzU3CgkvLyBhbW91bnRPdXQgPSB0aGlzLmNvbXB1dGVPdXRUb2tlbnMoCgkvLyAgICAgICAgICAgICBhbW91bnRZLAoJLy8gICAgICAgICAgICAgYmFsYW5jZVkgLSBhbW91bnRZLAoJLy8gICAgICAgICAgICAgYmFsYW5jZVgsCgkvLyAgICAgICAgICAgICB0aGlzLmZlZS52YWx1ZS5zd2FwRmVlCgkvLyAgICAgICAgICkKCWJ5dGUgMHg2NjY1NjUgLy8gImZlZSIKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDMyCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlWDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIDAgLy8gYmFsYW5jZVk6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTEgLy8gYW1vdW50WTogdWludDI1NgoJYi0KCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudFk6IHVpbnQyNTYKCWNhbGxzdWIgY29tcHV0ZU91dFRva2VucwoJZnJhbWVfYnVyeSAyIC8vIGFtb3VudE91dDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6MzY0CgkvLyBhc3NlcnQoYW1vdW50T3V0ID4gPHVpbnQyNTY+MCwgYW1vdW50T3V0ID49IG1pbkFtb3VudFgsIGFtb3VudE91dCA8IGJhbGFuY2VYKQoJZnJhbWVfZGlnIDIgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWI+Cglhc3NlcnQKCWZyYW1lX2RpZyAyIC8vIGFtb3VudE91dDogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBtaW5BbW91bnRYOiB1aW50MjU2CgliPj0KCWFzc2VydAoJZnJhbWVfZGlnIDIgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CgliPAoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM2NgoJLy8gcGxhdGZvcm1GZWUgPSB0aGlzLmNvbXB1dGVQbGF0Zm9ybUZlZSgKCS8vICAgICAgICAgICAgIGFtb3VudFksCgkvLyAgICAgICAgICAgICBiYWxhbmNlWSAtIGFtb3VudFksCgkvLyAgICAgICAgICAgICBiYWxhbmNlWCwKCS8vICAgICAgICAgKQoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZVg6IHVuc2FmZSB1aW50MjU2CglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAwIC8vIGJhbGFuY2VZOiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudFk6IHVpbnQyNTYKCWItCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRZOiB1aW50MjU2CgljYWxsc3ViIGNvbXB1dGVQbGF0Zm9ybUZlZQoJZnJhbWVfYnVyeSAzIC8vIHBsYXRmb3JtRmVlOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozNzIKCS8vIGFzc2VydCh0aGlzLnRyYW5zZmVyWFRvKHRoaXMudHhuLnNlbmRlciwgYW1vdW50T3V0KSkKCWZyYW1lX2RpZyAyIC8vIGFtb3VudE91dDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJdHhuIFNlbmRlcgoJY2FsbHN1YiB0cmFuc2ZlclhUbwoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbFYwMi5hbGdvLnRzOjM3MwoJLy8gYXNzZXJ0KHRoaXMudHJhbnNmZXJYVG8odGhpcy5tYW5hZ2VyLnZhbHVlLCBwbGF0Zm9ybUZlZSkpCglmcmFtZV9kaWcgMyAvLyBwbGF0Zm9ybUZlZTogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYnl0ZSAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCWNhbGxzdWIgdHJhbnNmZXJYVG8KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2xWMDIuYWxnby50czozNzUKCS8vIHRoaXMuU3dhcC5sb2coCgkvLyAgICAgICAgICAgICB7CgkvLyAgICAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICAgICAgYW1vdW50WDogYW1vdW50T3V0LAoJLy8gICAgICAgICAgICAgICAgIGFtb3VudFk6IGFtb3VudFksCgkvLyAgICAgICAgICAgICAgICAgZGlyZWN0aW9uWXRvWDogdHJ1ZQoJLy8gICAgICAgICAgICAgfQoJLy8gICAgICAgICApCglieXRlIDB4MDAyYThlYTEgLy8gU3dhcChhZGRyZXNzLHVpbnQyNTYsdWludDI1Nixib29sKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIDIgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRZOiB1aW50MjU2Cgljb25jYXQKCWJ5dGUgMHgwMAoJaW50IDAKCWludCAxCglzZXRiaXQKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sVjAyLmFsZ28udHM6Mzg0CgkvLyByZXR1cm4gYW1vdW50T3V0OwoJZnJhbWVfZGlnIDIgLy8gYW1vdW50T3V0OiB1bnNhZmUgdWludDI1NgoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDMKCXJldHN1YgoKY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKGFkZHJlc3Mpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoJZXJyCgpjYWxsX05vT3A6CgltZXRob2QgInNldE1hbmFnZXIoYWRkcmVzcylib29sIgoJbWV0aG9kICJpbml0aWFsaXplKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDgsdWludDI1NixhZGRyZXNzKXZvaWQiCgltZXRob2QgImFyYzIwMF9uYW1lKClieXRlWzMyXSIKCW1ldGhvZCAiYXJjMjAwX3N5bWJvbCgpYnl0ZVs4XSIKCW1ldGhvZCAiYXJjMjAwX2RlY2ltYWxzKCl1aW50OCIKCW1ldGhvZCAiYXJjMjAwX3RvdGFsU3VwcGx5KCl1aW50MjU2IgoJbWV0aG9kICJhcmMyMDBfYmFsYW5jZU9mKGFkZHJlc3MpdWludDI1NiIKCW1ldGhvZCAiaGFzQmFsYW5jZShhZGRyZXNzKWJvb2wiCgltZXRob2QgImhhc0FsbG93YW5jZShhZGRyZXNzLGFkZHJlc3MpYm9vbCIKCW1ldGhvZCAiYXJjMjAwX2FsbG93YW5jZShhZGRyZXNzLGFkZHJlc3MpdWludDI1NiIKCW1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyKGFkZHJlc3MsdWludDI1Nilib29sIgoJbWV0aG9kICJhcmMyMDBfYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpYm9vbCIKCW1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1Nilib29sIgoJbWV0aG9kICJwb29sSW5pdGlhbGl6ZShieXRlWzMyXSxieXRlWzhdLGFwcGxpY2F0aW9uKXZvaWQiCgltZXRob2QgInNldEZlZUNvbnRyb2xsZXIoYWRkcmVzcylib29sIgoJbWV0aG9kICJzZXRGZWVzKHVpbnQyNTYpYm9vbCIKCW1ldGhvZCAic2V0UGxhdGZvcm1GZWVzKHVpbnQyNTYpYm9vbCIKCW1ldGhvZCAicmVnaXN0ZXJPbmxpbmUoYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKCW1ldGhvZCAicmVnaXN0ZXJPZmZsaW5lKCl2b2lkIgoJbWV0aG9kICJyYXRpbygpdWludDI1NiIKCW1ldGhvZCAiYWRkTGlxdWlkaXR5KHBheSx1aW50MjU2KWJvb2wiCgltZXRob2QgInJlbW92ZUxpcXVpZGl0eSh1aW50MjU2KWJvb2wiCgltZXRob2QgInN3YXBYdG9ZKHBheSx1aW50MjU2KXVpbnQyNTYiCgltZXRob2QgInN3YXBZdG9YKHVpbnQyNTYsdWludDI1Nil1aW50MjU2IgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3NldE1hbmFnZXIgYWJpX3JvdXRlX2luaXRpYWxpemUgYWJpX3JvdXRlX2FyYzIwMF9uYW1lIGFiaV9yb3V0ZV9hcmMyMDBfc3ltYm9sIGFiaV9yb3V0ZV9hcmMyMDBfZGVjaW1hbHMgYWJpX3JvdXRlX2FyYzIwMF90b3RhbFN1cHBseSBhYmlfcm91dGVfYXJjMjAwX2JhbGFuY2VPZiBhYmlfcm91dGVfaGFzQmFsYW5jZSBhYmlfcm91dGVfaGFzQWxsb3dhbmNlIGFiaV9yb3V0ZV9hcmMyMDBfYWxsb3dhbmNlIGFiaV9yb3V0ZV9hcmMyMDBfdHJhbnNmZXIgYWJpX3JvdXRlX2FyYzIwMF9hcHByb3ZlIGFiaV9yb3V0ZV9hcmMyMDBfdHJhbnNmZXJGcm9tIGFiaV9yb3V0ZV9wb29sSW5pdGlhbGl6ZSBhYmlfcm91dGVfc2V0RmVlQ29udHJvbGxlciBhYmlfcm91dGVfc2V0RmVlcyBhYmlfcm91dGVfc2V0UGxhdGZvcm1GZWVzIGFiaV9yb3V0ZV9yZWdpc3Rlck9ubGluZSBhYmlfcm91dGVfcmVnaXN0ZXJPZmZsaW5lIGFiaV9yb3V0ZV9yYXRpbyBhYmlfcm91dGVfYWRkTGlxdWlkaXR5IGFiaV9yb3V0ZV9yZW1vdmVMaXF1aWRpdHkgYWJpX3JvdXRlX3N3YXBYdG9ZIGFiaV9yb3V0ZV9zd2FwWXRvWAoJZXJyCgpjYWxsX1VwZGF0ZUFwcGxpY2F0aW9uOgoJbWV0aG9kICJ1cGRhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV91cGRhdGVBcHBsaWNhdGlvbgoJZXJyCgpjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uOgoJbWV0aG9kICJkZWxldGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9kZWxldGVBcHBsaWNhdGlvbgoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AlgoArc200PoolV02",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setManager",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "initialize",
        "desc": "Initialize ARC200",
        "args": [
          {
            "name": "name",
            "type": "byte[32]",
            "desc": "token name"
          },
          {
            "name": "symbol",
            "type": "byte[8]",
            "desc": "token symbol"
          },
          {
            "name": "decimals",
            "type": "uint8",
            "desc": "number of decimals"
          },
          {
            "name": "totalSupply",
            "type": "uint256",
            "desc": "total supply of tokens"
          },
          {
            "name": "mintTo",
            "type": "address",
            "desc": "initial mint to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc200_name",
        "desc": "The name of the token",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "byte[32]",
          "desc": "The name of the token"
        }
      },
      {
        "name": "arc200_symbol",
        "desc": "Returns the symbol of the token",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "byte[8]",
          "desc": "The symbol of the token"
        }
      },
      {
        "name": "arc200_decimals",
        "desc": "Returns the decimals of the token",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint8",
          "desc": "The decimals of the token"
        }
      },
      {
        "name": "arc200_totalSupply",
        "desc": "Returns the total supply of the token",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint256",
          "desc": "The total supply of the token"
        }
      },
      {
        "name": "arc200_balanceOf",
        "desc": "Returns the current balance of the owner of the token",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address",
            "desc": "The address of the owner of the token"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "The current balance of the holder of the token"
        }
      },
      {
        "name": "hasBalance",
        "desc": "Check if balance box exists",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address",
            "desc": "The address of the owner"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`if balance box exists"
        }
      },
      {
        "name": "hasAllowance",
        "desc": "Check if allowance box exists",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address",
            "desc": "The address of the owner"
          },
          {
            "name": "spender",
            "type": "address",
            "desc": "The address of the spender"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "`true`if allowance box exists"
        }
      },
      {
        "name": "arc200_allowance",
        "desc": "Returns the current allowance of the spender of the tokens of the owner",
        "readonly": true,
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "The remaining allowance"
        }
      },
      {
        "name": "arc200_transfer",
        "desc": "Transfers tokens",
        "args": [
          {
            "name": "to",
            "type": "address",
            "desc": "The destination of the transfer"
          },
          {
            "name": "value",
            "type": "uint256",
            "desc": "Amount of tokens to transfer"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "Success"
        }
      },
      {
        "name": "arc200_approve",
        "desc": "Approve spender for a token",
        "args": [
          {
            "name": "spender",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "Success"
        }
      },
      {
        "name": "arc200_transferFrom",
        "desc": "Transfers tokens from source to destination as approved spender",
        "args": [
          {
            "name": "from",
            "type": "address",
            "desc": "The source  of the transfer"
          },
          {
            "name": "to",
            "type": "address",
            "desc": "The destination of the transfer"
          },
          {
            "name": "value",
            "type": "uint256",
            "desc": "Amount of tokens to transfer"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "Success"
        },
        "events": [
          {
            "name": "arc200_Transfer",
            "args": [
              {
                "name": "from",
                "type": "address"
              },
              {
                "name": "to",
                "type": "address"
              },
              {
                "name": "value",
                "type": "uint256"
              }
            ],
            "desc": "Transfer of tokens"
          }
        ]
      },
      {
        "name": "deleteApplication",
        "desc": "Delete the app if balance total supply has been burned",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "poolInitialize",
        "args": [
          {
            "name": "name",
            "type": "byte[32]"
          },
          {
            "name": "symbol",
            "type": "byte[8]"
          },
          {
            "name": "tokenYAppId",
            "type": "application"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFeeController",
        "args": [
          {
            "name": "feeController",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "setFees",
        "args": [
          {
            "name": "fee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "setPlatformFees",
        "args": [
          {
            "name": "fee",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "registerOnline",
        "args": [
          {
            "name": "selectionPk",
            "type": "byte[]"
          },
          {
            "name": "stateProofPk",
            "type": "byte[]"
          },
          {
            "name": "votePk",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerOffline",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "ratio",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "addLiquidity",
        "args": [
          {
            "name": "payTxnX",
            "type": "pay"
          },
          {
            "name": "amountY",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        },
        "events": [
          {
            "name": "AddLiquidity",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "amountX",
                "type": "uint256"
              },
              {
                "name": "amountY",
                "type": "uint256"
              },
              {
                "name": "lptAmount",
                "type": "uint256"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "removeLiquidity",
        "args": [
          {
            "name": "lptAmount",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "bool"
        },
        "events": [
          {
            "name": "RemoveLiquidity",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "amountX",
                "type": "uint256"
              },
              {
                "name": "amountY",
                "type": "uint256"
              },
              {
                "name": "lptAmount",
                "type": "uint256"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "swapXtoY",
        "args": [
          {
            "name": "payTxnX",
            "type": "pay"
          },
          {
            "name": "minAmountY",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        },
        "events": [
          {
            "name": "Swap",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "amountX",
                "type": "uint256"
              },
              {
                "name": "amountY",
                "type": "uint256"
              },
              {
                "name": "directionYtoX",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "swapYtoX",
        "args": [
          {
            "name": "amountY",
            "type": "uint256"
          },
          {
            "name": "minAmountX",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        },
        "events": [
          {
            "name": "Swap",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "amountX",
                "type": "uint256"
              },
              {
                "name": "amountY",
                "type": "uint256"
              },
              {
                "name": "directionYtoX",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      }
    ],
    "events": [
      {
        "name": "arc200_Transfer",
        "args": [
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "desc": "Transfer of tokens"
      },
      {
        "name": "arc200_Approval",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "spender",
            "type": "address"
          },
          {
            "name": "value",
            "type": "uint256"
          }
        ],
        "desc": "Approval of tokens"
      },
      {
        "name": "Swap",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "amountX",
            "type": "uint256"
          },
          {
            "name": "amountY",
            "type": "uint256"
          },
          {
            "name": "directionYtoX",
            "type": "bool"
          }
        ],
        "desc": ""
      },
      {
        "name": "AddLiquidity",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "amountX",
            "type": "uint256"
          },
          {
            "name": "amountY",
            "type": "uint256"
          },
          {
            "name": "lptAmount",
            "type": "uint256"
          }
        ],
        "desc": ""
      },
      {
        "name": "RemoveLiquidity",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "amountX",
            "type": "uint256"
          },
          {
            "name": "amountY",
            "type": "uint256"
          },
          {
            "name": "lptAmount",
            "type": "uint256"
          }
        ],
        "desc": ""
      }
    ]
  }
}