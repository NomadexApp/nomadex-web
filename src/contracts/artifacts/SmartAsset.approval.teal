#pragma version 10

// This TEAL was generated by TEALScript v0.102.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// arc200_name()byte[32]
*abi_route_arc200_name:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_name()byte[32]
	callsub arc200_name
	concat
	log
	int 1
	return

// arc200_name(): StaticBytes<32>
arc200_name:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:24
	// return this.name.value;
	byte 0x6e616d65 // "name"
	app_global_get
	retsub

// arc200_symbol()byte[8]
*abi_route_arc200_symbol:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_symbol()byte[8]
	callsub arc200_symbol
	concat
	log
	int 1
	return

// arc200_symbol(): StaticBytes<8>
arc200_symbol:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:29
	// return this.symbol.value;
	byte 0x73796d626f6c // "symbol"
	app_global_get
	retsub

// arc200_decimals()uint8
*abi_route_arc200_decimals:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_decimals()uint8
	callsub arc200_decimals
	itob
	dup
	bitlen
	int 8
	<=

	// arc200_decimals return value overflowed 8 bits
	assert
	extract 7 1
	concat
	log
	int 1
	return

// arc200_decimals(): uint8
arc200_decimals:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:34
	// return this.decimals.value;
	byte 0x646563696d616c73 // "decimals"
	app_global_get
	btoi
	retsub

// arc200_totalSupply()uint256
*abi_route_arc200_totalSupply:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_totalSupply()uint256
	callsub arc200_totalSupply
	dup
	bitlen
	int 256
	<=

	// arc200_totalSupply return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_totalSupply(): uint256
arc200_totalSupply:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:39
	// return this.totalSupply.value;
	byte 0x746f74616c5f737570706c79 // "total_supply"
	app_global_get
	retsub

// arc200_balanceOf(address)uint256
*abi_route_arc200_balanceOf:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (owner) for arc200_balanceOf must be a address
	assert

	// execute arc200_balanceOf(address)uint256
	callsub arc200_balanceOf
	dup
	bitlen
	int 256
	<=

	// arc200_balanceOf return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_balanceOf(owner: Address): uint256
arc200_balanceOf:
	proto 1 1

	// *if0_condition
	// src/contracts/lib/Arc200.algo.ts:44
	// this.balances(owner).exists
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// src/contracts/lib/Arc200.algo.ts:45
	// return this.balances(owner).value;
	frame_dig -1 // owner: Address
	box_get

	// box value does not exist: this.balances(owner).value
	assert
	retsub

*if0_end:
	// src/contracts/lib/Arc200.algo.ts:47
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

// arc200_allowance(address,address)uint256
*abi_route_arc200_allowance:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (spender) for arc200_allowance must be a address
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (owner) for arc200_allowance must be a address
	assert

	// execute arc200_allowance(address,address)uint256
	callsub arc200_allowance
	dup
	bitlen
	int 256
	<=

	// arc200_allowance return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_allowance(owner: Address, spender: Address): uint256
arc200_allowance:
	proto 2 1

	// *if1_condition
	// src/contracts/lib/Arc200.algo.ts:52
	// this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	bz *if1_end

	// *if1_consequent
	// src/contracts/lib/Arc200.algo.ts:53
	// return this.allowances([owner, spender]).value;
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_get

	// box value does not exist: this.allowances([owner, spender]).value
	assert
	retsub

*if1_end:
	// src/contracts/lib/Arc200.algo.ts:55
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

// transfer(from: Address, to: Address, value: uint256): boolean
transfer:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if2_condition
	// src/contracts/lib/Arc200.algo.ts:63
	// !this.balances(from).exists && from.balance >= globals.minBalance
	frame_dig -1 // from: Address
	box_len
	swap
	pop
	!
	dup
	bz *skip_and0
	frame_dig -1 // from: Address
	acct_params_get AcctBalance
	pop
	global MinBalance
	>=
	&&

*skip_and0:
	bz *if2_end

	// *if2_consequent
	// src/contracts/lib/Arc200.algo.ts:64
	// this.balances(from).value = <uint256>0
	frame_dig -1 // from: Address
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	box_put

*if2_end:
	// *if3_condition
	// src/contracts/lib/Arc200.algo.ts:66
	// !this.balances(to).exists && to.balance >= globals.minBalance
	frame_dig -2 // to: Address
	box_len
	swap
	pop
	!
	dup
	bz *skip_and1
	frame_dig -2 // to: Address
	acct_params_get AcctBalance
	pop
	global MinBalance
	>=
	&&

*skip_and1:
	bz *if3_end

	// *if3_consequent
	// src/contracts/lib/Arc200.algo.ts:67
	// this.balances(to).value = <uint256>0
	frame_dig -2 // to: Address
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	box_put

*if3_end:
	// src/contracts/lib/Arc200.algo.ts:70
	// assert(this.balances(from).exists, NOT_ENOUGH_BALANCE)
	frame_dig -1 // from: Address
	box_len
	swap
	pop

	// not enough balance
	assert

	// src/contracts/lib/Arc200.algo.ts:71
	// assert(this.balances(to).exists, EMPTY_WALLET)
	frame_dig -2 // to: Address
	box_len
	swap
	pop

	// empty wallet, must hold minBalance
	assert

	// src/contracts/lib/Arc200.algo.ts:73
	// senderBalance = this.balances(from).value
	frame_dig -1 // from: Address
	box_get

	// box value does not exist: this.balances(from).value
	assert
	frame_bury 0 // senderBalance: uint256

	// src/contracts/lib/Arc200.algo.ts:74
	// assert(senderBalance >= value, NOT_ENOUGH_BALANCE)
	frame_dig 0 // senderBalance: uint256
	frame_dig -3 // value: uint256
	b>=

	// not enough balance
	assert

	// src/contracts/lib/Arc200.algo.ts:76
	// this.balances(from).value = senderBalance - value
	frame_dig -1 // from: Address
	frame_dig 0 // senderBalance: uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// senderBalance - value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:77
	// this.balances(to).value = this.balances(to).value + value
	frame_dig -2 // to: Address
	frame_dig -2 // to: Address
	box_get

	// box value does not exist: this.balances(to).value
	assert
	frame_dig -3 // value: uint256
	b+
	dup
	bitlen
	int 256
	<=

	// this.balances(to).value + value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:79
	// this.arc200_Transfer.log({ from: from, to: to, value: value })
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	frame_dig -1 // from: Address
	frame_dig -2 // to: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/lib/Arc200.algo.ts:81
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0
	retsub

// arc200_transfer(address,uint256)bool
*abi_route_arc200_transfer:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (value) for arc200_transfer must be a uint256
	assert

	// to: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (to) for arc200_transfer must be a address
	assert

	// execute arc200_transfer(address,uint256)bool
	callsub arc200_transfer
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_transfer(to: Address, value: uint256): boolean
arc200_transfer:
	proto 2 1

	// src/contracts/lib/Arc200.algo.ts:85
	// return this.transfer(this.txn.sender, to, value);
	frame_dig -2 // value: uint256
	frame_dig -1 // to: Address
	txn Sender
	callsub transfer
	retsub

// approve(owner: Address, spender: Address, value: uint256): boolean
approve:
	proto 3 1

	// src/contracts/lib/Arc200.algo.ts:89
	// assert(this.allowances([owner, spender]).exists || spender.balance >= globals.minBalance, EMPTY_WALLET)
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	dup
	bnz *skip_or0
	frame_dig -2 // spender: Address
	acct_params_get AcctBalance
	pop
	global MinBalance
	>=
	||

*skip_or0:
	// empty wallet, must hold minBalance
	assert

	// src/contracts/lib/Arc200.algo.ts:91
	// this.allowances([owner, spender]).value = value
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	frame_dig -3 // value: uint256
	box_put

	// src/contracts/lib/Arc200.algo.ts:92
	// this.arc200_Approval.log({ owner: owner, spender: spender, value: value })
	byte 0x1969f865 // arc200_Approval(address,address,uint256)
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/lib/Arc200.algo.ts:94
	// return true;
	int 1
	retsub

// arc200_approve(address,uint256)bool
*abi_route_arc200_approve:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (value) for arc200_approve must be a uint256
	assert

	// spender: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (spender) for arc200_approve must be a address
	assert

	// execute arc200_approve(address,uint256)bool
	callsub arc200_approve
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_approve(spender: Address, value: uint256): boolean
arc200_approve:
	proto 2 1

	// src/contracts/lib/Arc200.algo.ts:98
	// return this.approve(this.txn.sender, spender, value);
	frame_dig -2 // value: uint256
	frame_dig -1 // spender: Address
	txn Sender
	callsub approve
	retsub

// arc200_transferFrom(address,address,uint256)bool
*abi_route_arc200_transferFrom:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 0 (value) for arc200_transferFrom must be a uint256
	assert

	// to: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (to) for arc200_transferFrom must be a address
	assert

	// from: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (from) for arc200_transferFrom must be a address
	assert

	// execute arc200_transferFrom(address,address,uint256)bool
	callsub arc200_transferFrom
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_transferFrom(from: Address, to: Address, value: uint256): boolean
arc200_transferFrom:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// *if4_condition
	// src/contracts/lib/Arc200.algo.ts:102
	// value === 0
	frame_dig -3 // value: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b==
	bz *if4_end

	// *if4_consequent
	// src/contracts/lib/Arc200.algo.ts:102
	// return true;
	int 1
	b *arc200_transferFrom*return

*if4_end:
	// src/contracts/lib/Arc200.algo.ts:104
	// allowance = this.arc200_allowance(from, this.txn.sender)
	txn Sender
	frame_dig -1 // from: Address
	callsub arc200_allowance
	frame_bury 0 // allowance: unsafe uint256

	// src/contracts/lib/Arc200.algo.ts:105
	// assert(allowance >= value, ALLOWANCE_INSUFFICIENT)
	frame_dig 0 // allowance: unsafe uint256
	frame_dig -3 // value: uint256
	b>=

	// can't spend more than allowed
	assert

	// src/contracts/lib/Arc200.algo.ts:107
	// ownerBalance = this.arc200_balanceOf(from)
	frame_dig -1 // from: Address
	callsub arc200_balanceOf
	frame_bury 1 // ownerBalance: unsafe uint256

	// src/contracts/lib/Arc200.algo.ts:108
	// assert(ownerBalance >= value, NOT_ENOUGH_BALANCE)
	frame_dig 1 // ownerBalance: unsafe uint256
	frame_dig -3 // value: uint256
	b>=

	// not enough balance
	assert

	// src/contracts/lib/Arc200.algo.ts:110
	// this.allowances([from, this.txn.sender]).value = allowance - value
	frame_dig -1 // from: Address
	txn Sender
	concat
	frame_dig 0 // allowance: unsafe uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// allowance - value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:111
	// this.balances(from).value = ownerBalance - value
	frame_dig -1 // from: Address
	frame_dig 1 // ownerBalance: unsafe uint256
	frame_dig -3 // value: uint256
	b-
	dup
	bitlen
	int 256
	<=

	// ownerBalance - value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:112
	// this.balances(to).value = this.arc200_balanceOf(to) + value
	frame_dig -2 // to: Address
	frame_dig -2 // to: Address
	callsub arc200_balanceOf
	frame_dig -3 // value: uint256
	b+
	dup
	bitlen
	int 256
	<=

	// this.arc200_balanceOf(to) + value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

	// src/contracts/lib/Arc200.algo.ts:114
	// this.arc200_Transfer.log({ from: from, to: to, value: value })
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	frame_dig -1 // from: Address
	frame_dig -2 // to: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/lib/Arc200.algo.ts:116
	// return true;
	int 1

*arc200_transferFrom*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// supportsInterface(byte[4])bool
*abi_route_supportsInterface:
	// The ABI return prefix
	byte 0x151f7c75

	// interfaceID: byte[4]
	txna ApplicationArgs 1
	dup
	len
	int 4
	==

	// argument 0 (interfaceID) for supportsInterface must be a byte[4]
	assert

	// execute supportsInterface(byte[4])bool
	callsub supportsInterface
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// supportsInterface(interfaceID: StaticArray<byte, 4>): boolean
supportsInterface:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/contracts/lib/Arc200.algo.ts:121
	// id = btoi(interfaceID)
	frame_dig -1 // interfaceID: StaticArray<byte, 4>
	btoi
	frame_bury 0 // id: uint64

	// src/contracts/lib/Arc200.algo.ts:123
	// return (
	//       id === 0x4e22a3ba ||
	//       id === 0xc7bea040 ||
	//       id === 0xda7025b9 ||
	//       id === 0x4a968f8f ||
	//       id === 0xb5422125 ||
	//       id === 0x657d13ec ||
	//       id === 0xb6ae1a25 ||
	//       id === 0x84ec13d5 ||
	//       id === 0xec996041 ||
	//       id === 0x82e573c4 ||
	//       id === 0xbbb319f3 ||
	//       id === 0x7983c35c ||
	//       id === 0x1969f865 ||
	//       id === 0xbc4a5400 ||
	//       id === 0xc98dd055 ||
	//       id === 0x663042fb
	//     );
	frame_dig 0 // id: uint64
	int 0x4e22a3ba
	==
	dup
	bnz *skip_or1
	frame_dig 0 // id: uint64
	int 0xc7bea040
	==
	||

*skip_or1:
	dup
	bnz *skip_or2
	frame_dig 0 // id: uint64
	int 0xda7025b9
	==
	||

*skip_or2:
	dup
	bnz *skip_or3
	frame_dig 0 // id: uint64
	int 0x4a968f8f
	==
	||

*skip_or3:
	dup
	bnz *skip_or4
	frame_dig 0 // id: uint64
	int 0xb5422125
	==
	||

*skip_or4:
	dup
	bnz *skip_or5
	frame_dig 0 // id: uint64
	int 0x657d13ec
	==
	||

*skip_or5:
	dup
	bnz *skip_or6
	frame_dig 0 // id: uint64
	int 0xb6ae1a25
	==
	||

*skip_or6:
	dup
	bnz *skip_or7
	frame_dig 0 // id: uint64
	int 0x84ec13d5
	==
	||

*skip_or7:
	dup
	bnz *skip_or8
	frame_dig 0 // id: uint64
	int 0xec996041
	==
	||

*skip_or8:
	dup
	bnz *skip_or9
	frame_dig 0 // id: uint64
	int 0x82e573c4
	==
	||

*skip_or9:
	dup
	bnz *skip_or10
	frame_dig 0 // id: uint64
	int 0xbbb319f3
	==
	||

*skip_or10:
	dup
	bnz *skip_or11
	frame_dig 0 // id: uint64
	int 0x7983c35c
	==
	||

*skip_or11:
	dup
	bnz *skip_or12
	frame_dig 0 // id: uint64
	int 0x1969f865
	==
	||

*skip_or12:
	dup
	bnz *skip_or13
	frame_dig 0 // id: uint64
	int 0xbc4a5400
	==
	||

*skip_or13:
	dup
	bnz *skip_or14
	frame_dig 0 // id: uint64
	int 0xc98dd055
	==
	||

*skip_or14:
	dup
	bnz *skip_or15
	frame_dig 0 // id: uint64
	int 0x663042fb
	==
	||

*skip_or15:
	// set the subroutine return value
	frame_bury 0
	retsub

// zeroAddress()address
*abi_route_zeroAddress:
	// The ABI return prefix
	byte 0x151f7c75

	// execute zeroAddress()address
	callsub zeroAddress
	concat
	log
	int 1
	return

// zeroAddress(): Address
zeroAddress:
	proto 0 1

	// src/contracts/lib/Arc200.algo.ts:145
	// return globals.zeroAddress;
	global ZeroAddress
	retsub

// hasBox(address,address)bool
*abi_route_hasBox:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (spender) for hasBox must be a address
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (owner) for hasBox must be a address
	assert

	// execute hasBox(address,address)bool
	callsub hasBox
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// hasBox(owner: Address, spender: Address): boolean
hasBox:
	proto 2 1

	// *if5_condition
	// src/contracts/lib/Arc200.algo.ts:150
	// spender === globals.zeroAddress
	frame_dig -2 // spender: Address
	global ZeroAddress
	==
	bz *if5_end

	// *if5_consequent
	// src/contracts/lib/Arc200.algo.ts:151
	// return this.balances(owner).exists;
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	retsub

*if5_end:
	// src/contracts/lib/Arc200.algo.ts:153
	// return this.allowances([owner, spender]).exists;
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	retsub

// createBalanceBox(address)bool
*abi_route_createBalanceBox:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (owner) for createBalanceBox must be a address
	assert

	// execute createBalanceBox(address)bool
	callsub createBalanceBox
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// createBalanceBox(owner: Address): boolean
createBalanceBox:
	proto 1 1

	// *if6_condition
	// src/contracts/lib/Arc200.algo.ts:157
	// !this.balances(owner).exists
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	!
	bz *if6_end

	// *if6_consequent
	// src/contracts/lib/Arc200.algo.ts:158
	// this.balances(owner).value = <uint256>0
	frame_dig -1 // owner: Address
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	box_put

*if6_end:
	// src/contracts/lib/Arc200.algo.ts:160
	// return true;
	int 1
	retsub

// createAllowanceBox(address,address)bool
*abi_route_createAllowanceBox:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (spender) for createAllowanceBox must be a address
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (owner) for createAllowanceBox must be a address
	assert

	// execute createAllowanceBox(address,address)bool
	callsub createAllowanceBox
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// createAllowanceBox(owner: Address, spender: Address): boolean
createAllowanceBox:
	proto 2 1

	// *if7_condition
	// src/contracts/lib/Arc200.algo.ts:164
	// !this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	!
	bz *if7_end

	// *if7_consequent
	// src/contracts/lib/Arc200.algo.ts:165
	// this.allowances([owner, spender]).value = <uint256>0
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	box_put

*if7_end:
	// src/contracts/lib/Arc200.algo.ts:167
	// return true;
	int 1
	retsub

// noop(uint64)void
*abi_route_noop:
	// number: uint64
	txna ApplicationArgs 1
	btoi

	// execute noop(uint64)void
	callsub noop
	int 1
	return

// noop(number: uint64): void
noop:
	proto 1 0
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// src/contracts/lib/Ownable.algo.ts:7
	// assert(this.warden.exists, 'this app can not update')
	txna Applications 0
	byte 0x77617264656e // "warden"
	app_global_get_ex
	swap
	pop

	// this app can not update
	assert

	// src/contracts/lib/Ownable.algo.ts:8
	// assert(this.txn.sender === this.warden.value, 'only manager can update')
	txn Sender
	byte 0x77617264656e // "warden"
	app_global_get
	==

	// only manager can update
	assert
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// src/contracts/lib/Ownable.algo.ts:12
	// assert(this.warden.exists, 'this app can not be deleted')
	txna Applications 0
	byte 0x77617264656e // "warden"
	app_global_get_ex
	swap
	pop

	// this app can not be deleted
	assert

	// src/contracts/lib/Ownable.algo.ts:13
	// assert(this.txn.sender === this.warden.value, 'only manager can delete')
	txn Sender
	byte 0x77617264656e // "warden"
	app_global_get
	==

	// only manager can delete
	assert

	// src/contracts/lib/Ownable.algo.ts:14
	// sendPayment({
	//       amount: 0,
	//       sender: this.app.address,
	//       receiver: this.warden.value,
	//       closeRemainderTo: this.warden.value,
	//       rekeyTo: this.warden.value,
	//       fee: globals.minTxnFee,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/contracts/lib/Ownable.algo.ts:15
	// amount: 0
	int 0
	itxn_field Amount

	// src/contracts/lib/Ownable.algo.ts:16
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/lib/Ownable.algo.ts:17
	// receiver: this.warden.value
	byte 0x77617264656e // "warden"
	app_global_get
	itxn_field Receiver

	// src/contracts/lib/Ownable.algo.ts:18
	// closeRemainderTo: this.warden.value
	byte 0x77617264656e // "warden"
	app_global_get
	itxn_field CloseRemainderTo

	// src/contracts/lib/Ownable.algo.ts:19
	// rekeyTo: this.warden.value
	byte 0x77617264656e // "warden"
	app_global_get
	itxn_field RekeyTo

	// src/contracts/lib/Ownable.algo.ts:20
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// manager()address
*abi_route_manager:
	// The ABI return prefix
	byte 0x151f7c75

	// execute manager()address
	callsub manager
	concat
	log
	int 1
	return

// manager(): Address
manager:
	proto 0 1

	// *if8_condition
	// src/contracts/lib/Ownable.algo.ts:26
	// this.warden.exists
	txna Applications 0
	byte 0x77617264656e // "warden"
	app_global_get_ex
	swap
	pop
	bz *if8_end

	// *if8_consequent
	// src/contracts/lib/Ownable.algo.ts:27
	// return this.warden.value;
	byte 0x77617264656e // "warden"
	app_global_get
	retsub

*if8_end:
	// src/contracts/lib/Ownable.algo.ts:29
	// return globals.zeroAddress;
	global ZeroAddress
	retsub

// grant(address)void
*abi_route_grant:
	// manager: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (manager) for grant must be a address
	assert

	// execute grant(address)void
	callsub grant
	int 1
	return

// grant(manager: Address): void
grant:
	proto 1 0

	// src/contracts/lib/Ownable.algo.ts:33
	// assert(this.txn.sender === this.warden.value, 'unauthorized')
	txn Sender
	byte 0x77617264656e // "warden"
	app_global_get
	==

	// unauthorized
	assert

	// *if9_condition
	// src/contracts/lib/Ownable.algo.ts:34
	// manager === globals.zeroAddress
	frame_dig -1 // manager: Address
	global ZeroAddress
	==
	bz *if9_else

	// *if9_consequent
	// src/contracts/lib/Ownable.algo.ts:35
	// this.warden.delete()
	byte 0x77617264656e // "warden"
	app_global_del
	b *if9_end

*if9_else:
	// src/contracts/lib/Ownable.algo.ts:37
	// this.warden.value = manager
	byte 0x77617264656e // "warden"
	frame_dig -1 // manager: Address
	app_global_put

*if9_end:
	retsub

// createApplication(address,byte[32],byte[8],uint8,uint256)void
*abi_route_createApplication:
	// totalSupply: uint256
	txna ApplicationArgs 5
	dup
	len
	int 32
	==

	// argument 0 (totalSupply) for createApplication must be a uint256
	assert

	// decimals: uint8
	txna ApplicationArgs 4
	dup
	len
	int 1
	==

	// argument 1 (decimals) for createApplication must be a uint8
	assert
	btoi

	// symbol: byte[8]
	txna ApplicationArgs 3
	dup
	len
	int 8
	==

	// argument 2 (symbol) for createApplication must be a byte[8]
	assert

	// name: byte[32]
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 3 (name) for createApplication must be a byte[32]
	assert

	// manager: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 4 (manager) for createApplication must be a address
	assert

	// execute createApplication(address,byte[32],byte[8],uint8,uint256)void
	callsub createApplication
	int 1
	return

// createApplication(manager: Address, name: StaticBytes<32>, symbol: StaticBytes<8>, decimals: uint8, totalSupply: uint256): void
createApplication:
	proto 5 0

	// src/contracts/SmartAsset.algo.ts:13
	// this.warden.value = manager
	byte 0x77617264656e // "warden"
	frame_dig -1 // manager: Address
	app_global_put

	// src/contracts/SmartAsset.algo.ts:14
	// this.name.value = name
	byte 0x6e616d65 // "name"
	frame_dig -2 // name: StaticBytes<32>
	app_global_put

	// src/contracts/SmartAsset.algo.ts:15
	// this.symbol.value = symbol
	byte 0x73796d626f6c // "symbol"
	frame_dig -3 // symbol: StaticBytes<8>
	app_global_put

	// src/contracts/SmartAsset.algo.ts:16
	// this.decimals.value = decimals
	byte 0x646563696d616c73 // "decimals"
	frame_dig -4 // decimals: uint8
	itob
	extract 7 1
	app_global_put

	// src/contracts/SmartAsset.algo.ts:17
	// this.totalSupply.value = totalSupply
	byte 0x746f74616c5f737570706c79 // "total_supply"
	frame_dig -5 // totalSupply: uint256
	app_global_put

	// src/contracts/SmartAsset.algo.ts:18
	// this.initialized.value = false
	byte 0x696e697469616c697a6564 // "initialized"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// bootstrap(pay)void
*abi_route_bootstrap:
	// txn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (txn) for bootstrap must be a pay transaction
	assert

	// execute bootstrap(pay)void
	callsub bootstrap
	int 1
	return

// bootstrap(txn: PayTxn): void
bootstrap:
	proto 1 0

	// src/contracts/SmartAsset.algo.ts:22
	// verifyPayTxn(txn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: 2 * globals.minBalance },
	//       closeRemainderTo: globals.zeroAddress,
	//       rekeyTo: globals.zeroAddress,
	//     })
	// verify sender
	frame_dig -1 // txn: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"txn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // txn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"txn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // txn: PayTxn
	gtxns Amount
	int 2
	global MinBalance
	*
	>=

	// transaction verification failed: {"txn":"txn","field":"amount","condition":"greaterThanEqualTo","expected":">=2 * globals.minBalance"}
	assert

	// verify closeRemainderTo
	frame_dig -1 // txn: PayTxn
	gtxns CloseRemainderTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"txn","field":"closeRemainderTo","expected":"globals.zeroAddress"}
	assert

	// verify rekeyTo
	frame_dig -1 // txn: PayTxn
	gtxns RekeyTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"txn","field":"rekeyTo","expected":"globals.zeroAddress"}
	assert

	// src/contracts/SmartAsset.algo.ts:29
	// assert(this.txn.sender === this.warden.value, 'only manager can call bootstrap')
	txn Sender
	byte 0x77617264656e // "warden"
	app_global_get
	==

	// only manager can call bootstrap
	assert

	// src/contracts/SmartAsset.algo.ts:30
	// assert(!this.initialized.value && !this.balances(this.txn.sender).exists, 'already initialized')
	byte 0x696e697469616c697a6564 // "initialized"
	app_global_get
	int 0
	getbit
	!
	dup
	bz *skip_and2
	txn Sender
	box_len
	swap
	pop
	!
	&&

*skip_and2:
	// already initialized
	assert

	// src/contracts/SmartAsset.algo.ts:31
	// this.initialized.value = true
	byte 0x696e697469616c697a6564 // "initialized"
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put

	// src/contracts/SmartAsset.algo.ts:32
	// this.balances(this.txn.sender).value = this.totalSupply.value
	txn Sender
	byte 0x746f74616c5f737570706c79 // "total_supply"
	app_global_get
	box_put

	// src/contracts/SmartAsset.algo.ts:33
	// this.arc200_Transfer.log({
	//       from: globals.zeroAddress,
	//       to: this.txn.sender,
	//       value: this.totalSupply.value
	//     })
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	global ZeroAddress
	txn Sender
	concat
	byte 0x746f74616c5f737570706c79 // "total_supply"
	app_global_get
	concat
	concat
	log
	retsub

*create_NoOp:
	method "createApplication(address,byte[32],byte[8],uint8,uint256)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "arc200_name()byte[32]"
	method "arc200_symbol()byte[8]"
	method "arc200_decimals()uint8"
	method "arc200_totalSupply()uint256"
	method "arc200_balanceOf(address)uint256"
	method "arc200_allowance(address,address)uint256"
	method "arc200_transfer(address,uint256)bool"
	method "arc200_approve(address,uint256)bool"
	method "arc200_transferFrom(address,address,uint256)bool"
	method "supportsInterface(byte[4])bool"
	method "zeroAddress()address"
	method "hasBox(address,address)bool"
	method "createBalanceBox(address)bool"
	method "createAllowanceBox(address,address)bool"
	method "noop(uint64)void"
	method "manager()address"
	method "grant(address)void"
	method "bootstrap(pay)void"
	txna ApplicationArgs 0
	match *abi_route_arc200_name *abi_route_arc200_symbol *abi_route_arc200_decimals *abi_route_arc200_totalSupply *abi_route_arc200_balanceOf *abi_route_arc200_allowance *abi_route_arc200_transfer *abi_route_arc200_approve *abi_route_arc200_transferFrom *abi_route_supportsInterface *abi_route_zeroAddress *abi_route_hasBox *abi_route_createBalanceBox *abi_route_createAllowanceBox *abi_route_noop *abi_route_manager *abi_route_grant *abi_route_bootstrap

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err